.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Source 3pm"
.TH TAP::Parser::Source 3pm "2012-11-03" "perl v5.12.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Source \- Stream output from some source
.SH "VERSION"
.IX Header "VERSION"
Version 3.17
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use TAP::Parser::Source;
\&  my $source = TAP::Parser::Source\->new;
\&  my $stream = $source\->source([\*(Aq/usr/bin/ruby\*(Aq, \*(Aqmytest.rb\*(Aq])\->get_stream;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Takes a command and hopefully returns a stream from it.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\& my $source = TAP::Parser::Source\->new;
.Ve
.PP
Returns a new \f(CW\*(C`TAP::Parser::Source\*(C'\fR object.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`source\*(C'\fI\fR
.IX Subsection "source"
.PP
.Vb 2
\& my $source = $source\->source;
\& $source\->source([\*(Aq./some_prog some_test_file\*(Aq]);
\&
\& # or
\& $source\->source([\*(Aq/usr/bin/ruby\*(Aq, \*(Aqt/ruby_test.rb\*(Aq]);
.Ve
.PP
Getter/setter for the source.  The source should generally consist of an array
reference of strings which, when executed via &IPC::Open3::open3,
should return a filehandle which returns successive rows of \s-1TAP\s0.  \f(CW\*(C`croaks\*(C'\fR if
it doesn't get an arrayref.
.PP
\fI\f(CI\*(C`get_stream\*(C'\fI\fR
.IX Subsection "get_stream"
.PP
.Vb 1
\& my $stream = $source\->get_stream;
.Ve
.PP
Returns a TAP::Parser::Iterator stream of the output generated by executing
\&\f(CW\*(C`source\*(C'\fR.  \f(CW\*(C`croak\*(C'\fRs if there was no command found.
.PP
Must be passed an object that implements a \f(CW\*(C`make_iterator\*(C'\fR method.
Typically this is a TAP::Parser instance.
.PP
\fI\f(CI\*(C`merge\*(C'\fI\fR
.IX Subsection "merge"
.PP
.Vb 1
\&  my $merge = $source\->merge;
.Ve
.PP
Sets or returns the flag that dictates whether \s-1STDOUT\s0 and \s-1STDERR\s0 are merged.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see \*(L"\s-1SUBCLASSING\s0\*(R" in TAP::Parser for a subclassing overview.
.SS "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyRubySource;
\&
\&  use strict;
\&  use vars \*(Aq@ISA\*(Aq;
\&
\&  use Carp qw( croak );
\&  use TAP::Parser::Source;
\&
\&  @ISA = qw( TAP::Parser::Source );
\&
\&  # expect $source\->([\*(Aqmytest.rb\*(Aq, \*(Aqcmdline\*(Aq, \*(Aqargs\*(Aq]);
\&  sub source {
\&    my ($self, $args) = @_;
\&    my ($rb_file) = @$args;
\&    croak("error: Ruby file \*(Aq$rb_file\*(Aq not found!") unless (\-f $rb_file);
\&    return $self\->SUPER::source([\*(Aq/usr/bin/ruby\*(Aq, @$args]);
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::Source::Perl,
