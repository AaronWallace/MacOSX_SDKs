.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DNS::Question 3"
.TH Net::DNS::Question 3 "2009-12-30" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Question \- DNS question class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`use Net::DNS::Question\*(C'\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A \f(CW\*(C`Net::DNS::Question\*(C'\fR object represents a record in the
question section of a \s-1DNS\s0 packet.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $question = Net::DNS::Question\->new("example.com", "MX", "IN");
.Ve
.PP
Creates a question object from the domain, type, and class passed
as arguments.
.PP
\&\s-1RFC4291\s0 and \s-1RFC4632\s0 \s-1IP\s0 address/prefix notation is supported for
queries in in\-addr.arpa and ip6.arpa subdomains.
.SS "parse"
.IX Subsection "parse"
.Vb 1
\&    ($question, $offset) = Net::DNS::Question\->parse(\e$data, $offset);
.Ve
.PP
Parses a question section record at the specified location within a \s-1DNS\s0 packet.
The first argument is a reference to the packet data.
The second argument is the offset within the packet where the question record begins.
.PP
Returns a Net::DNS::Question object and the offset of the next location in the packet.
.PP
Parsing is aborted if the question object cannot be created (e.g., corrupt or insufficient data).
.SS "qname, zname"
.IX Subsection "qname, zname"
.Vb 2
\&    print "qname = ", $question\->qname, "\en";
\&    print "zname = ", $question\->zname, "\en";
.Ve
.PP
Returns the domain name.  In dynamic update packets, this field is
known as \f(CW\*(C`zname\*(C'\fR and refers to the zone name.
.SS "qtype, ztype"
.IX Subsection "qtype, ztype"
.Vb 2
\&    print "qtype = ", $question\->qtype, "\en";
\&    print "ztype = ", $question\->ztype, "\en";
.Ve
.PP
Returns the record type.  In dymamic update packets, this field is
known as \f(CW\*(C`ztype\*(C'\fR and refers to the zone type (must be \s-1SOA\s0).
.SS "qclass, zclass"
.IX Subsection "qclass, zclass"
.Vb 2
\&    print "qclass = ", $question\->qclass, "\en";
\&    print "zclass = ", $question\->zclass, "\en";
.Ve
.PP
Returns the record class.  In dynamic update packets, this field is
known as \f(CW\*(C`zclass\*(C'\fR and refers to the zone's class.
.SS "print"
.IX Subsection "print"
.Vb 1
\&    $question\->print;
.Ve
.PP
Prints the question record on the standard output.
.SS "string"
.IX Subsection "string"
.Vb 1
\&    print $qr\->string, "\en";
.Ve
.PP
Returns a string representation of the question record.
.SS "data"
.IX Subsection "data"
.Vb 1
\&    $qdata = $question\->data($packet, $offset);
.Ve
.PP
Returns the question record in binary format suitable for inclusion
in a \s-1DNS\s0 packet.
.PP
Arguments are a \f(CW\*(C`Net::DNS::Packet\*(C'\fR object and the offset within
that packet's data where the \f(CW\*(C`Net::DNS::Question\*(C'\fR record is to
be stored.  This information is necessary for using compressed
domain names.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 1997\-2002 Michael Fuhr.
.PP
Portions Copyright (c) 2002\-2004 Chris Reinhardt.
.PP
Portions Copyright (c) 2003,2006\-2009 Dick Franks.
.PP
All rights reserved.
.PP
This program is free software; you may redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Net::DNS, Net::DNS::Resolver, Net::DNS::Packet,
Net::DNS::Update, Net::DNS::Header, Net::DNS::RR,
\&\s-1RFC\s0 1035 Section 4.1.2
