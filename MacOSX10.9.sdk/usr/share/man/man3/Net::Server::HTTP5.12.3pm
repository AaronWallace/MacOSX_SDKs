.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Server::HTTP 3"
.TH Net::Server::HTTP 3 "2010-07-13" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::Server::HTTP \- very basic Net::Server based HTTP server class
.SH "TEST ONE LINER"
.IX Header "TEST ONE LINER"
.Vb 1
\&    perl \-e \*(Aquse Net::Server::HTTP; Net::Server::HTTP\->run(port=>8080)\*(Aq
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use base qw(Net::Server::HTTP);
\&    _\|_PACKAGE_\|_\->run;
\&
\&    sub process_http_request {
\&        my $self = shift;
\&
\&        print "Content\-type: text/html\en\en";
\&        print "<form method=post action=/bam><input type=text name=foo><input type=submit></form>\en";
\&
\&        if (require Data::Dumper) {
\&            local $Data::Dumper::Sortkeys = 1;
\&            my $form = {};
\&            if (require CGI) {  my $q = CGI\->new; $form\->{$_} = $q\->param($_) for $q\->param;  }
\&            print "<pre>".Data::Dumper\->Dump([\e%ENV, $form], [\*(Aq*ENV\*(Aq, \*(Aqform\*(Aq])."</pre>";
\&        }
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Even though Net::Server::HTTP doesn't fall into the normal parallel of the other Net::Server flavors,
handling \s-1HTTP\s0 requests is an often requested feature and is a standard and simple protocol.
.PP
Net::Server::HTTP begins with base type MultiType defaulting to Net::Server::Fork.  It is easy
to change it to any of the other Net::Server flavors by passing server_type => \f(CW$other_flavor\fR in the
server configurtation.  The port has also been defaulted to port 80 \- but could easily be changed to
another through the server configuration.
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP """process_http_request""" 4
.el .IP "\f(CWprocess_http_request\fR" 4
.IX Item "process_http_request"
During this method, the \f(CW%ENV\fR will have been set to a standard \s-1CGI\s0 style environment.  You will need to
be sure to print the Content-type header.  This is one change from the other standard Net::Server
base classes.
.Sp
During this method you can read from \s-1ENV\s0 and \s-1STDIN\s0 just like a normal \s-1HTTP\s0 request in other web servers.
You can print to \s-1STDOUT\s0 and Net::Server will handle the header negotiation for you.
.Sp
Note: Net::Server::HTTP has no concept of document root or script aliases or default handling of
static content.  That is up to the consumer of Net::Server::HTTP to work out.
.Sp
Net::Server::HTTP comes with a basic \s-1ENV\s0 display installed as the default process_request method.
.ie n .IP """process_request""" 4
.el .IP "\f(CWprocess_request\fR" 4
.IX Item "process_request"
This method has been overridden in Net::Server::HTTP \- you should not use it while using Net::Server::HTTP.
This method parses the environment and sets up request alarms and handles dying failures.  It calls
process_http_request once the request is ready.
.ie n .IP """send_status""" 4
.el .IP "\f(CWsend_status\fR" 4
.IX Item "send_status"
Takes an \s-1HTTP\s0 status and a message.  Sends out the correct headers.
.ie n .IP """send_501""" 4
.el .IP "\f(CWsend_501\fR" 4
.IX Item "send_501"
Calls send_status with 501 and the argument passed to send_501.
.SH "COMMAND LINE ARGUMENTS"
.IX Header "COMMAND LINE ARGUMENTS"
In addition to the command line arguments of the Net::Server
base classes you can also set the following options.
.IP "max_header_size" 4
.IX Item "max_header_size"
Defaults to 100_000.  Maximum number of bytes to read while parsing headers.
.IP "server_revision" 4
.IX Item "server_revision"
Defaults to Net::Server::HTTP/$Net::Server::VERSION.
.IP "timeout_header" 4
.IX Item "timeout_header"
Defaults to 15 \- number of seconds to wait for parsing headers.
.IP "timeout_idle" 4
.IX Item "timeout_idle"
Defaults to 60 \- number of seconds a request can be idle before
the request is closed.
.SH "TODO"
.IX Header "TODO"
Add support for writing out \s-1HTTP/1\s0.1.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul T. Seamons paul@seamons.com
.SH "THANKS"
.IX Header "THANKS"
See Net::Server
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Please see also
Net::Server::Fork,
Net::Server::INET,
Net::Server::PreFork,
Net::Server::PreForkSimple,
Net::Server::MultiType,
Net::Server::Single
Net::Server::SIG
Net::Server::Daemonize
Net::Server::Proto
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 292:" 4
.IX Item "Around line 292:"
You forgot a '=back' before '=head1'
