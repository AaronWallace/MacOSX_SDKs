.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Variable::Magic 3"
.TH Variable::Magic 3 "2011-10-27" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Variable::Magic \- Associate user\-defined magic to variables from Perl.
.SH "VERSION"
.IX Header "VERSION"
Version 0.47
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Variable::Magic qw<wizard cast VMG_OP_INFO_NAME>;
\&
\&    { # A variable tracer
\&     my $wiz = wizard(
\&      set  => sub { print "now set to ${$_[0]}!\en" },
\&      free => sub { print "destroyed!\en" },
\&     );
\&
\&     my $a = 1;
\&     cast $a, $wiz;
\&     $a = 2;        # "now set to 2!"
\&    }               # "destroyed!"
\&
\&    { # A hash with a default value
\&     my $wiz = wizard(
\&      data     => sub { $_[1] },
\&      fetch    => sub { $_[2] = $_[1] unless exists $_[0]\->{$_[2]}; () },
\&      store    => sub { print "key $_[2] stored in $_[\-1]\en" },
\&      copy_key => 1,
\&      op_info  => VMG_OP_INFO_NAME,
\&     );
\&
\&     my %h = (_default => 0, apple => 2);
\&     cast %h, $wiz, \*(Aq_default\*(Aq;
\&     print $h{banana}, "\en"; # "0" (there is no \*(Aqbanana\*(Aq key in %h)
\&     $h{pear} = 1;           # "key pear stored in helem"
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Magic is Perl's way of enhancing variables.
This mechanism lets the user add extra data to any variable and hook syntactical operations (such as access, assignment or destruction) that can be applied to it.
With this module, you can add your own magic to any variable without having to write a single line of \s-1XS\s0.
.PP
You'll realize that these magic variables look a lot like tied variables.
It's not surprising, as tied variables are implemented as a special kind of magic, just like any 'irregular' Perl variable : scalars like \f(CW$!\fR, \f(CW$(\fR or \f(CW$^W\fR, the \f(CW%ENV\fR and \f(CW%SIG\fR hashes, the \f(CW@ISA\fR array,  \f(CW\*(C`vec()\*(C'\fR and \f(CW\*(C`substr()\*(C'\fR lvalues, threads::shared variables...
They all share the same underlying C \s-1API\s0, and this module gives you direct access to it.
.PP
Still, the magic made available by this module differs from tieing and overloading in several ways :
.IP "\(bu" 4
It isn't copied on assignment.
.Sp
You attach it to variables, not values (as for blessed references).
.IP "\(bu" 4
It doesn't replace the original semantics.
.Sp
Magic callbacks usually get triggered before the original action takes place, and can't prevent it from happening.
This also makes catching individual events easier than with \f(CW\*(C`tie\*(C'\fR, where you have to provide fallbacks methods for all actions by usually inheriting from the correct \f(CW\*(C`Tie::Std*\*(C'\fR class and overriding individual methods in your own class.
.IP "\(bu" 4
It's type-agnostic.
.Sp
The same magic can be applied on scalars, arrays, hashes, subs or globs.
But the same hook (see below for a list) may trigger differently depending on the the type of the variable.
.IP "\(bu" 4
It's mostly invisible at the Perl level.
.Sp
Magical and non-magical variables cannot be distinguished with \f(CW\*(C`ref\*(C'\fR, \f(CW\*(C`tied\*(C'\fR or another trick.
.IP "\(bu" 4
It's notably faster.
.Sp
Mainly because perl's way of handling magic is lighter by nature, and because there's no need for any method resolution.
Also, since you don't have to reimplement all the variable semantics, you only pay for what you actually use.
.PP
The operations that can be overloaded are :
.IP "\(bu" 4
\&\f(CW\*(C`get\*(C'\fR
.Sp
This magic is invoked when the variable is evaluated.
It is never called for arrays and hashes.
.IP "\(bu" 4
\&\f(CW\*(C`set\*(C'\fR
.Sp
This one is triggered each time the value of the variable changes.
It is called for array subscripts and slices, but never for hashes.
.IP "\(bu" 4
\&\f(CW\*(C`len\*(C'\fR
.Sp
This magic is a little special : it is called when the 'size' or the 'length' of the variable has to be known by Perl.
Typically, it's the magic involved when an array is evaluated in scalar context, but also on array assignment and loops (\f(CW\*(C`for\*(C'\fR, \f(CW\*(C`map\*(C'\fR or \f(CW\*(C`grep\*(C'\fR).
The callback has then to return the length as an integer.
.IP "\(bu" 4
\&\f(CW\*(C`clear\*(C'\fR
.Sp
This magic is invoked when the variable is reset, such as when an array is emptied.
Please note that this is different from undefining the variable, even though the magic is called when the clearing is a result of the undefine (e.g. for an array, but actually a bug prevent it to work before perl 5.9.5 \- see the history).
.IP "\(bu" 4
\&\f(CW\*(C`free\*(C'\fR
.Sp
This one can be considered as an object destructor.
It happens when the variable goes out of scope, but not when it is undefined.
.IP "\(bu" 4
\&\f(CW\*(C`copy\*(C'\fR
.Sp
This magic only applies to tied arrays and hashes.
It fires when you try to access or change their elements.
It is available on your perl iff \f(CW\*(C`MGf_COPY\*(C'\fR is true.
.IP "\(bu" 4
\&\f(CW\*(C`dup\*(C'\fR
.Sp
Invoked when the variable is cloned across threads.
Currently not available.
.IP "\(bu" 4
\&\f(CW\*(C`local\*(C'\fR
.Sp
When this magic is set on a variable, all subsequent localizations of the variable will trigger the callback.
It is available on your perl iff \f(CW\*(C`MGf_LOCAL\*(C'\fR is true.
.PP
The following actions only apply to hashes and are available iff \*(L"\s-1VMG_UVAR\s0\*(R" is true.
They are referred to as \f(CW\*(C`uvar\*(C'\fR magics.
.IP "\(bu" 4
\&\f(CW\*(C`fetch\*(C'\fR
.Sp
This magic happens each time an element is fetched from the hash.
.IP "\(bu" 4
\&\f(CW\*(C`store\*(C'\fR
.Sp
This one is called when an element is stored into the hash.
.IP "\(bu" 4
\&\f(CW\*(C`exists\*(C'\fR
.Sp
This magic fires when a key is tested for existence in the hash.
.IP "\(bu" 4
\&\f(CW\*(C`delete\*(C'\fR
.Sp
This last one triggers when a key is deleted in the hash, regardless of whether the key actually exists in it.
.PP
You can refer to the tests to have more insight of where the different magics are invoked.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS """wizard"""
.el .SS "\f(CWwizard\fP"
.IX Subsection "wizard"
.Vb 10
\&    wizard(
\&     data     => sub { ... },
\&     get      => sub { my ($ref, $data [, $op]) = @_; ... },
\&     set      => sub { my ($ref, $data [, $op]) = @_; ... },
\&     len      => sub {
\&      my ($ref, $data, $len [, $op]) = @_; ... ; return $newlen
\&     },
\&     clear    => sub { my ($ref, $data [, $op]) = @_; ... },
\&     free     => sub { my ($ref, $data [, $op]) = @_, ... },
\&     copy     => sub { my ($ref, $data, $key, $elt [, $op]) = @_; ... },
\&     local    => sub { my ($ref, $data [, $op]) = @_; ... },
\&     fetch    => sub { my ($ref, $data, $key [, $op]) = @_; ... },
\&     store    => sub { my ($ref, $data, $key [, $op]) = @_; ... },
\&     exists   => sub { my ($ref, $data, $key [, $op]) = @_; ... },
\&     delete   => sub { my ($ref, $data, $key [, $op]) = @_; ... },
\&     copy_key => $bool,
\&     op_info  => [ 0 | VMG_OP_INFO_NAME | VMG_OP_INFO_OBJECT ],
\&    )
.Ve
.PP
This function creates a 'wizard', an opaque type that holds the magic information.
It takes a list of keys / values as argument, whose keys can be :
.IP "\(bu" 4
\&\f(CW\*(C`data\*(C'\fR
.Sp
A code (or string) reference to a private data constructor.
It is called each time this magic is cast on a variable, and the scalar returned is used as private data storage for it.
\&\f(CW$_[0]\fR is a reference to the magic object and \f(CW@_[1 .. @_\-1]\fR are all extra arguments that were passed to \*(L"cast\*(R".
.IP "\(bu" 4
\&\f(CW\*(C`get\*(C'\fR, \f(CW\*(C`set\*(C'\fR, \f(CW\*(C`len\*(C'\fR, \f(CW\*(C`clear\*(C'\fR, \f(CW\*(C`free\*(C'\fR, \f(CW\*(C`copy\*(C'\fR, \f(CW\*(C`local\*(C'\fR, \f(CW\*(C`fetch\*(C'\fR, \f(CW\*(C`store\*(C'\fR, \f(CW\*(C`exists\*(C'\fR and \f(CW\*(C`delete\*(C'\fR
.Sp
Code (or string) references to the corresponding magic callbacks.
You don't have to specify all of them : the magic associated with undefined entries simply won't be hooked.
In those callbacks, \f(CW$_[0]\fR is always a reference to the magic object and \f(CW$_[1]\fR is always the private data (or \f(CW\*(C`undef\*(C'\fR when no private data constructor was supplied).
.Sp
Moreover, when you pass \f(CW\*(C`op_info => $num\*(C'\fR to \f(CW\*(C`wizard\*(C'\fR, the last element of \f(CW@_\fR will be the current op name if \f(CW\*(C`$num == VMG_OP_INFO_NAME\*(C'\fR and a \f(CW\*(C`B::OP\*(C'\fR object representing the current op if \f(CW\*(C`$num == VMG_OP_INFO_OBJECT\*(C'\fR.
Both have a performance hit, but just getting the name is lighter than getting the op object.
.Sp
Other arguments are specific to the magic hooked :
.RS 4
.IP "\(bu" 8
\&\f(CW\*(C`len\*(C'\fR
.Sp
When the variable is an array or a scalar, \f(CW$_[2]\fR contains the non-magical length.
The callback can return the new scalar or array length to use, or \f(CW\*(C`undef\*(C'\fR to default to the normal length.
.IP "\(bu" 8
\&\f(CW\*(C`copy\*(C'\fR
.Sp
\&\f(CW$_[2]\fR is a either a copy or an alias of the current key, which means that it is useless to try to change or cast magic on it.
\&\f(CW$_[3]\fR is an alias to the current element (i.e. the value).
.IP "\(bu" 8
\&\f(CW\*(C`fetch\*(C'\fR, \f(CW\*(C`store\*(C'\fR, \f(CW\*(C`exists\*(C'\fR and \f(CW\*(C`delete\*(C'\fR
.Sp
\&\f(CW$_[2]\fR is an alias to the current key.
Nothing prevents you from changing it, but be aware that there lurk dangerous side effects.
For example, it may rightfully be readonly if the key was a bareword.
You can get a copy instead by passing \f(CW\*(C`copy_key => 1\*(C'\fR to \*(L"wizard\*(R", which allows you to safely assign to \f(CW$_[2]\fR in order to e.g. redirect the action to another key.
This however has a little performance drawback because of the copy.
.RE
.RS 4
.Sp
All the callbacks are expected to return an integer, which is passed straight to the perl magic \s-1API\s0.
However, only the return value of the \f(CW\*(C`len\*(C'\fR callback currently holds a meaning.
.RE
.PP
Each callback can be specified as a code or a string reference, in which case the function denoted by the string will be used as the callback.
.PP
Note that \f(CW\*(C`free\*(C'\fR callbacks are \fInever\fR called during global destruction, as there's no way to ensure that the wizard and the \f(CW\*(C`free\*(C'\fR callback weren't destroyed before the variable.
.PP
Here's a simple usage example :
.PP
.Vb 6
\&    # A simple scalar tracer
\&    my $wiz = wizard(
\&     get  => sub { print STDERR "got ${$_[0]}\en" },
\&     set  => sub { print STDERR "set to ${$_[0]}\en" },
\&     free => sub { print STDERR "${$_[0]} was deleted\en" },
\&    );
.Ve
.ie n .SS """cast"""
.el .SS "\f(CWcast\fP"
.IX Subsection "cast"
.Vb 1
\&    cast [$@%&*]var, $wiz, ...
.Ve
.PP
This function associates \f(CW$wiz\fR magic to the variable supplied, without overwriting any other kind of magic.
It returns true on success or when \f(CW$wiz\fR magic is already present, and croaks on error.
All extra arguments specified after \f(CW$wiz\fR are passed to the private data constructor in \f(CW@_[1 .. @_\-1]\fR.
If the variable isn't a hash, any \f(CW\*(C`uvar\*(C'\fR callback of the wizard is safely ignored.
.PP
.Vb 3
\&    # Casts $wiz onto $x, and pass \*(Aq1\*(Aq to the data constructor.
\&    my $x;
\&    cast $x, $wiz, 1;
.Ve
.PP
The \f(CW\*(C`var\*(C'\fR argument can be an array or hash value.
Magic for those behaves like for any other scalar, except that it is dispelled when the entry is deleted from the container.
For example, if you want to call \f(CW\*(C`POSIX::tzset\*(C'\fR each time the \f(CW\*(AqTZ\*(Aq\fR environment variable is changed in \f(CW%ENV\fR, you can use :
.PP
.Vb 2
\&    use POSIX;
\&    cast $ENV{TZ}, wizard set => sub { POSIX::tzset(); () };
.Ve
.PP
If you want to overcome the possible deletion of the \f(CW\*(AqTZ\*(Aq\fR entry, you have no choice but to rely on \f(CW\*(C`store\*(C'\fR uvar magic.
.ie n .SS """getdata"""
.el .SS "\f(CWgetdata\fP"
.IX Subsection "getdata"
.Vb 1
\&    getdata [$@%&*]var, $wiz
.Ve
.PP
This accessor fetches the private data associated with the magic \f(CW$wiz\fR in the variable.
It croaks when \f(CW$wiz\fR do not represent a valid magic object, and returns an empty list if no such magic is attached to the variable or when the wizard has no data constructor.
.PP
.Vb 2
\&    # Get the attached data, or undef if the wizard does not attach any.
\&    my $data = getdata $x, $wiz;
.Ve
.ie n .SS """dispell"""
.el .SS "\f(CWdispell\fP"
.IX Subsection "dispell"
.Vb 1
\&    dispell [$@%&*]variable, $wiz
.Ve
.PP
The exact opposite of \*(L"cast\*(R" : it dissociates \f(CW$wiz\fR magic from the variable.
This function returns true on success, \f(CW0\fR when no magic represented by \f(CW$wiz\fR could be found in the variable, and croaks if the supplied wizard is invalid.
.PP
.Vb 2
\&    # Dispell now.
\&    die \*(Aqno such magic in $x\*(Aq unless dispell $x, $wiz;
.Ve
.SH "CONSTANTS"
.IX Header "CONSTANTS"
.ie n .SS """MGf_COPY"""
.el .SS "\f(CWMGf_COPY\fP"
.IX Subsection "MGf_COPY"
Evaluates to true iff the 'copy' magic is available.
.ie n .SS """MGf_DUP"""
.el .SS "\f(CWMGf_DUP\fP"
.IX Subsection "MGf_DUP"
Evaluates to true iff the 'dup' magic is available.
.ie n .SS """MGf_LOCAL"""
.el .SS "\f(CWMGf_LOCAL\fP"
.IX Subsection "MGf_LOCAL"
Evaluates to true iff the 'local' magic is available.
.ie n .SS """VMG_UVAR"""
.el .SS "\f(CWVMG_UVAR\fP"
.IX Subsection "VMG_UVAR"
When this constant is true, you can use the \f(CW\*(C`fetch,store,exists,delete\*(C'\fR callbacks on hashes.
Initial \s-1VMG_UVAR\s0 capability was introduced in perl 5.9.5, with a fully functional implementation
shipped with perl 5.10.0.
.ie n .SS """VMG_COMPAT_SCALAR_LENGTH_NOLEN"""
.el .SS "\f(CWVMG_COMPAT_SCALAR_LENGTH_NOLEN\fP"
.IX Subsection "VMG_COMPAT_SCALAR_LENGTH_NOLEN"
True for perls that don't call 'len' magic when taking the \f(CW\*(C`length\*(C'\fR of a magical scalar.
.ie n .SS """VMG_COMPAT_ARRAY_PUSH_NOLEN"""
.el .SS "\f(CWVMG_COMPAT_ARRAY_PUSH_NOLEN\fP"
.IX Subsection "VMG_COMPAT_ARRAY_PUSH_NOLEN"
True for perls that don't call 'len' magic when you push an element in a magical array.
Starting from perl 5.11.0, this only refers to pushes in non-void context and hence is false.
.ie n .SS """VMG_COMPAT_ARRAY_PUSH_NOLEN_VOID"""
.el .SS "\f(CWVMG_COMPAT_ARRAY_PUSH_NOLEN_VOID\fP"
.IX Subsection "VMG_COMPAT_ARRAY_PUSH_NOLEN_VOID"
True for perls that don't call 'len' magic when you push in void context an element in a magical array.
.ie n .SS """VMG_COMPAT_ARRAY_UNSHIFT_NOLEN_VOID"""
.el .SS "\f(CWVMG_COMPAT_ARRAY_UNSHIFT_NOLEN_VOID\fP"
.IX Subsection "VMG_COMPAT_ARRAY_UNSHIFT_NOLEN_VOID"
True for perls that don't call 'len' magic when you unshift in void context an element in a magical array.
.ie n .SS """VMG_COMPAT_ARRAY_UNDEF_CLEAR"""
.el .SS "\f(CWVMG_COMPAT_ARRAY_UNDEF_CLEAR\fP"
.IX Subsection "VMG_COMPAT_ARRAY_UNDEF_CLEAR"
True for perls that call 'clear' magic when undefining magical arrays.
.ie n .SS """VMG_COMPAT_HASH_DELETE_NOUVAR_VOID"""
.el .SS "\f(CWVMG_COMPAT_HASH_DELETE_NOUVAR_VOID\fP"
.IX Subsection "VMG_COMPAT_HASH_DELETE_NOUVAR_VOID"
True for perls that don't call 'delete' uvar magic when you delete an element from a hash in void context.
.ie n .SS """VMG_COMPAT_GLOB_GET"""
.el .SS "\f(CWVMG_COMPAT_GLOB_GET\fP"
.IX Subsection "VMG_COMPAT_GLOB_GET"
True for perls that call 'get' magic for operations on globs.
.ie n .SS """VMG_PERL_PATCHLEVEL"""
.el .SS "\f(CWVMG_PERL_PATCHLEVEL\fP"
.IX Subsection "VMG_PERL_PATCHLEVEL"
The perl patchlevel this module was built with, or \f(CW0\fR for non-debugging perls.
.ie n .SS """VMG_THREADSAFE"""
.el .SS "\f(CWVMG_THREADSAFE\fP"
.IX Subsection "VMG_THREADSAFE"
True iff this module could have been built with thread-safety features enabled.
.ie n .SS """VMG_FORKSAFE"""
.el .SS "\f(CWVMG_FORKSAFE\fP"
.IX Subsection "VMG_FORKSAFE"
True iff this module could have been built with fork-safety features enabled.
This will always be true except on Windows where it's false for perl 5.10.0 and below .
.ie n .SS """VMG_OP_INFO_NAME"""
.el .SS "\f(CWVMG_OP_INFO_NAME\fP"
.IX Subsection "VMG_OP_INFO_NAME"
Value to pass with \f(CW\*(C`op_info\*(C'\fR to get the current op name in the magic callbacks.
.ie n .SS """VMG_OP_INFO_OBJECT"""
.el .SS "\f(CWVMG_OP_INFO_OBJECT\fP"
.IX Subsection "VMG_OP_INFO_OBJECT"
Value to pass with \f(CW\*(C`op_info\*(C'\fR to get a \f(CW\*(C`B::OP\*(C'\fR object representing the current op in the magic callbacks.
.SH "COOKBOOK"
.IX Header "COOKBOOK"
.SS "Associate an object to any perl variable"
.IX Subsection "Associate an object to any perl variable"
This technique can be useful for passing user data through limited APIs.
It is similar to using inside-out objects, but without the drawback of having to implement a complex destructor.
.PP
.Vb 2
\&    {
\&     package Magical::UserData;
\&
\&     use Variable::Magic qw<wizard cast getdata>;
\&
\&     my $wiz = wizard data => sub { \e$_[1] };
\&
\&     sub ud (\e[$@%*&]) : lvalue {
\&      my ($var) = @_;
\&      my $data = &getdata($var, $wiz);
\&      unless (defined $data) {
\&       $data = \e(my $slot);
\&       &cast($var, $wiz, $slot)
\&                 or die "Couldn\*(Aqt cast UserData magic onto the variable";
\&      }
\&      $$data;
\&     }
\&    }
\&
\&    {
\&     BEGIN { *ud = \e&Magical::UserData::ud }
\&
\&     my $cb;
\&     $cb = sub { print \*(AqHello, \*(Aq, ud(&$cb), "!\en" };
\&
\&     ud(&$cb) = \*(Aqworld\*(Aq;
\&     $cb\->(); # Hello, world!
\&    }
.Ve
.SS "Recursively cast magic on datastructures"
.IX Subsection "Recursively cast magic on datastructures"
\&\f(CW\*(C`cast\*(C'\fR can be called from any magical callback, and in particular from \f(CW\*(C`data\*(C'\fR.
This allows you to recursively cast magic on datastructures :
.PP
.Vb 10
\&    my $wiz;
\&    $wiz = wizard data => sub {
\&     my ($var, $depth) = @_;
\&     $depth ||= 0;
\&     my $r = ref $var;
\&     if ($r eq \*(AqARRAY\*(Aq) {
\&      &cast((ref() ? $_ : \e$_), $wiz, $depth + 1) for @$var;
\&     } elsif ($r eq \*(AqHASH\*(Aq) {
\&      &cast((ref() ? $_ : \e$_), $wiz, $depth + 1) for values %$var;
\&     }
\&     return $depth;
\&    },
\&    free => sub {
\&     my ($var, $depth) = @_;
\&     my $r = ref $var;
\&     print "free $r at depth $depth\en";
\&     ();
\&    };
\&
\&    {
\&     my %h = (
\&      a => [ 1, 2 ],
\&      b => { c => 3 }
\&     );
\&     cast %h, $wiz;
\&    }
.Ve
.PP
When \f(CW%h\fR goes out of scope, this will print something among the lines of :
.PP
.Vb 6
\&    free HASH at depth 0
\&    free HASH at depth 1
\&    free SCALAR at depth 2
\&    free ARRAY at depth 1
\&    free SCALAR at depth 3
\&    free SCALAR at depth 3
.Ve
.PP
Of course, this example does nothing with the values that are added after the \f(CW\*(C`cast\*(C'\fR.
.SH "PERL MAGIC HISTORY"
.IX Header "PERL MAGIC HISTORY"
The places where magic is invoked have changed a bit through perl history.
Here's a little list of the most recent ones.
.IP "\(bu" 4
\&\fB5.6.x\fR
.Sp
\&\fIp14416\fR : 'copy' and 'dup' magic.
.IP "\(bu" 4
\&\fB5.8.9\fR
.Sp
\&\fIp28160\fR : Integration of \fIp25854\fR (see below).
.Sp
\&\fIp32542\fR : Integration of \fIp31473\fR (see below).
.IP "\(bu" 4
\&\fB5.9.3\fR
.Sp
\&\fIp25854\fR : 'len' magic is no longer called when pushing an element into a magic array.
.Sp
\&\fIp26569\fR : 'local' magic.
.IP "\(bu" 4
\&\fB5.9.5\fR
.Sp
\&\fIp31064\fR : Meaningful 'uvar' magic.
.Sp
\&\fIp31473\fR : 'clear' magic wasn't invoked when undefining an array.
The bug is fixed as of this version.
.IP "\(bu" 4
\&\fB5.10.0\fR
.Sp
Since \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR is uppercased, \f(CW\*(C`hv_magic_check()\*(C'\fR triggers 'copy' magic on hash stores for (non-tied) hashes that also have 'uvar' magic.
.IP "\(bu" 4
\&\fB5.11.x\fR
.Sp
\&\fIp32969\fR : 'len' magic is no longer invoked when calling \f(CW\*(C`length\*(C'\fR with a magical scalar.
.Sp
\&\fIp34908\fR : 'len' magic is no longer called when pushing / unshifting an element into a magical array in void context.
The \f(CW\*(C`push\*(C'\fR part was already covered by \fIp25854\fR.
.Sp
\&\fIg9cdcb38b\fR : 'len' magic is called again when pushing into a magical array in non-void context.
.SH "EXPORT"
.IX Header "EXPORT"
The functions \*(L"wizard\*(R", \*(L"cast\*(R", \*(L"getdata\*(R" and \*(L"dispell\*(R" are only exported on request.
All of them are exported by the tags \f(CW\*(Aq:funcs\*(Aq\fR and \f(CW\*(Aq:all\*(Aq\fR.
.PP
All the constants are also only exported on request, either individually or by the tags \f(CW\*(Aq:consts\*(Aq\fR and \f(CW\*(Aq:all\*(Aq\fR.
.SH "CAVEATS"
.IX Header "CAVEATS"
If you store a magic object in the private data slot, the magic won't be accessible by \*(L"getdata\*(R" since it's not copied by assignment.
The only way to address this would be to return a reference.
.PP
If you define a wizard with a \f(CW\*(C`free\*(C'\fR callback and cast it on itself, this destructor won't be called because the wizard will be destroyed first.
.PP
In order to define magic on hash members, you need at least perl 5.10.0 (see \*(L"\s-1VMG_UVAR\s0\*(R")
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
perl 5.8.
.PP
A C compiler.
This module may happen to build with a \*(C+ compiler as well, but don't rely on it, as no guarantee is made in this regard.
.PP
Carp (standard since perl 5), XSLoader (standard since perl 5.006).
.PP
Copy tests need Tie::Array (standard since perl 5.005) and Tie::Hash (since 5.002).
.PP
Some uvar tests need Hash::Util::FieldHash (standard since perl 5.009004).
.PP
Glob tests need Symbol (standard since perl 5.002).
.PP
Threads tests need threads and threads::shared.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlguts and perlapi for internal information about magic.
.PP
perltie and overload for other ways of enhancing objects.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vincent Pit, \f(CW\*(C`<perl at profvince.com>\*(C'\fR, <http://www.profvince.com>.
.PP
You can contact me by mail or on \f(CW\*(C`irc.perl.org\*(C'\fR (vincent).
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-variable\-magic at rt.cpan.org\*(C'\fR, or through the web interface at http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Variable\-Magic <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Variable-Magic>. I will be notified, and then you'll automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Variable::Magic
.Ve
.PP
Tests code coverage report is available at http://www.profvince.com/perl/cover/Variable\-Magic <http://www.profvince.com/perl/cover/Variable-Magic>.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2007,2008,2009,2010,2011 Vincent Pit, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
