.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBD::File::HowTo 3"
.TH DBD::File::HowTo 3 "2010-09-16" "perl v5.16.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBD::File::HowTo \- Guide to create DBD::File based driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  perldoc DBD::File::HowTo
\&  perldoc DBI
\&  perldoc DBI::DBD
\&  perldoc DBD::File::Developers
\&  perldoc DBI::DBD::SqlEngine::Developers
\&  perldoc DBI::DBD::SqlEngine
\&  perldoc SQL::Eval
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc SQL::Statement::Embed
\&  perldoc DBD::File
\&  perldoc DBD::File::HowTo
\&  perldoc DBD::File::Developers
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a step-by-step guide, how to create a new
\&\f(CW\*(C`DBD::File\*(C'\fR based \s-1DBD\s0. It expects that you carefully read the \s-1DBI\s0
documentation and that you're familiar with \s-1DBI::DBD\s0 and had read and
understood DBD::ExampleP.
.PP
This document addresses experienced developers who are really sure that
they need to invest time when writing a new \s-1DBI\s0 Driver. Writing a \s-1DBI\s0
Driver is neither a weekend project nor an easy job for hobby coders
after work. Expect one or two man-month of time for the first start.
.PP
Those who are still reading, should be able to sing the rules of
\&\*(L"\s-1CREATING\s0 A \s-1NEW\s0 \s-1DRIVER\s0\*(R" in \s-1DBI::DBD\s0.
.PP
Of course, DBD::File is a DBI::DBD::SqlEngine and you surely read
DBI::DBD::SqlEngine::HowTo before continuing here.
.SH "CREATING DRIVER CLASSES"
.IX Header "CREATING DRIVER CLASSES"
Do you have an entry in \s-1DBI\s0's \s-1DBD\s0 registry? For this guide, a prefix of
\&\f(CW\*(C`foo_\*(C'\fR is assumed.
.SS "Sample Skeleton"
.IX Subsection "Sample Skeleton"
.Vb 1
\&    package DBD::Foo;
\&
\&    use strict;
\&    use warnings;
\&    use vars qw(@ISA $VERSION);
\&    use base qw(DBD::File);
\&
\&    use DBI ();
\&
\&    $VERSION = "0.001";
\&
\&    package DBD::Foo::dr;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBD::File::dr);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::db;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBD::File::db);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::st;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBD::File::st);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::Statement;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBD::File::Statement);
\&
\&    package DBD::Foo::Table;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBD::File::Table);
\&
\&    1;
.Ve
.PP
Tiny, eh? And all you have now is a \s-1DBD\s0 named foo which will is able to
deal with temporary tables, as long as you use SQL::Statement. In
DBI::SQL::Nano environments, this \s-1DBD\s0 can do nothing.
.SS "Start over"
.IX Subsection "Start over"
Based on DBI::DBD::SqlEngine::HowTo, we're now having a driver which
could do basic things. Of course, it should now derive from DBD::File
instead of DBI::DBD::SqlEngine, shouldn't it?
.PP
DBD::File extends DBI::DBD::SqlEngine to deal with any kind of files.
In principle, the only extensions required are to the table class:
.PP
.Vb 1
\&    package DBD::Foo::Table;
\&
\&    sub bootstrap_table_meta
\&    {
\&        my ( $self, $dbh, $meta, $table ) = @_;
\&
\&        # initialize all $meta attributes which might be relevant for
\&        # file2table
\&
\&        return $self\->SUPER::bootstrap_table_meta($dbh, $meta, $table);
\&    }
\&
\&    sub init_table_meta
\&    {
\&        my ( $self, $dbh, $meta, $table ) = @_;
\&
\&        # called after $meta contains the results from file2table
\&        # initialize all missing $meta attributes
\&
\&        $self\->SUPER::init_table_meta( $dbh, $meta, $table );
\&    }
.Ve
.PP
In case \f(CW\*(C`DBD::File::Table::open_file\*(C'\fR doesn't open the files as the driver
needs that, override it!
.PP
.Vb 7
\&    sub open_file
\&    {
\&        my ( $self, $meta, $attrs, $flags ) = @_;
\&        # ensure that $meta\->{f_dontopen} is set
\&        $self\->SUPER::open_file( $meta, $attrs, $flags );
\&        # now do what ever needs to be done
\&    }
.Ve
.PP
Combined with the methods implemented using the SQL::Statement::Embed
guide, the table is full working and you could try a start over.
.SS "User comfort"
.IX Subsection "User comfort"
\&\f(CW\*(C`DBD::File\*(C'\fR since \f(CW0.39\fR consolidates all persistent meta data of a table
into a single structure stored in \f(CW\*(C`$dbh\->{f_meta}\*(C'\fR. While DBD::File
provides only readonly access to this structure, modifications are still
allowed.
.PP
Primarily DBD::File provides access via setters \f(CW\*(C`get_file_meta\*(C'\fR,
\&\f(CW\*(C`set_file_meta\*(C'\fR and \f(CW\*(C`clear_file_meta\*(C'\fR. Those methods are easily
accessible by the users via the \f(CW\*(C`$dbh\->func ()\*(C'\fR interface provided
by \s-1DBI\s0. Well, many users don't feel comfortize when calling
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->func ("cars", "f_ext", ".csv", "set_file_meta");
.Ve
.PP
DBD::File will inject a method into your driver to increase the user
comfort to allow:
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->foo_set_meta ("cars", "f_ext", ".csv");
.Ve
.PP
Better, but here and there users likes to do:
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->{foo_tables}\->{cars}\->{f_ext} = ".csv";
.Ve
.PP
This interface is provided when derived \s-1DBD\s0's define following in
\&\f(CW\*(C`init_valid_attributes\*(C'\fR (please compare carefully with the example in
DBI::DBD::SqlEngine::HowTo):
.PP
.Vb 3
\&    sub init_valid_attributes
\&    {
\&        my $dbh = $_[0];
\&
\&        $dbh\->SUPER::init_valid_attributes ();
\&
\&        $dbh\->{foo_valid_attrs} = {
\&            foo_version         => 1,   # contains version of this driver
\&            foo_valid_attrs     => 1,   # contains the valid attributes of foo drivers
\&            foo_readonly_attrs  => 1,   # contains immutable attributes of foo drivers
\&            foo_bar             => 1,   # contains the bar attribute
\&            foo_baz             => 1,   # contains the baz attribute
\&            foo_manager         => 1,   # contains the manager of the driver instance
\&            foo_manager_type    => 1,   # contains the manager class of the driver instance
\&            foo_meta            => 1,   # contains the public interface to modify table meta attributes
\&        };
\&        $dbh\->{foo_readonly_attrs} = {
\&            foo_version         => 1,   # ensure no\-one modifies the driver version
\&            foo_valid_attrs     => 1,   # do not permit to add more valid attributes ...
\&            foo_readonly_attrs  => 1,   # ... or make the immutable mutable
\&            foo_manager         => 1,   # manager is set internally only
\&            foo_meta            => 1,   # ensure public interface to modify table meta attributes are immutable
\&        };
\&
\&        $dbh\->{foo_meta} = "foo_tables";
\&
\&        return $dbh;
\&    }
.Ve
.PP
This provides a tied hash in \f(CW\*(C`$dbh\->{foo_tables}\*(C'\fR and a tied hash for
each table's meta data in \f(CW\*(C`$dbh\->{foo_tables}\->{$table_name}\*(C'\fR.
Modifications on the table meta attributes are done using the table
methods:
.PP
.Vb 2
\&    sub get_table_meta_attr { ... }
\&    sub set_table_meta_attr { ... }
.Ve
.PP
Both methods can adjust the attribute name for compatibility reasons, e.g.
when former versions of the \s-1DBD\s0 allowed different names to be used for the
same flag:
.PP
.Vb 5
\&    my %compat_map = (
\&                       abc => \*(Aqfoo_abc\*(Aq,
\&                       xyz => \*(Aqfoo_xyz\*(Aq,
\&                     );
\&    _\|_PACKAGE_\|_\->register_compat_map( \e%compat_map );
.Ve
.PP
If any user modification on a meta attribute needs reinitialization of
the meta structure (in case of \f(CW\*(C`DBD::File\*(C'\fR these are the attributes
\&\f(CW\*(C`f_file\*(C'\fR, \f(CW\*(C`f_dir\*(C'\fR, \f(CW\*(C`f_ext\*(C'\fR and \f(CW\*(C`f_lockfile\*(C'\fR), inform DBD::File by
doing
.PP
.Vb 5
\&    my %reset_on_modify = (
\&                            foo_xyz => "foo_bar",
\&                            foo_abc => "foo_bar",
\&                          );
\&    _\|_PACKAGE_\|_\->register_reset_on_modify( \e%reset_on_modify );
.Ve
.PP
The next access to the table meta data will force DBD::File to re-do the
entire meta initialization process.
.PP
Any further action which needs to be taken can handled in
\&\f(CW\*(C`table_meta_attr_changed\*(C'\fR:
.PP
.Vb 6
\&    sub table_meta_attr_changed
\&    {
\&        my ($class, $meta, $attrib, $value) = @_;
\&        ...
\&        $class\->SUPER::table_meta_attr_changed ($meta, $attrib, $value);
\&    }
.Ve
.PP
This is done before the new value is set in \f(CW$meta\fR, so the attribute
changed handler can act depending on the old value.
.SS "Testing"
.IX Subsection "Testing"
Now you should have your own DBD::File based driver. Was easy, wasn't it?
But does it work well?  Prove it by writing tests and remember to use
dbd_edit_mm_attribs from \s-1DBI::DBD\s0 to ensure testing even rare cases.
.SH "AUTHOR"
.IX Header "AUTHOR"
This guide is written by Jens Rehsack. DBD::File is written by Jochen
Wiedmann and Jeff Zucker.
.PP
The module DBD::File is currently maintained by
.PP
H.Merijn Brand < h.m.brand at xs4all.nl > and
Jens Rehsack  < rehsack at googlemail.com >
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by H.Merijn Brand & Jens Rehsack
.PP
All rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License, as
specified in the Perl \s-1README\s0 file.
