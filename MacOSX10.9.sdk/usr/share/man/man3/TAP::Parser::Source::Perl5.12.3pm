.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "TAP::Parser::Source::Perl 3pm"
.TH TAP::Parser::Source::Perl 3pm "2012-11-03" "perl v5.12.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
TAP::Parser::Source::Perl \- Stream Perl output
.SH "VERSION"
.IX Header "VERSION"
Version 3.17
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use TAP::Parser::Source::Perl;
\&  my $perl = TAP::Parser::Source::Perl\->new;
\&  my $stream = $perl\->source( [ $filename, @args ] )\->get_stream;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Takes a filename and hopefully returns a stream from it.  The filename should
be the name of a Perl program.
.PP
Note that this is a subclass of TAP::Parser::Source.  See that module for
more methods.
.SH "METHODS"
.IX Header "METHODS"
.SS "Class Methods"
.IX Subsection "Class Methods"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\& my $perl = TAP::Parser::Source::Perl\->new;
.Ve
.PP
Returns a new \f(CW\*(C`TAP::Parser::Source::Perl\*(C'\fR object.
.SS "Instance Methods"
.IX Subsection "Instance Methods"
\fI\f(CI\*(C`source\*(C'\fI\fR
.IX Subsection "source"
.PP
Getter/setter the name of the test program and any arguments it requires.
.PP
.Vb 2
\&  my ($filename, @args) = @{ $perl\->source };
\&  $perl\->source( [ $filename, @args ] );
.Ve
.PP
\&\f(CW\*(C`croak\*(C'\fRs if \f(CW$filename\fR could not be found.
.PP
\fI\f(CI\*(C`switches\*(C'\fI\fR
.IX Subsection "switches"
.PP
.Vb 3
\&  my $switches = $perl\->switches;
\&  my @switches = $perl\->switches;
\&  $perl\->switches( \e@switches );
.Ve
.PP
Getter/setter for the additional switches to pass to the perl executable.  One
common switch would be to set an include directory:
.PP
.Vb 1
\&  $perl\->switches( [\*(Aq\-Ilib\*(Aq] );
.Ve
.PP
\fI\f(CI\*(C`get_stream\*(C'\fI\fR
.IX Subsection "get_stream"
.PP
.Vb 1
\&  my $stream = $source\->get_stream($parser);
.Ve
.PP
Returns a stream of the output generated by executing \f(CW\*(C`source\*(C'\fR. Must be
passed an object that implements a \f(CW\*(C`make_iterator\*(C'\fR method. Typically
this is a TAP::Parser instance.
.PP
\fI\f(CI\*(C`shebang\*(C'\fI\fR
.IX Subsection "shebang"
.PP
Get the shebang line for a script file.
.PP
.Vb 1
\&  my $shebang = TAP::Parser::Source::Perl\->shebang( $some_script );
.Ve
.PP
May be called as a class method
.PP
\fI\f(CI\*(C`get_taint\*(C'\fI\fR
.IX Subsection "get_taint"
.PP
Decode any taint switches from a Perl shebang line.
.PP
.Vb 2
\&  # $taint will be \*(Aqt\*(Aq
\&  my $taint = TAP::Parser::Source::Perl\->get_taint( \*(Aq#!/usr/bin/perl \-t\*(Aq );
\&
\&  # $untaint will be undefined
\&  my $untaint = TAP::Parser::Source::Perl\->get_taint( \*(Aq#!/usr/bin/perl\*(Aq );
.Ve
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Please see \*(L"\s-1SUBCLASSING\s0\*(R" in TAP::Parser for a subclassing overview.
.SS "Example"
.IX Subsection "Example"
.Vb 1
\&  package MyPerlSource;
\&
\&  use strict;
\&  use vars \*(Aq@ISA\*(Aq;
\&
\&  use Carp qw( croak );
\&  use TAP::Parser::Source::Perl;
\&
\&  @ISA = qw( TAP::Parser::Source::Perl );
\&
\&  sub source {
\&      my ($self, $args) = @_;
\&      if ($args) {
\&          $self\->{file} = $args\->[0];
\&          return $self\->SUPER::source($args);
\&      }
\&      return $self\->SUPER::source;
\&  }
\&
\&  # use the version of perl from the shebang line in the test file
\&  sub _get_perl {
\&      my $self = shift;
\&      if (my $shebang = $self\->shebang( $self\->{file} )) {
\&          $shebang =~ /^#!(.*\ebperl.*?)(?:(?:\es)|(?:$))/;
\&          return $1 if $1;
\&      }
\&      return $self\->SUPER::_get_perl(@_);
\&  }
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
TAP::Object,
TAP::Parser,
TAP::Parser::Source,
