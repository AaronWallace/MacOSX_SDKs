.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Moose::Cookbook::Extending::Recipe1 3"
.TH Moose::Cookbook::Extending::Recipe1 3 "2011-09-06" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Moose::Cookbook::Extending::Recipe1 \- Moose extension overview
.SH "VERSION"
.IX Header "VERSION"
version 2.0205
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Moose provides several ways in which extensions can hook into Moose
and change its behavior. Moose also has a lot of behavior that can be
changed. This recipe will provide an overview of each extension method
and give you some recommendations on what tools to use.
.PP
If you haven't yet read the recipes on metaclasses, go read those
first. You can't write Moose extensions without understanding the
metaclasses, and those recipes also demonstrate some basic extension
mechanisms, such as metaclass subclasses and traits.
.SS "Playing Nice With Others"
.IX Subsection "Playing Nice With Others"
One of the goals of this overview is to help you build extensions that
cooperate well with other extensions. This is especially important if
you plan to release your extension to \s-1CPAN\s0.
.PP
Moose comes with several modules that exist to help your write
cooperative extensions. These are Moose::Exporter and
Moose::Util::MetaRole. By using these two modules, you will ensure
that your extension works with both the Moose core features and any
other \s-1CPAN\s0 extension using those modules.
.SH "PARTS OF Moose YOU CAN EXTEND"
.IX Header "PARTS OF Moose YOU CAN EXTEND"
The types of things you might want to do in Moose extensions fall into
a few broad categories.
.SS "Metaclass Extensions"
.IX Subsection "Metaclass Extensions"
One way of extending Moose is by extending one or more Moose
metaclasses. For example, in Moose::Cookbook::Meta::Recipe4 we saw
a metaclass subclass that added a \f(CW\*(C`table\*(C'\fR attribute to the
metaclass. If you were writing an \s-1ORM\s0, this would be a logical
extension.
.PP
Many of the Moose extensions on \s-1CPAN\s0 work by providing an attribute
metaclass extension. For example, the MooseX::AttributeHelpers
distribution provides a new attribute metaclass that lets you delegate
behavior to a non-object attribute (a hashref or simple number).
.PP
A metaclass extension can be packaged as a subclass or a
role/trait. If you can, we recommend using traits instead of
subclasses, since it's much easier to combine disparate traits than it
is to combine a bunch of subclasses.
.PP
When your extensions are implemented as roles, you can apply them with
the Moose::Util::MetaRole module.
.SS "Providing Sugar Functions"
.IX Subsection "Providing Sugar Functions"
As part of a metaclass extension, you may also want to provide some
sugar functions, just like Moose.pm does. Moose provides a
helper module called Moose::Exporter that makes this much
simpler. We will be use Moose::Exporter in several of the extension
recipes.
.SS "Object Class Extensions"
.IX Subsection "Object Class Extensions"
Another common Moose extension technique is to change the default
object class's behavior. For example, the MooseX::Singleton
extension changes the behavior of your objects so that they are
singletons. The MooseX::StrictConstructor extension makes the
constructor reject arguments which don't match its attributes.
.PP
Object class extensions often include metaclass extensions as well. In
particular, if you want your object extension to work when a class is
made immutable, you may need to extend some or all of the
Moose::Meta::Instance, Moose::Meta::Method::Constructor, and
Moose::Meta::Method::Destructor objects.
.PP
The Moose::Util::MetaRole module lets you apply roles to the base
object class, as well as the meta classes just mentioned.
.SS "Providing a Role"
.IX Subsection "Providing a Role"
Some extensions come in the form of a role for you to consume. The
MooseX::Object::Pluggable extension is a great example of this. In
fact, despite the \f(CW\*(C`MooseX\*(C'\fR name, it does not actually change anything
about Moose's behavior. Instead, it is just a role that an object
which wants to be pluggable can consume.
.PP
If you are implementing this sort of extension, you don't need to do
anything special. You simply create a role and document that it should
be used via the normal \f(CW\*(C`with\*(C'\fR sugar:
.PP
.Vb 1
\&   package MyApp::User;
\&
\&   use Moose;
\&
\&   with \*(AqMooseX::My::Role\*(Aq;
.Ve
.SS "New Types"
.IX Subsection "New Types"
Another common Moose extension is a new type for the Moose type
system. In this case, you simply create a type in your module. When
people load your module, the type is created, and they can refer to it
by name after that. The MooseX::Types::URI and
MooseX::Types::DateTime distributions are two good examples of how
this works. These both build on top of the MooseX::Types extension.
.SH "ROLES VS TRAITS VS SUBCLASSES"
.IX Header "ROLES VS TRAITS VS SUBCLASSES"
It is important to understand that \fBroles and traits are the same thing\fR. A
trait is simply a role applied to a instance. The only thing that may
distinguish the two is that a trait can be packaged in a way that lets Moose
resolve a short name to a class name. In other words, with a trait, the caller
can refer to it by a short name like \*(L"Big\*(R", and Moose will resolve it to a
class like \f(CW\*(C`MooseX::Embiggen::Meta::Attribute::Role::Big\*(C'\fR.
.PP
See Moose::Cookbook::Meta::Recipe3 and
Moose::Cookbook::Meta::Recipe5 for examples of traits in action. In
particular, both of these recipes demonstrate the trait resolution
mechanism.
.PP
Implementing an extension as a (set of) metaclass or base object
role(s) will make your extension more cooperative. It is hard for an
end-user to effectively combine together multiple metaclass
subclasses, but it is very easy to combine roles.
.SH "USING YOUR EXTENSION"
.IX Header "USING YOUR EXTENSION"
There are a number of ways in which an extension can be applied. In
some cases you can provide multiple ways of consuming your extension.
.SS "Extensions as Metaclass Traits"
.IX Subsection "Extensions as Metaclass Traits"
If your extension is available as a trait, you can ask end users to
simply specify it in a list of traits. Currently, this only works for
(class) metaclass and attribute metaclass traits:
.PP
.Vb 1
\&  use Moose \-traits => [ \*(AqBig\*(Aq, \*(AqBlue\*(Aq ];
\&
\&  has \*(Aqanimal\*(Aq => (
\&      traits => [ \*(AqBig\*(Aq, \*(AqBlue\*(Aq ],
\&      ...
\&  );
.Ve
.PP
If your extension applies to any other metaclass, or the object base
class, you cannot use the trait mechanism.
.PP
The benefit of the trait mechanism is that is very easy to see where a
trait is applied in the code, and consumers have fine-grained control
over what the trait applies to. This is especially true for attribute
traits, where you can apply the trait to just one attribute in a
class.
.SS "Extensions as Metaclass (and Base Object) Subclasses"
.IX Subsection "Extensions as Metaclass (and Base Object) Subclasses"
Moose does not provide any simple APIs for consumers to use a subclass
extension, except for attribute metaclasses. The attribute declaration
options include a \f(CW\*(C`metaclass\*(C'\fR option a consumer of your extension can
use to specify your subclass.
.PP
This is one reason why implementing an extension as a subclass can be
a poor choice. However, you can force the use of certain subclasses at
import time by calling \f(CW\*(C`Moose\->init_meta\*(C'\fR for the caller, and
providing an alternate metaclass or base object class.
.PP
If you do want to do this, you should look at using Moose::Exporter
to re-export the Moose.pm sugar function. With
Moose::Exporter, if your exporting class has an \f(CW\*(C`init_meta\*(C'\fR
method, Moose::Exporter makes sure that this \f(CW\*(C`init_meta\*(C'\fR method
gets called when your class is imported.
.PP
Then in your \f(CW\*(C`init_meta\*(C'\fR you can arrange for the caller to use your
subclasses:
.PP
.Vb 1
\&  package MooseX::Embiggen;
\&
\&  use Moose ();
\&  use Moose::Exporter;
\&
\&  use MooseX::Embiggen::Meta::Class;
\&  use MooseX::Embiggen::Object;
\&
\&  Moose::Exporter\->setup_import_methods( also => \*(AqMoose\*(Aq );
\&
\&  sub init_meta {
\&      shift;    # just your package name
\&      my %options = @_;
\&
\&      return Moose\->init_meta(
\&          for_class  => $options{for_class},
\&          metaclass  => \*(AqMooseX::Embiggen::Meta::Class\*(Aq,
\&          base_class => \*(AqMooseX::Embiggen::Object\*(Aq,
\&      );
\&  }
.Ve
.PP
\&\s-1NOTE:\s0 Make sure that your \f(CW\*(C`init_meta\*(C'\fR returns the metaclass object, just as
\&\f(CW\*(C`Moose\->init_meta\*(C'\fR does.
.SS "Extensions as Metaclass (and Base Object) Roles"
.IX Subsection "Extensions as Metaclass (and Base Object) Roles"
Implementing your extensions as metaclass roles makes your extensions
easy to apply, and cooperative with other role-based extensions for
metaclasses.
.PP
Just as with a subclass, you will probably want to package your
extensions for consumption with a single module that uses
Moose::Exporter. However, in this case, you will use
Moose::Util::MetaRole to apply all of your roles. The advantage of
using this module is that \fIit preserves any subclassing or roles
already applied to the user's metaclasses\fR. This means that your
extension is cooperative \fIby default\fR, and consumers of your
extension can easily use it with other role-based extensions. Most
uses of Moose::Util::MetaRole can be handled by Moose::Exporter
directly; see the Moose::Exporter docs.
.PP
.Vb 1
\&  package MooseX::Embiggen;
\&
\&  use Moose ();
\&  use Moose::Exporter;
\&
\&  use MooseX::Embiggen::Role::Meta::Class;
\&  use MooseX::Embiggen::Role::Meta::Attribute;
\&  use MooseX::Embiggen::Role::Meta::Method::Constructor;
\&  use MooseX::Embiggen::Role::Object;
\&
\&  my ( $import, $unimport, $init_meta ) = Moose::Exporter\->build_import_methods(
\&      also => [\*(AqMoose\*(Aq] metaclass_roles =>
\&          [\*(AqMooseX::Embiggen::Role::Meta::Class\*(Aq],
\&      attribute_metaclass_roles => [\*(AqMooseX::Embiggen::Role::Meta::Attribute\*(Aq],
\&      constructor_class_roles =>
\&          [\*(AqMooseX::Embiggen::Role::Meta::Method::Constructor\*(Aq],
\&      base_class_roles => [\*(AqMooseX::Embiggen::Role::Object\*(Aq],
\&      install          => [qw(import unimport)],
\&  );
\&
\&  sub init_meta {
\&      my $package = shift;
\&      my %options = @_;
\&      Moose\->init_meta(%options);
\&      return $package\->$init_meta(%options);
\&  }
.Ve
.PP
As you can see from this example, you can use Moose::Util::MetaRole
to apply roles to any metaclass, as well as the base object class. If
some other extension has already applied its own roles, they will be
preserved when your extension applies its roles, and vice versa.
.SS "Providing Sugar"
.IX Subsection "Providing Sugar"
With Moose::Exporter, you can also export your own sugar functions,
as well as those from other modules:
.PP
.Vb 1
\&  package MooseX::Embiggen;
\&
\&  use Moose ();
\&  use Moose::Exporter;
\&
\&  Moose::Exporter\->setup_import_methods(
\&      with_meta => [\*(Aqembiggen\*(Aq],
\&      also      => \*(AqMoose\*(Aq,
\&  );
\&
\&  sub embiggen {
\&      my $meta = shift;
\&      $meta\->embiggen(@_);
\&  }
.Ve
.PP
And then the consumer of your extension can use your \f(CW\*(C`embiggen\*(C'\fR sub:
.PP
.Vb 1
\&  package Consumer;
\&
\&  use MooseX::Embiggen;
\&
\&  extends \*(AqThing\*(Aq;
\&
\&  embiggen ...;
.Ve
.PP
This can be combined with metaclass and base class roles quite easily.
.SH "LEGACY EXTENSION MECHANISMS"
.IX Header "LEGACY EXTENSION MECHANISMS"
Before the existence of Moose::Exporter and
Moose::Util::MetaRole, there were a number of other ways to extend
Moose. In general, these methods were less cooperative, and only
worked well with a single extension.
.PP
These methods include metaclass.pm, Moose::Policy
(which uses metaclass.pm under the hood), and various
hacks to do what Moose::Exporter does. Please do not use these for
your own extensions.
.PP
Note that if you write a cooperative extension, it should cooperate
with older extensions, though older extensions generally do not
cooperate with each other.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
If you can write your extension as one or more metaclass and base
object roles, please consider doing so. Make sure to read the docs for
Moose::Exporter and Moose::Util::MetaRole as well.
.SH "AUTHOR"
.IX Header "AUTHOR"
Stevan Little <stevan@iinteractive.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Infinity Interactive, Inc..
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
