.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DNS::Domain 3"
.TH Net::DNS::Domain 3 "2009-12-30" "perl v5.12.5" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&    Net::DNS::Domain \- Domain Name System domains
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DNS::Domain
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \f(CW\*(C`Net::DNS::Domain\*(C'\fR module implements a class of abstract
\&\s-1DNS\s0 domain objects with associated class and instance methods.
.PP
Each domain object instance represents a single \s-1DNS\s0 domain which
has a fixed identity throughout its lifetime.
.PP
Internally, the primary representation is a (possibly empty) list
of \s-1ASCII\s0 domain labels, and optional link to an ancestor domain
object topologically closer to the root of the \s-1DNS\s0 namespace.
.PP
The presentation form of the domain name is generated on demand
and the result cached within the object.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&    $domain = new Net::DNS::Domain(\*(Aqexample.com\*(Aq);
.Ve
.PP
Creates a domain object which represents the \s-1DNS\s0 domain
identified by the character string argument.  The identifier
consists of a sequence of labels delimited by dots.
.PP
The argument string consists of printable characters from the
7\-bit \s-1ASCII\s0 repertoire.
.PP
A character preceded by \e represents itself, without any special
interpretation.
.PP
Any 8\-bit code point can be represented by \e followed by exactly
three decimal digits.
Character code points are \s-1ASCII\s0, irrespective of the encoding
employed by the underlying platform.
No characters are associated with code points beyond 127.
.PP
Argument strings should be delimited by single quotes to avoid
escape sequences being misinterpreted by the compiler.
.PP
The character string presentation format follows the conventions
for zone files described in \s-1RFC1035\s0.
.SS "decode"
.IX Subsection "decode"
.Vb 1
\&    $domain = decode Net::DNS::Domain( \e$buffer, $offset, $hash );
\&
\&    ( $domain, $next ) = decode Net::DNS::Domain( \e$buffer, $offset, $hash );
.Ve
.PP
Creates a domain object which represents the \s-1DNS\s0 domain
identified by the compressed name at the indicated offset within
the data buffer.
.PP
The argument list consists of a reference to a scalar containing
the wire-format data, specified offset and reference to a hash
used to represent compressed names.
.PP
The returned offset value indicates the start of the next item
in the data buffer.
.SS "encode"
.IX Subsection "encode"
.Vb 1
\&    $data = $domain\->encode( $offset, $hash );
.Ve
.PP
Returns the wire-format representation of the domain object
suitable for inclusion in a \s-1DNS\s0 packet buffer.
.PP
The optional arguments are the offset within the packet data
where the domain name is to be stored and a reference to a
hash table used to index compressed names within the packet.
.SS "name"
.IX Subsection "name"
.Vb 1
\&    $name = $domain\->name;
.Ve
.PP
Returns a character string corresponding to the \*(L"typical\*(R" form of
domain name to which section 11 of \s-1RFC2181\s0 alludes.
.PP
The string consists of printable characters from the 7\-bit \s-1ASCII\s0
repertoire.  Code points outside this set are represented by the
appropriate numerical escape sequence.
.SS "mailbox"
.IX Subsection "mailbox"
.Vb 1
\&    $mail = $domain\->mailbox;
.Ve
.PP
Returns a character string containing the mailbox interpretation
of the domain name as described in \s-1RFC1035\s0 section 8.
.SS "string"
.IX Subsection "string"
.Vb 1
\&    $fqdn = $domain\->string;
.Ve
.PP
Returns a character string containing the absolute name of the
domain as described in \s-1RFC1035\s0 section 5.1.
.PP
The string consists of printable characters from the 7\-bit \s-1ASCII\s0
repertoire.  Code points outside this set are represented by the
appropriate numerical escape sequence.
.PP
Characters which have special meaning in a zone file, dots which
are part of a domain label, and the escape character itself are
represented by escape sequences which remove any such meaning.
.SH "BUGS"
.IX Header "BUGS"
Platform-specific parts of the code are designed to be optimised
away by the compiler for reasons of efficiency. This is achieved
at considerable expense in terms of readability.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)2009 Dick Franks.
.PP
All rights reserved.
.PP
This program is free software; you may redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), Net::DNS, \s-1RFC1035\s0, \s-1RFC2181\s0.
