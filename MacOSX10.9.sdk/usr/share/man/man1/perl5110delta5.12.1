.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL5110DELTA 1"
.TH PERL5110DELTA 1 "2012-11-03" "perl v5.12.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl5110delta \- what is new for perl v5.11.0
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.10.0 release and
the 5.11.0 development release.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Unicode interpretation of \ew, \ed, \es, and the \s-1POSIX\s0 character classes redefined."
.IX Subsection "Unicode interpretation of w, d, s, and the POSIX character classes redefined."
Previous versions of Perl tried to map \s-1POSIX\s0 style character class definitions onto
Unicode property names so that patterns would \*(L"dwim\*(R" when matches were made against latin\-1 or
unicode strings. This proved to be a mistake, breaking character class negation, causing
forward compatibility problems (as Unicode keeps updating their property definitions and adding
new characters), and other problems.
.PP
Therefore we have now defined a new set of artificial \*(L"unicode\*(R" property names which will be
used to do unicode matching of patterns using \s-1POSIX\s0 style character classes and perl short-form
escape character classes like \ew and \ed.
.PP
The key change here is that \ed will no longer match every digit in the unicode standard
(there are thousands) nor will \ew match every word character in the standard, instead they
will match precisely their \s-1POSIX\s0 or Perl definition.
.PP
Those needing to match based on Unicode properties can continue to do so by using the \ep{} syntax
to match whichever property they like, including the new artificial definitions.
.PP
\&\fB\s-1NOTE:\s0\fR This is a backwards incompatible no-warning change in behaviour. If you are upgrading
and you process large volumes of text look for \s-1POSIX\s0 and Perl style character classes and
change them to the relevent property name (by removing the word 'Posix' from the current name).
.PP
The following table maps the \s-1POSIX\s0 character class names, the escapes and the old and new
Unicode property mappings:
.PP
.Vb 10
\&    POSIX  Esc  Class               New\-Property  ! Old\-Property
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    alnum       [0\-9A\-Za\-z]         IsPosixAlnum  ! IsAlnum
\&    alpha       [A\-Za\-z]            IsPosixAlpha  ! IsAlpha
\&    ascii       [\e000\-\e177]         IsASCII       = IsASCII
\&    blank       [\e011 ]             IsPosixBlank  !
\&    cntrl       [\e0\-\e37\e177]        IsPosixCntrl  ! IsCntrl
\&    digit   \ed  [0\-9]               IsPosixDigit  ! IsDigit
\&    graph       [!\-~]               IsPosixGraph  ! IsGraph
\&    lower       [a\-z]               IsPosixLower  ! IsLower
\&    print       [ \-~]               IsPosixPrint  ! IsPrint
\&    punct       [!\-/:\-@[\-\`{\-~]      IsPosixPunct  ! IsPunct
\&    space       [\e11\-\e15 ]          IsPosixSpace  ! IsSpace
\&            \es  [\e11\e12\e14\e15 ]     IsPerlSpace   ! IsSpacePerl
\&    upper       [A\-Z]               IsPosixUpper  ! IsUpper
\&    word    \ew  [0\-9A\-Z_a\-z]        IsPerlWord    ! IsWord
\&    xdigit      [0\-9A\-Fa\-f]         IsXDigit      = IsXDigit
.Ve
.PP
If you wish to build perl with the old mapping you may do so by setting
.PP
.Vb 1
\&        #define PERL_LEGACY_UNICODE_CHARCLASS_MAPPINGS 1
.Ve
.PP
in regcomp.h, and then setting
.PP
.Vb 1
\&        PERL_TEST_LEGACY_POSIX_CC
.Ve
.PP
to true your enviornment when testing.
.ie n .SS "@INC reorganization"
.el .SS "\f(CW@INC\fP reorganization"
.IX Subsection "@INC reorganization"
In \f(CW@INC\fR, \s-1ARCHLIB\s0 and \s-1PRIVLIB\s0 now occur after after the current version's
site_perl and vendor_perl.
.SS "Switch statement changes"
.IX Subsection "Switch statement changes"
The handling of complex expressions by the \f(CW\*(C`given\*(C'\fR/\f(CW\*(C`when\*(C'\fR switch
statement has been enhanced. These enhancements are also available in
5.10.1 and subsequent 5.10 releases. There are two new cases where \f(CW\*(C`when\*(C'\fR now
interprets its argument as a boolean, instead of an expression to be used
in a smart match:
.IP "flip-flop operators" 4
.IX Item "flip-flop operators"
The \f(CW\*(C`..\*(C'\fR and \f(CW\*(C`...\*(C'\fR flip-flop operators are now evaluated in boolean
context, following their usual semantics; see \*(L"Range Operators\*(R" in perlop.
.Sp
Note that, as in perl 5.10.0, \f(CW\*(C`when (1..10)\*(C'\fR will not work to test
whether a given value is an integer between 1 and 10; you should use
\&\f(CW\*(C`when ([1..10])\*(C'\fR instead (note the array reference).
.Sp
However, contrary to 5.10.0, evaluating the flip-flop operators in boolean
context ensures it can now be useful in a \f(CW\*(C`when()\*(C'\fR, notably for
implementing bistable conditions, like in:
.Sp
.Vb 3
\&    when (/^=begin/ .. /^=end/) {
\&      # do something
\&    }
.Ve
.IP "defined-or operator" 4
.IX Item "defined-or operator"
A compound expression involving the defined-or operator, as in
\&\f(CW\*(C`when (expr1 // expr2)\*(C'\fR, will be treated as boolean if the first
expression is boolean. (This just extends the existing rule that applies
to the regular or operator, as in \f(CW\*(C`when (expr1 || expr2)\*(C'\fR.)
.PP
The next section details more changes brought to the semantics to
the smart match operator, that naturally also modify the behaviour
of the switch statements where smart matching is implicitly used.
These changers were also made for the 5.10.1 release, and will remain in
subsequent 5.10 releases.
.SS "Smart match changes"
.IX Subsection "Smart match changes"
\fIChanges to type-based dispatch\fR
.IX Subsection "Changes to type-based dispatch"
.PP
The smart match operator \f(CW\*(C`~~\*(C'\fR is no longer commutative. The behaviour of
a smart match now depends primarily on the type of its right hand
argument. Moreover, its semantics have been adjusted for greater
consistency or usefulness in several cases. While the general backwards
compatibility is maintained, several changes must be noted:
.IP "\(bu" 4
Code references with an empty prototype are no longer treated specially.
They are passed an argument like the other code references (even if they
choose to ignore it).
.IP "\(bu" 4
\&\f(CW\*(C`%hash ~~ sub {}\*(C'\fR and \f(CW\*(C`@array ~~ sub {}\*(C'\fR now test that the subroutine
returns a true value for each key of the hash (or element of the
array), instead of passing the whole hash or array as a reference to
the subroutine.
.IP "\(bu" 4
Due to the commutativity breakage, code references are no longer
treated specially when appearing on the left of the \f(CW\*(C`~~\*(C'\fR operator,
but like any vulgar scalar.
.IP "\(bu" 4
\&\f(CW\*(C`undef ~~ %hash\*(C'\fR is always false (since \f(CW\*(C`undef\*(C'\fR can't be a key in a
hash). No implicit conversion to \f(CW""\fR is done (as was the case in perl
5.10.0).
.IP "\(bu" 4
\&\f(CW\*(C`$scalar ~~ @array\*(C'\fR now always distributes the smart match across the
elements of the array. It's true if one element in \f(CW@array\fR verifies
\&\f(CW\*(C`$scalar ~~ $element\*(C'\fR. This is a generalization of the old behaviour
that tested whether the array contained the scalar.
.PP
The full dispatch table for the smart match operator is given in
\&\*(L"Smart matching in detail\*(R" in perlsyn.
.PP
\fISmart match and overloading\fR
.IX Subsection "Smart match and overloading"
.PP
According to the rule of dispatch based on the rightmost argument type,
when an object overloading \f(CW\*(C`~~\*(C'\fR appears on the right side of the
operator, the overload routine will always be called (with a 3rd argument
set to a true value, see overload.) However, when the object will
appear on the left, the overload routine will be called only when the
rightmost argument is a simple scalar. This way distributivity of smart match
across arrays is not broken, as well as the other behaviours with complex
types (coderefs, hashes, regexes). Thus, writers of overloading routines
for smart match mostly need to worry only with comparing against a scalar,
and possibly with stringification overloading; the other common cases
will be automatically handled consistently.
.PP
\&\f(CW\*(C`~~\*(C'\fR will now refuse to work on objects that do not overload it (in order
to avoid relying on the object's underlying structure). (However, if the
object overloads the stringification or the numification operators, and
if overload fallback is active, it will be used instead, as usual.)
.SS "Labels can't be keywords"
.IX Subsection "Labels can't be keywords"
Labels used as targets for the \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`redo\*(C'\fR
statements cannot be keywords anymore. This restriction will prevent
potential confusion between the \f(CW\*(C`goto LABEL\*(C'\fR and \f(CW\*(C`goto EXPR\*(C'\fR syntaxes:
for example, a statement like \f(CW\*(C`goto print\*(C'\fR would jump to a label whose
name would be the return value of \f(CW\*(C`print()\*(C'\fR, (usually 1), instead of a
label named \f(CW\*(C`print\*(C'\fR. Moreover, the other control flow statements
would just ignore any keyword passed to them as a label name. Since
such labels cannot be defined anymore, this kind of error will be
avoided.
.SS "Other incompatible changes"
.IX Subsection "Other incompatible changes"
.IP "\(bu" 4
The semantics of \f(CW\*(C`use feature :5.10*\*(C'\fR have changed slightly.
See \*(L"Modules and Pragmata\*(R" for more information.
.IP "\(bu" 4
It is now a run-time error to use the smart match operator \f(CW\*(C`~~\*(C'\fR
with an object that has no overload defined for it. (This way
\&\f(CW\*(C`~~\*(C'\fR will not break encapsulation by matching against the
object's internal representation as a reference.)
.IP "\(bu" 4
The version control system used for the development of the perl
interpreter has been switched from Perforce to git.  This is mainly an
internal issue that only affects people actively working on the perl core;
but it may have minor external visibility, for example in some of details
of the output of \f(CW\*(C`perl \-V\*(C'\fR. See perlrepository for more information.
.IP "\(bu" 4
The internal structure of the \f(CW\*(C`ext/\*(C'\fR directory in the perl source has
been reorganised. In general, a module \f(CW\*(C`Foo::Bar\*(C'\fR whose source was
stored under \fIext/Foo/Bar/\fR is now located under \fIext/Foo\-Bar/\fR. Also,
nearly all dual-life modules have been moved from \fIlib/\fR to \fIext/\fR. This
is purely a source tarball change, and should make no difference to the
compilation or installation of perl, unless you have a very customised build
process that explicitly relies on this structure, or which hard-codes the
\&\f(CW\*(C`nonxs_ext\*(C'\fR \fIConfigure\fR parameter. Specifically, this change does not by
default alter the location of any files in the final installation.
.IP "\(bu" 4
As part of the \f(CW\*(C`Test::Harness\*(C'\fR 2.x to 3.x upgrade, the experimental
\&\f(CW\*(C`Test::Harness::Straps\*(C'\fR module has been removed.
See \*(L"Updated Modules\*(R" for more details.
.IP "\(bu" 4
As part of the \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR upgrade, the
\&\f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR modules
have been removed from this distribution.
.IP "\(bu" 4
\&\f(CW\*(C`Module::CoreList\*(C'\fR no longer contains the \f(CW%:patchlevel\fR hash.
.IP "\(bu" 4
This one is actually a change introduced in 5.10.0, but it was missed
from that release's perldelta, so it is mentioned here instead.
.Sp
A bugfix related to the handling of the \f(CW\*(C`/m\*(C'\fR modifier and \f(CW\*(C`qr\*(C'\fR resulted
in a change of behaviour between 5.8.x and 5.10.0:
.Sp
.Vb 2
\&    # matches in 5.8.x, doesn\*(Aqt match in 5.10.0
\&    $re = qr/^bar/; "foo\enbar" =~ /$re/m;
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`length undef\*(C'\fR now returns undef.
.IP "\(bu" 4
Unsupported private C \s-1API\s0 functions are now declared \*(L"static\*(R" to prevent
leakage to Perl's public \s-1API\s0.
.IP "\(bu" 4
To support the bootstrapping process, \fIminiperl\fR no longer builds with
\&\s-1UTF\-8\s0 support in the regexp engine.
.Sp
This allows a build to complete with \s-1PERL_UNICODE\s0 set and a \s-1UTF\-8\s0 locale.
Without this there's a bootstrapping problem, as miniperl can't load the \s-1UTF\-8\s0
components of the regexp engine, because they're not yet built.
.IP "\(bu" 4
\&\fIminiperl\fR's \f(CW@INC\fR is now restricted to just \-I..., the split of \f(CW$ENV\fR{\s-1PERL5LIB\s0}, and \*(L".\*(R"
.IP "\(bu" 4
A space or a newline is now required after a \f(CW"#line XXX"\fR directive.
.IP "\(bu" 4
Tied filehandles now have an additional method \s-1EOF\s0 which provides the \s-1EOF\s0 type
.IP "\(bu" 4
To better match all other flow control statements, \f(CW\*(C`foreach\*(C'\fR may no longer be used as an attribute.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Unicode Character Database 5.1.0"
.IX Subsection "Unicode Character Database 5.1.0"
The copy of the Unicode Character Database included in Perl 5.11.0 has
been updated to 5.1.0 from 5.0.0. See
<http://www.unicode.org/versions/Unicode5.1.0/#Notable_Changes> for the
notable changes.
.SS "A proper interface for pluggable Method Resolution Orders"
.IX Subsection "A proper interface for pluggable Method Resolution Orders"
As of Perl 5.11.0 there is a new interface for plugging and using method
resolution orders other than the default (linear depth first search).
The C3 method resolution order added in 5.10.0 has been re-implemented as
a plugin, without changing its Perl-space interface. See perlmroapi for
more information.
.ie n .SS "The ""overloading"" pragma"
.el .SS "The \f(CWoverloading\fP pragma"
.IX Subsection "The overloading pragma"
This pragma allows you to lexically disable or enable overloading
for some or all operations. (Yuval Kogman)
.ie n .SS """\eN"" regex escape"
.el .SS "\f(CW\eN\fP regex escape"
.IX Subsection "N regex escape"
A new regex escape has been added, \f(CW\*(C`\eN\*(C'\fR. It will match any character that
is not a newline, independently from the presence or absence of the single
line match modifier \f(CW\*(C`/s\*(C'\fR. (If \f(CW\*(C`\eN\*(C'\fR is followed by an opening brace and
by a letter, perl will still assume that a Unicode character name is
coming, so compatibility is preserved.) (Rafael Garcia-Suarez)
.SS "Implicit strictures"
.IX Subsection "Implicit strictures"
Using the \f(CW\*(C`use VERSION\*(C'\fR syntax with a version number greater or equal
to 5.11.0 will also lexically enable strictures just like \f(CW\*(C`use strict\*(C'\fR
would do (in addition to enabling features.) So, the following:
.PP
.Vb 1
\&    use 5.11.0;
.Ve
.PP
will now imply:
.PP
.Vb 2
\&    use strict;
\&    use feature \*(Aq:5.11\*(Aq;
.Ve
.SS "Parallel tests"
.IX Subsection "Parallel tests"
The core distribution can now run its regression tests in parallel on
Unix-like platforms. Instead of running \f(CW\*(C`make test\*(C'\fR, set \f(CW\*(C`TEST_JOBS\*(C'\fR in
your environment to the number of tests to run in parallel, and run
\&\f(CW\*(C`make test_harness\*(C'\fR. On a Bourne-like shell, this can be done as
.PP
.Vb 1
\&    TEST_JOBS=3 make test_harness  # Run 3 tests in parallel
.Ve
.PP
An environment variable is used, rather than parallel make itself, because
TAP::Harness needs to be able to schedule individual non-conflicting test
scripts itself, and there is no standard interface to \f(CW\*(C`make\*(C'\fR utilities to
interact with their job schedulers.
.PP
Note that currently some test scripts may fail when run in parallel (most
notably \f(CW\*(C`ext/IO/t/io_dir.t\*(C'\fR). If necessary run just the failing scripts
again sequentially and see if the failures go away.
.ie n .SS "The ""..."" operator"
.el .SS "The \f(CW...\fP operator"
.IX Subsection "The ... operator"
A new operator, \f(CW\*(C`...\*(C'\fR, nicknamed the Yada Yada operator, has been added.
It is intended to mark placeholder code, that is not yet implemented.
See \*(L"Yada Yada Operator\*(R" in perlop. (chromatic)
.SS "DTrace support"
.IX Subsection "DTrace support"
Some support for DTrace has been added. See \*(L"DTrace support\*(R" in \fI\s-1INSTALL\s0\fR.
.ie n .SS "Support for ""configure_requires"" in \s-1CPAN\s0 module metadata"
.el .SS "Support for \f(CWconfigure_requires\fP in \s-1CPAN\s0 module metadata"
.IX Subsection "Support for configure_requires in CPAN module metadata"
Both \f(CW\*(C`CPAN\*(C'\fR and \f(CW\*(C`CPANPLUS\*(C'\fR now support the \f(CW\*(C`configure_requires\*(C'\fR keyword
in the \fI\s-1META\s0.yml\fR metadata file included in most recent \s-1CPAN\s0 distributions.
This allows distribution authors to specify configuration prerequisites that
must be installed before running \fIMakefile.PL\fR or \fIBuild.PL\fR.
.PP
See the documentation for \f(CW\*(C`ExtUtils::MakeMaker\*(C'\fR or \f(CW\*(C`Module::Build\*(C'\fR for more
on how to specify \f(CW\*(C`configure_requires\*(C'\fR when creating a distribution for \s-1CPAN\s0.
.ie n .SS """each"" is now more flexible"
.el .SS "\f(CWeach\fP is now more flexible"
.IX Subsection "each is now more flexible"
The \f(CW\*(C`each\*(C'\fR function can now operate on arrays.
.SS "Y2038 compliance"
.IX Subsection "Y2038 compliance"
Perl's core time-related functions are now Y2038 compliant. (With 29
years to spare!)
.ie n .SS "$, flexibility"
.el .SS "\f(CW$,\fP flexibility"
.IX Subsection "$, flexibility"
The variable \f(CW$,\fR may now be tied.
.SS "// in where clauses"
.IX Subsection "// in where clauses"
// now behaves like || in when clauses
.SS "Enabling warnings from your shell environment"
.IX Subsection "Enabling warnings from your shell environment"
You can now set \f(CW\*(C`\-W\*(C'\fR from the \f(CW\*(C`PERL5OPT\*(C'\fR environment variable
.ie n .SS """delete local"""
.el .SS "\f(CWdelete local\fP"
.IX Subsection "delete local"
\&\f(CW\*(C`delete local\*(C'\fR now allows you to locally delete a hash entry.
.SS "New support for Abstract namespace sockets"
.IX Subsection "New support for Abstract namespace sockets"
Abstract namespace sockets are Linux-specific socket type that live in
\&\s-1AF_UNIX\s0 family, slightly abusing it to be able to use arbitrary
character arrays as addresses: They start with nul byte and are not
terminated by nul byte, but with the length passed to the \fIsocket()\fR
system call.
.SH "Modules and Pragmata"
.IX Header "Modules and Pragmata"
.SS "Dual-lifed modules moved"
.IX Subsection "Dual-lifed modules moved"
Dual-lifed modules maintained primarily in the Perl core now live in dist/.
Dual-lifed modules maintained primarily on \s-1CPAN\s0 now live in cpan/
.PP
In previous releases of Perl, it was customary to enumerate all module
changes in this section of the \f(CW\*(C`perldelta\*(C'\fR file.   From 5.11.0 forward
only notable updates (such as new or deprecated modules ) will be
listed in this section. For a complete reference to the versions of
modules shipped in a given release of perl, please see Module::CoreList.
.SS "New Modules and Pragmata"
.IX Subsection "New Modules and Pragmata"
.ie n .IP """autodie""" 4
.el .IP "\f(CWautodie\fR" 4
.IX Item "autodie"
This is a new lexically-scoped alternative for the \f(CW\*(C`Fatal\*(C'\fR module.
The bundled version is 2.06_01. Note that in this release, using a string
eval when \f(CW\*(C`autodie\*(C'\fR is in effect can cause the autodie behaviour to leak
into the surrounding scope. See \*(L"\s-1BUGS\s0\*(R" in autodie for more details.
.ie n .IP """Compress::Raw::Bzip2""" 4
.el .IP "\f(CWCompress::Raw::Bzip2\fR" 4
.IX Item "Compress::Raw::Bzip2"
This has been added to the core (version 2.020).
.ie n .IP """parent""" 4
.el .IP "\f(CWparent\fR" 4
.IX Item "parent"
This pragma establishes an \s-1ISA\s0 relationship with base classes at compile
time. It provides the key feature of \f(CW\*(C`base\*(C'\fR without the feature creep.
.ie n .IP """Parse::CPAN::Meta""" 4
.el .IP "\f(CWParse::CPAN::Meta\fR" 4
.IX Item "Parse::CPAN::Meta"
This has been added to the core (version 1.39).
.SS "Pragmata Changes"
.IX Subsection "Pragmata Changes"
.ie n .IP """overloading""" 4
.el .IP "\f(CWoverloading\fR" 4
.IX Item "overloading"
See "The \f(CW\*(C`overloading\*(C'\fR pragma" above.
.ie n .IP """attrs""" 4
.el .IP "\f(CWattrs\fR" 4
.IX Item "attrs"
The \f(CW\*(C`attrs\*(C'\fR pragma has been removed. It had been marked as deprecated since
5.6.0.
.ie n .IP """charnames""" 4
.el .IP "\f(CWcharnames\fR" 4
.IX Item "charnames"
The Unicode \fINameAliases.txt\fR database file has been added. This has the
effect of adding some extra \f(CW\*(C`\eN\*(C'\fR character names that formerly wouldn't
have been recognised; for example, \f(CW"\eN{LATIN CAPITAL LETTER GHA}"\fR.
.ie n .IP """feature""" 4
.el .IP "\f(CWfeature\fR" 4
.IX Item "feature"
The meaning of the \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR feature bundles has
changed slightly. The last component, if any (i.e. \f(CW\*(C`X\*(C'\fR) is simply ignored.
This is predicated on the assumption that new features will not, in
general, be added to maintenance releases. So \f(CW\*(C`:5.10\*(C'\fR and \f(CW\*(C`:5.10.X\*(C'\fR
have identical effect. This is a change to the behaviour documented for
5.10.0.
.ie n .IP """mro""" 4
.el .IP "\f(CWmro\fR" 4
.IX Item "mro"
Upgraded from version 1.00 to 1.01. Performance for single inheritance is 40%
faster \- see \*(L"Performance Enhancements\*(R" below.
.Sp
\&\f(CW\*(C`mro\*(C'\fR is now implemented as an \s-1XS\s0 extension. The documented interface has not
changed. Code relying on the implementation detail that some \f(CW\*(C`mro::\*(C'\fR
methods happened to be available at all times gets to \*(L"keep both pieces\*(R".
.SS "Updated Modules"
.IX Subsection "Updated Modules"
.ie n .IP """ExtUtils::MakeMaker""" 4
.el .IP "\f(CWExtUtils::MakeMaker\fR" 4
.IX Item "ExtUtils::MakeMaker"
Upgraded from version 6.42 to 6.55_02.
.Sp
Note that \f(CW\*(C`ExtUtils::MakeMaker::bytes\*(C'\fR and \f(CW\*(C`ExtUtils::MakeMaker::vmsish\*(C'\fR
have been removed from this distribution.
.ie n .IP """Test::Harness""" 4
.el .IP "\f(CWTest::Harness\fR" 4
.IX Item "Test::Harness"
Upgraded from version 2.64 to 3.17.
.Sp
Note that one side-effect of the 2.x to 3.x upgrade is that the
experimental \f(CW\*(C`Test::Harness::Straps\*(C'\fR module (and its supporting
\&\f(CW\*(C`Assert\*(C'\fR, \f(CW\*(C`Iterator\*(C'\fR, \f(CW\*(C`Point\*(C'\fR and \f(CW\*(C`Results\*(C'\fR modules) have been
removed. If you still need this, then they are available in the
(unmaintained) \f(CW\*(C`Test\-Harness\-Straps\*(C'\fR distribution on \s-1CPAN\s0.
.ie n .IP """UNIVERSAL""" 4
.el .IP "\f(CWUNIVERSAL\fR" 4
.IX Item "UNIVERSAL"
Upgraded from version 1.04 to 1.05.
.Sp
\&\f(CW\*(C`UNIVERSAL\->import()\*(C'\fR is now deprecated.
.SH "Utility Changes"
.IX Header "Utility Changes"
.IP "\fIh2ph\fR" 4
.IX Item "h2ph"
Now looks in \f(CW\*(C`include\-fixed\*(C'\fR too, which is a recent addition to gcc's
search path.
.IP "\fIh2xs\fR" 4
.IX Item "h2xs"
No longer incorrectly treats enum values like macros (Daniel Burr).
.Sp
Now handles \*(C+ style constants (\f(CW\*(C`//\*(C'\fR) properly in enums. (A patch from
Rainer Weikusat was used; Daniel Burr also proposed a similar fix).
.IP "\fIperl5db.pl\fR" 4
.IX Item "perl5db.pl"
\&\f(CW\*(C`LVALUE\*(C'\fR subroutines now work under the debugger.
.Sp
The debugger now correctly handles proxy constant subroutines, and
subroutine stubs.
.IP "\fIperlbug\fR" 4
.IX Item "perlbug"
\&\fIperlbug\fR now uses \f(CW%Module::CoreList::bug_tracker\fR to print out upstream bug
tracker URLs.
.Sp
Where the user names a module that their bug report is about, and we know the
\&\s-1URL\s0 for its upstream bug tracker, provide a message to the user explaining
that the core copies the \s-1CPAN\s0 version directly, and provide the \s-1URL\s0 for
reporting the bug directly to upstream.
.IP "\fIperlthanks\fR" 4
.IX Item "perlthanks"
Perl 5.11.0 added a new utility \fIperlthanks\fR, which is a variant of
\&\fIperlbug\fR, but for sending non-bug-reports to the authors and maintainers
of Perl. Getting nothing but bug reports can become a bit demoralising:
we'll see if this changes things.
.SH "New Documentation"
.IX Header "New Documentation"
.IP "perlhaiku" 4
.IX Item "perlhaiku"
This contains instructions on how to build perl for the Haiku platform.
.IP "perlmroapi" 4
.IX Item "perlmroapi"
This describes the new interface for pluggable Method Resolution Orders.
.IP "perlperf" 4
.IX Item "perlperf"
This document, by Richard Foley, provides an introduction to the use of
performance and optimization techniques which can be used with particular
reference to perl programs.
.IP "perlrepository" 4
.IX Item "perlrepository"
This describes how to access the perl source using the \fIgit\fR version
control system.
.SH "Changes to Existing Documentation"
.IX Header "Changes to Existing Documentation"
The various large \fIChanges*\fR files (which listed every change made to perl
over the last 18 years) have been removed, and replaced by a small file,
also called \fIChanges\fR, which just explains how that same information may
be extracted from the git version control system.
.PP
The file \fIPorting/patching.pod\fR has been deleted, as it mainly described
interacting with the old Perforce-based repository, which is now obsolete.
Information still relevant has been moved to perlrepository.
.PP
perlapi, perlintern, perlmodlib and perltoc are now all
generated at build time, rather than being shipped as part of the release.
.IP "\(bu" 4
Documented \-X overloading.
.IP "\(bu" 4
Documented that \f(CW\*(C`when()\*(C'\fR treats specially most of the filetest operators
.IP "\(bu" 4
Documented when as a syntax modifier
.IP "\(bu" 4
Eliminated \*(L"Old Perl threads tutorial\*(R", which describes 5005 threads.
.Sp
\&\fIpod/perlthrtut.pod\fR is the same material reworked for ithreads.
.IP "\(bu" 4
Correct previous documentation: v\-strings are not deprecated
.Sp
With version objects, we need them to use \s-1MODULE\s0 \s-1VERSION\s0 syntax.  This
patch removes the deprecation note.
.IP "\(bu" 4
Added security contact information to perlsec
.SH "Performance Enhancements"
.IX Header "Performance Enhancements"
.IP "\(bu" 4
A new internal cache means that \f(CW\*(C`isa()\*(C'\fR will often be faster.
.IP "\(bu" 4
The implementation of \f(CW\*(C`C3\*(C'\fR Method Resolution Order has been optimised \-
linearisation for classes with single inheritance is 40% faster. Performance
for multiple inheritance is unchanged.
.IP "\(bu" 4
Under \f(CW\*(C`use locale\*(C'\fR, the locale-relevant information is now cached on
read-only values, such as the list returned by \f(CW\*(C`keys %hash\*(C'\fR. This makes
operations such as \f(CW\*(C`sort keys %hash\*(C'\fR in the scope of \f(CW\*(C`use locale\*(C'\fR much
faster.
.IP "\(bu" 4
Empty \f(CW\*(C`DESTROY\*(C'\fR methods are no longer called.
.IP "\(bu" 4
Faster \f(CW\*(C`Perl_sv_utf8_upgrade()\*(C'\fR
.IP "\(bu" 4
Speed up \f(CW\*(C`keys\*(C'\fR on empty hash
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\fIext/\fP reorganisation"
.IX Subsection "ext/ reorganisation"
The layout of directories in \fIext\fR has been revised. Specifically, all
extensions are now flat, and at the top level, with \f(CW\*(C`/\*(C'\fR in pathnames
replaced by \f(CW\*(C`\-\*(C'\fR, so that \fIext/Data/Dumper/\fR is now \fIext/Data\-Dumper/\fR,
etc.  The names of the extensions as specified to \fIConfigure\fR, and as
reported by \f(CW%Config::Config\fR under the keys \f(CW\*(C`dynamic_ext\*(C'\fR,
\&\f(CW\*(C`known_extensions\*(C'\fR, \f(CW\*(C`nonxs_ext\*(C'\fR and \f(CW\*(C`static_ext\*(C'\fR have not changed, and
still use \f(CW\*(C`/\*(C'\fR. Hence this change will not have any affect once perl is
installed. \f(CW\*(C`Safe\*(C'\fR has been split out from being part of \f(CW\*(C`Opcode\*(C'\fR, and
\&\f(CW\*(C`mro\*(C'\fR is now an extension in its own right.
.PP
Nearly all dual-life modules have been moved from \fIlib\fR to \fIext\fR, and will
now appear as known \f(CW\*(C`nonxs_ext\*(C'\fR. This will made no difference to the
structure of an installed perl, nor will the modules installed differ,
unless you run \fIConfigure\fR with options to specify an exact list of
extensions to build. In this case, you will rapidly become aware that you
need to add to your list, because various modules needed to complete the
build, such as \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR, have now become extensions, and
without them the build will fail well before it attempts to run the
regression tests.
.SS "Configuration improvements"
.IX Subsection "Configuration improvements"
If \f(CW\*(C`vendorlib\*(C'\fR and \f(CW\*(C`vendorarch\*(C'\fR are the same, then they are only added to
\&\f(CW@INC\fR once.
.PP
\&\f(CW$Config{usedevel}\fR and the C\-level \f(CW\*(C`PERL_USE_DEVEL\*(C'\fR are now defined if
perl is built with  \f(CW\*(C`\-Dusedevel\*(C'\fR.
.PP
\&\fIConfigure\fR will enable use of \f(CW\*(C`\-fstack\-protector\*(C'\fR, to provide protection
against stack-smashing attacks, if the compiler supports it.
.PP
\&\fIConfigure\fR will now determine the correct prototypes for re-entrant
functions, and for \f(CW\*(C`gconvert\*(C'\fR, if you are using a \*(C+ compiler rather
than a C compiler.
.PP
On Unix, if you build from a tree containing a git repository, the
configuration process will note the commit hash you have checked out, for
display in the output of \f(CW\*(C`perl \-v\*(C'\fR and \f(CW\*(C`perl \-V\*(C'\fR. Unpushed local commits
are automatically added to the list of local patches displayed by
\&\f(CW\*(C`perl \-V\*(C'\fR.
.SS "Compilation improvements"
.IX Subsection "Compilation improvements"
As part of the flattening of \fIext\fR, all extensions on all platforms are
built by \fImake_ext.pl\fR. This replaces the Unix-specific
\&\fIext/util/make_ext\fR, VMS-specific \fImake_ext.com\fR and Win32\-specific
\&\fIwin32/buildext.pl\fR.
.SS "Platform Specific Changes"
.IX Subsection "Platform Specific Changes"
.IP "\s-1AIX\s0" 4
.IX Item "AIX"
Removed \fIlibbsd\fR for \s-1AIX\s0 5L and 6.1. Only \f(CW\*(C`flock()\*(C'\fR was used from \fIlibbsd\fR.
.Sp
Removed \fIlibgdbm\fR for \s-1AIX\s0 5L and 6.1. The \fIlibgdbm\fR is delivered as an
optional package with the \s-1AIX\s0 Toolbox. Unfortunately the 64 bit version
is broken.
.Sp
Hints changes mean that \s-1AIX\s0 4.2 should work again.
.IP "Cygwin" 4
.IX Item "Cygwin"
On Cygwin we now strip the last number from the \s-1DLL\s0. This has been the
behaviour in the cygwin.com build for years. The hints files have been
updated.
.IP "DomainOS" 4
.IX Item "DomainOS"
Support for Apollo DomainOS was removed in Perl 5.11.0
.IP "FreeBSD" 4
.IX Item "FreeBSD"
The hints files now identify the correct threading libraries on FreeBSD 7
and later.
.IP "Irix" 4
.IX Item "Irix"
We now work around a bizarre preprocessor bug in the Irix 6.5 compiler:
\&\f(CW\*(C`cc \-E \-\*(C'\fR unfortunately goes into K&R mode, but \f(CW\*(C`cc \-E file.c\*(C'\fR doesn't.
.IP "Haiku" 4
.IX Item "Haiku"
Patches from the Haiku maintainers have been merged in. Perl should now
build on Haiku.
.IP "MachTen" 4
.IX Item "MachTen"
Support for Tenon Intersystems MachTen Unix layer for MacOS Classic was
removed in Perl 5.11.0
.IP "MiNT" 4
.IX Item "MiNT"
Support for Atari MiNT was removed in Perl 5.11.0.
.IP "MirOS \s-1BSD\s0" 4
.IX Item "MirOS BSD"
Perl should now build on MirOS \s-1BSD\s0.
.IP "NetBSD" 4
.IX Item "NetBSD"
Hints now supports versions 5.*.
.IP "Stratus \s-1VOS\s0" 4
.IX Item "Stratus VOS"
Various changes from Stratus have been merged in.
.IP "Symbian" 4
.IX Item "Symbian"
There is now support for Symbian S60 3.2 \s-1SDK\s0 and S60 5.0 \s-1SDK\s0.
.IP "Win32" 4
.IX Item "Win32"
Improved message window handling means that \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`kill\*(C'\fR messages
will no longer be dropped under race conditions.
.IP "\s-1VMS\s0" 4
.IX Item "VMS"
Reads from the in-memory temporary files of \f(CW\*(C`PerlIO::scalar\*(C'\fR used to fail
if \f(CW$/\fR was set to a numeric reference (to indicate record-style reads).
This is now fixed.
.Sp
\&\s-1VMS\s0 now supports \f(CW\*(C`getgrgid\*(C'\fR.
.Sp
Many improvements and cleanups have been made to the \s-1VMS\s0 file name handling
and conversion code.
.Sp
Enabling the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name now encodes a \s-1POSIX\s0 exit
status in a \s-1VMS\s0 condition value for better interaction with \s-1GNV\s0's bash
shell and other utilities that depend on \s-1POSIX\s0 exit values.  See
\&\*(L"$?\*(R" in perlvms for details.
.Sp
\&\f(CW\*(C`File::Copy\*(C'\fR now detects Unix compatibility mode on \s-1VMS\s0.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
.IP "\(bu" 4
\&\f(CW\*(C`\-I\*(C'\fR on shebang line now adds directories in front of \f(CW@INC\fR
as documented, and as does \f(CW\*(C`\-I\*(C'\fR when specified on the command-line.
.IP "\(bu" 4
\&\f(CW\*(C`kill\*(C'\fR is now fatal when called on non-numeric process identifiers.
Previously, an 'undef' process identifier would be interpreted as a request to
kill process \*(L"0\*(R", which would terminate the current process group on \s-1POSIX\s0
systems.  Since process identifiers are always integers, killing a non-numeric
process is now fatal.
.IP "\(bu" 4
5.10.0 inadvertently disabled an optimisation, which caused a measurable
performance drop in list assignment, such as is often used to assign
function parameters from \f(CW@_\fR. The optimisation has been re-instated, and
the performance regression fixed.
.IP "\(bu" 4
Fixed memory leak on \f(CW\*(C`while (1) { map 1, 1 }\*(C'\fR [\s-1RT\s0 #53038].
.IP "\(bu" 4
Some potential coredumps in PerlIO fixed [\s-1RT\s0 #57322,54828].
.IP "\(bu" 4
The debugger now works with lvalue subroutines.
.IP "\(bu" 4
The debugger's \f(CW\*(C`m\*(C'\fR command was broken on modules that defined constants
[\s-1RT\s0 #61222].
.IP "\(bu" 4
\&\f(CW\*(C`crypt\*(C'\fR and string complement could return tainted values for untainted
arguments [\s-1RT\s0 #59998].
.IP "\(bu" 4
The \f(CW\*(C`\-i\*(C'\fR\fI.suffix\fR command-line switch now recreates the file using
restricted permissions, before changing its mode to match the original
file. This eliminates a potential race condition [\s-1RT\s0 #60904].
.IP "\(bu" 4
On some Unix systems, the value in \f(CW$?\fR would not have the top bit set
(\f(CW\*(C`$? & 128\*(C'\fR) even if the child core dumped.
.IP "\(bu" 4
Under some circumstances, \f(CW$^R\fR could incorrectly become undefined
[\s-1RT\s0 #57042].
.IP "\(bu" 4
In the \s-1XS\s0 \s-1API\s0, various hash functions, when passed a pre-computed hash where
the key is \s-1UTF\-8\s0, might result in an incorrect lookup.
.IP "\(bu" 4
\&\s-1XS\s0 code including \fI\s-1XSUB\s0.h\fR before \fIperl.h\fR gave a compile-time error
[\s-1RT\s0 #57176].
.IP "\(bu" 4
\&\f(CW\*(C`$object\->isa(\*(AqFoo\*(Aq)\*(C'\fR would report false if the package \f(CW\*(C`Foo\*(C'\fR didn't
exist, even if the object's \f(CW@ISA\fR contained \f(CW\*(C`Foo\*(C'\fR.
.IP "\(bu" 4
Various bugs in the new-to 5.10.0 mro code, triggered by manipulating
\&\f(CW@ISA\fR, have been found and fixed.
.IP "\(bu" 4
Bitwise operations on references could crash the interpreter, e.g.
\&\f(CW\*(C`$x=\e$y; $x |= "foo"\*(C'\fR [\s-1RT\s0 #54956].
.IP "\(bu" 4
Patterns including alternation might be sensitive to the internal \s-1UTF\-8\s0
representation, e.g.
.Sp
.Vb 3
\&    my $byte = chr(192);
\&    my $utf8 = chr(192); utf8::upgrade($utf8);
\&    $utf8 =~ /$byte|X}/i;       # failed in 5.10.0
.Ve
.IP "\(bu" 4
Within UTF8\-encoded Perl source files (i.e. where \f(CW\*(C`use utf8\*(C'\fR is in
effect), double-quoted literal strings could be corrupted where a \f(CW\*(C`\exNN\*(C'\fR,
\&\f(CW\*(C`\e0NNN\*(C'\fR or \f(CW\*(C`\eN{}\*(C'\fR is followed by a literal character with ordinal value
greater than 255 [\s-1RT\s0 #59908].
.IP "\(bu" 4
\&\f(CW\*(C`B::Deparse\*(C'\fR failed to correctly deparse various constructs:
\&\f(CW\*(C`readpipe STRING\*(C'\fR [\s-1RT\s0 #62428], \f(CW\*(C`CORE::require(STRING)\*(C'\fR [\s-1RT\s0 #62488],
\&\f(CW\*(C`sub foo(_)\*(C'\fR [\s-1RT\s0 #62484].
.IP "\(bu" 4
Using \f(CW\*(C`setpgrp\*(C'\fR with no arguments could corrupt the perl stack.
.IP "\(bu" 4
The block form of \f(CW\*(C`eval\*(C'\fR is now specifically trappable by \f(CW\*(C`Safe\*(C'\fR and
\&\f(CW\*(C`ops\*(C'\fR.  Previously it was erroneously treated like string \f(CW\*(C`eval\*(C'\fR.
.IP "\(bu" 4
In 5.10.0, the two characters \f(CW\*(C`[~\*(C'\fR were sometimes parsed as the smart
match operator (\f(CW\*(C`~~\*(C'\fR) [\s-1RT\s0 #63854].
.IP "\(bu" 4
In 5.10.0, the \f(CW\*(C`*\*(C'\fR quantifier in patterns was sometimes treated as
\&\f(CW\*(C`{0,32767}\*(C'\fR [\s-1RT\s0 #60034, #60464]. For example, this match would fail:
.Sp
.Vb 1
\&    ("ab" x 32768) =~ /^(ab)*$/
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`shmget\*(C'\fR was limited to a 32 bit segment size on a 64 bit \s-1OS\s0 [\s-1RT\s0 #63924].
.IP "\(bu" 4
Using \f(CW\*(C`next\*(C'\fR or \f(CW\*(C`last\*(C'\fR to exit a \f(CW\*(C`given\*(C'\fR block no longer produces a
spurious warning like the following:
.Sp
.Vb 1
\&    Exiting given via last at foo.pl line 123
.Ve
.IP "\(bu" 4
On Windows, \f(CW\*(Aq.\efoo\*(Aq\fR and \f(CW\*(Aq..\efoo\*(Aq\fR  were treated differently than
\&\f(CW\*(Aq./foo\*(Aq\fR and \f(CW\*(Aq../foo\*(Aq\fR by \f(CW\*(C`do\*(C'\fR and \f(CW\*(C`require\*(C'\fR [\s-1RT\s0 #63492].
.IP "\(bu" 4
Assigning a format to a glob could corrupt the format; e.g.:
.Sp
.Vb 1
\&     *bar=*foo{FORMAT}; # foo format now bad
.Ve
.IP "\(bu" 4
Attempting to coerce a typeglob to a string or number could cause an
assertion failure. The correct error message is now generated,
\&\f(CW\*(C`Can\*(Aqt coerce GLOB to \f(CI$type\f(CW\*(C'\fR.
.IP "\(bu" 4
Under \f(CW\*(C`use filetest \*(Aqaccess\*(Aq\*(C'\fR, \f(CW\*(C`\-x\*(C'\fR was using the wrong access mode. This
has been fixed [\s-1RT\s0 #49003].
.IP "\(bu" 4
\&\f(CW\*(C`length\*(C'\fR on a tied scalar that returned a Unicode value would not be
correct the first time. This has been fixed.
.IP "\(bu" 4
Using an array \f(CW\*(C`tie\*(C'\fR inside in array \f(CW\*(C`tie\*(C'\fR could \s-1SEGV\s0. This has been
fixed. [\s-1RT\s0 #51636]
.IP "\(bu" 4
A race condition inside \f(CW\*(C`PerlIOStdio_close()\*(C'\fR has been identified and
fixed. This used to cause various threading issues, including SEGVs.
.IP "\(bu" 4
In \f(CW\*(C`unpack\*(C'\fR, the use of \f(CW\*(C`()\*(C'\fR groups in scalar context was internally
placing a list on the interpreter's stack, which manifested in various
ways, including SEGVs.  This is now fixed [\s-1RT\s0 #50256].
.IP "\(bu" 4
Magic was called twice in \f(CW\*(C`substr\*(C'\fR, \f(CW\*(C`\e&$x\*(C'\fR, \f(CW\*(C`tie $x, $m\*(C'\fR and \f(CW\*(C`chop\*(C'\fR.
These have all been fixed.
.IP "\(bu" 4
A 5.10.0 optimisation to clear the temporary stack within the implicit
loop of \f(CW\*(C`s///ge\*(C'\fR has been reverted, as it turned out to be the cause of
obscure bugs in seemingly unrelated parts of the interpreter [commit
ef0d4e17921ee3de].
.IP "\(bu" 4
The line numbers for warnings inside \f(CW\*(C`elsif\*(C'\fR are now correct.
.IP "\(bu" 4
The \f(CW\*(C`..\*(C'\fR operator now works correctly with ranges whose ends are at or
close to the values of the smallest and largest integers.
.IP "\(bu" 4
\&\f(CW\*(C`binmode STDIN, \*(Aq:raw\*(Aq\*(C'\fR could lead to segmentation faults on some platforms.
This has been fixed [\s-1RT\s0 #54828].
.IP "\(bu" 4
An off-by-one error meant that \f(CW\*(C`index $str, ...\*(C'\fR was effectively being
executed as \f(CW\*(C`index "$str\e0", ...\*(C'\fR. This has been fixed [\s-1RT\s0 #53746].
.IP "\(bu" 4
Various leaks associated with named captures in regexes have been fixed
[\s-1RT\s0 #57024].
.IP "\(bu" 4
A weak reference to a hash would leak. This was affecting \f(CW\*(C`DBI\*(C'\fR
[\s-1RT\s0 #56908].
.IP "\(bu" 4
Using (?|) in a regex could cause a segfault [\s-1RT\s0 #59734].
.IP "\(bu" 4
Use of a \s-1UTF\-8\s0 \f(CW\*(C`tr//\*(C'\fR within a closure could cause a segfault [\s-1RT\s0 #61520].
.IP "\(bu" 4
Calling \f(CW\*(C`Perl_sv_chop()\*(C'\fR or otherwise upgrading an \s-1SV\s0 could result in an
unaligned 64\-bit access on the \s-1SPARC\s0 architecture [\s-1RT\s0 #60574].
.IP "\(bu" 4
In the 5.10.0 release, \f(CW\*(C`inc_version_list\*(C'\fR would incorrectly list
\&\f(CW\*(C`5.10.*\*(C'\fR after \f(CW\*(C`5.8.*\*(C'\fR; this affected the \f(CW@INC\fR search order
[\s-1RT\s0 #67628].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`pack "a*", $tainted_value\*(C'\fR returned a non-tainted value
[\s-1RT\s0 #52552].
.IP "\(bu" 4
In 5.10.0, \f(CW\*(C`printf\*(C'\fR and \f(CW\*(C`sprintf\*(C'\fR could produce the fatal error
\&\f(CW\*(C`panic: utf8_mg_pos_cache_update\*(C'\fR when printing \s-1UTF\-8\s0 strings
[\s-1RT\s0 #62666].
.IP "\(bu" 4
In the 5.10.0 release, a dynamically created \f(CW\*(C`AUTOLOAD\*(C'\fR method might be
missed (method cache issue) [\s-1RT\s0 #60220,60232].
.IP "\(bu" 4
In the 5.10.0 release, a combination of \f(CW\*(C`use feature\*(C'\fR and \f(CW\*(C`//ee\*(C'\fR could
cause a memory leak [\s-1RT\s0 #63110].
.IP "\(bu" 4
\&\f(CW\*(C`\-C\*(C'\fR on the shebang (\f(CW\*(C`#!\*(C'\fR) line is once more permitted if it is also
specified on the command line. \f(CW\*(C`\-C\*(C'\fR on the shebang line used to be a
silent no-op \fIif\fR it was not also on the command line, so perl 5.10.0
disallowed it, which broke some scripts. Now perl checks whether it is
also on the command line and only dies if it is not [\s-1RT\s0 #67880].
.IP "\(bu" 4
In 5.10.0, certain types of re-entrant regular expression could crash,
or cause the following assertion failure [\s-1RT\s0 #60508]:
.Sp
.Vb 1
\&    Assertion rx\->sublen >= (s \- rx\->subbeg) + i failed
.Ve
.IP "\(bu" 4
Previously missing files from Unicode 5.1 Character Database are now included.
.IP "\(bu" 4
\&\f(CW\*(C`TMPDIR\*(C'\fR is now honored when opening an anonymous temporary file
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.ie n .IP """panic: sv_chop %s""" 4
.el .IP "\f(CWpanic: sv_chop %s\fR" 4
.IX Item "panic: sv_chop %s"
This new fatal error occurs when the C routine \f(CW\*(C`Perl_sv_chop()\*(C'\fR was
passed a position that is not within the scalar's string buffer. This
could be caused by buggy \s-1XS\s0 code, and at this point recovery is not
possible.
.ie n .IP """Can\*(Aqt locate package %s for the parents of %s""" 4
.el .IP "\f(CWCan\*(Aqt locate package %s for the parents of %s\fR" 4
.IX Item "Cant locate package %s for the parents of %s"
This warning has been removed. In general, it only got produced in
conjunction with other warnings, and removing it allowed an \s-1ISA\s0 lookup
optimisation to be added.
.ie n .IP """v\-string in use/require is non\-portable""" 4
.el .IP "\f(CWv\-string in use/require is non\-portable\fR" 4
.IX Item "v-string in use/require is non-portable"
This warning has been removed.
.ie n .IP """Deep recursion on subroutine ""%s""""" 4
.el .IP "\f(CWDeep recursion on subroutine ``%s''\fR" 4
.IX Item "Deep recursion on subroutine ""%s"""
It is now possible to change the depth threshold for this warning from the
default of 100, by recompiling the \fIperl\fR binary, setting the C
pre-processor macro \f(CW\*(C`PERL_SUB_DEPTH_WARN\*(C'\fR to the desired value.
.SH "Changed Internals"
.IX Header "Changed Internals"
.IP "\(bu" 4
\&\s-1TODO:\s0 \f(CW\*(C`SVt_RV\*(C'\fR is gone. RVs are now stored in IVs
.IP "\(bu" 4
\&\s-1TODO:\s0 REGEXPs are first class
.IP "\(bu" 4
\&\s-1TODO:\s0 \s-1OOK\s0 is reworked, such that an OOKed scalar is \s-1PV\s0 not \s-1PVIV\s0
.IP "\(bu" 4
The J.R.R. Tolkien quotes at the head of C source file have been checked and
proper citations added, thanks to a patch from Tom Christiansen.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_vcroak()\*(C'\fR now accepts a null first argument. In addition, a full audit
was made of the \*(L"not \s-1NULL\s0\*(R" compiler annotations, and those for several
other internal functions were corrected.
.IP "\(bu" 4
New macros \f(CW\*(C`dSAVEDERRNO\*(C'\fR, \f(CW\*(C`dSAVE_ERRNO\*(C'\fR, \f(CW\*(C`SAVE_ERRNO\*(C'\fR, \f(CW\*(C`RESTORE_ERRNO\*(C'\fR
have been added to formalise the temporary saving of the \f(CW\*(C`errno\*(C'\fR
variable.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_sv_insert_flags\*(C'\fR has been added to augment
\&\f(CW\*(C`Perl_sv_insert\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSV_type(type)\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSV()\*(C'\fR followed by \f(CW\*(C`Perl_sv_upgrade(type)\*(C'\fR.
.IP "\(bu" 4
The function \f(CW\*(C`Perl_newSVpvn_flags()\*(C'\fR has been added, equivalent to
\&\f(CW\*(C`Perl_newSVpvn()\*(C'\fR and then performing the action relevant to the flag.
.Sp
Two flag bits are currently supported.
.RS 4
.ie n .IP """SVf_UTF8""" 4
.el .IP "\f(CWSVf_UTF8\fR" 4
.IX Item "SVf_UTF8"
This will call \f(CW\*(C`SvUTF8_on()\*(C'\fR for you. (Note that this does not convert an
sequence of \s-1ISO\s0 8859\-1 characters to \s-1UTF\-8\s0). A wrapper, \f(CW\*(C`newSVpvn_utf8()\*(C'\fR
is available for this.
.ie n .IP """SVs_TEMP""" 4
.el .IP "\f(CWSVs_TEMP\fR" 4
.IX Item "SVs_TEMP"
Call \f(CW\*(C`Perl_sv_2mortal()\*(C'\fR on the new \s-1SV\s0.
.RE
.RS 4
.Sp
There is also a wrapper that takes constant strings, \f(CW\*(C`newSVpvs_flags()\*(C'\fR.
.RE
.IP "\(bu" 4
The function \f(CW\*(C`Perl_croak_xs_usage\*(C'\fR has been added as a wrapper to
\&\f(CW\*(C`Perl_croak\*(C'\fR.
.IP "\(bu" 4
The functions \f(CW\*(C`PerlIO_find_layer\*(C'\fR and \f(CW\*(C`PerlIO_list_alloc\*(C'\fR are now
exported.
.IP "\(bu" 4
\&\f(CW\*(C`PL_na\*(C'\fR has been exterminated from the core code, replaced by local \s-1STRLEN\s0
temporaries, or \f(CW\*(C`*_nolen()\*(C'\fR calls. Either approach is faster than \f(CW\*(C`PL_na\*(C'\fR,
which is a pointer deference into the interpreter structure under ithreads,
and a global variable otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_free()\*(C'\fR used to leave freed memory accessible via \f(CW\*(C`SvMAGIC()\*(C'\fR on
the scalar. It now updates the linked list to remove each piece of magic
as it is freed.
.IP "\(bu" 4
Under ithreads, the regex in \f(CW\*(C`PL_reg_curpm\*(C'\fR is now reference counted. This
eliminates a lot of hackish workarounds to cope with it not being reference
counted.
.IP "\(bu" 4
\&\f(CW\*(C`Perl_mg_magical()\*(C'\fR would sometimes incorrectly turn on \f(CW\*(C`SvRMAGICAL()\*(C'\fR.
This has been fixed.
.IP "\(bu" 4
The \fIpublic\fR \s-1IV\s0 and \s-1NV\s0 flags are now not set if the string value has
trailing \*(L"garbage\*(R". This behaviour is consistent with not setting the
public \s-1IV\s0 or \s-1NV\s0 flags if the value is out of range for the type.
.IP "\(bu" 4
\&\s-1SV\s0 allocation tracing has been added to the diagnostics enabled by \f(CW\*(C`\-Dm\*(C'\fR.
The tracing can alternatively output via the \f(CW\*(C`PERL_MEM_LOG\*(C'\fR mechanism, if
that was enabled when the \fIperl\fR binary was compiled.
.IP "\(bu" 4
Smartmatch resolution tracing has been added as a new diagnostic. Use \f(CW\*(C`\-DM\*(C'\fR to
enable it.
.IP "\(bu" 4
A new debugging flag \f(CW\*(C`\-DB\*(C'\fR now dumps subroutine definitions, leaving
\&\f(CW\*(C`\-Dx\*(C'\fR for its original purpose of dumping syntax trees.
.IP "\(bu" 4
Uses of \f(CW\*(C`Nullav\*(C'\fR, \f(CW\*(C`Nullcv\*(C'\fR, \f(CW\*(C`Nullhv\*(C'\fR, \f(CW\*(C`Nullop\*(C'\fR, \f(CW\*(C`Nullsv\*(C'\fR etc have been
replaced by \f(CW\*(C`NULL\*(C'\fR in the core code, and non-dual-life modules, as \f(CW\*(C`NULL\*(C'\fR
is clearer to those unfamiliar with the core code.
.IP "\(bu" 4
A macro \f(CWMUTABLE_PTR(p)\fR has been added, which on (non-pedantic) gcc will
not cast away \f(CW\*(C`const\*(C'\fR, returning a \f(CW\*(C`void *\*(C'\fR. Macros \f(CW\*(C`MUTABLE_SV(av)\*(C'\fR,
\&\f(CW\*(C`MUTABLE_SV(cv)\*(C'\fR etc build on this, casting to \f(CW\*(C`AV *\*(C'\fR etc without
casting away \f(CW\*(C`const\*(C'\fR. This allows proper compile-time auditing of
\&\f(CW\*(C`const\*(C'\fR correctness in the core, and helped picked up some errors (now
fixed).
.IP "\(bu" 4
Macros \f(CW\*(C`mPUSHs()\*(C'\fR and \f(CW\*(C`mXPUSHs()\*(C'\fR have been added, for pushing SVs on the
stack and mortalizing them.
.IP "\(bu" 4
Use of the private structure \f(CW\*(C`mro_meta\*(C'\fR has changed slightly. Nothing
outside the core should be accessing this directly anyway.
.IP "\(bu" 4
A new tool, \fIPorting/expand\-macro.pl\fR has been added, that allows you
to view how a C preprocessor macro would be expanded when compiled.
This is handy when trying to decode the macro hell that is the perl
guts.
.SH "New Tests"
.IX Header "New Tests"
Many modules updated from \s-1CPAN\s0 incorporate new tests.
.PP
Several tests that have the potential to hang forever if they fail now
incorporate a \*(L"watchdog\*(R" functionality that will kill them after a timeout,
which helps ensure that \f(CW\*(C`make test\*(C'\fR and \f(CW\*(C`make test_harness\*(C'\fR run to
completion automatically. (Jerry Hedden).
.PP
Some core-specific tests have been added:
.IP "t/comp/retainedlines.t" 4
.IX Item "t/comp/retainedlines.t"
Check that the debugger can retain source lines from \f(CW\*(C`eval\*(C'\fR.
.IP "t/io/perlio_fail.t" 4
.IX Item "t/io/perlio_fail.t"
Check that bad layers fail.
.IP "t/io/perlio_leaks.t" 4
.IX Item "t/io/perlio_leaks.t"
Check that PerlIO layers are not leaking.
.IP "t/io/perlio_open.t" 4
.IX Item "t/io/perlio_open.t"
Check that certain special forms of open work.
.IP "t/io/perlio.t" 4
.IX Item "t/io/perlio.t"
General PerlIO tests.
.IP "t/io/pvbm.t" 4
.IX Item "t/io/pvbm.t"
Check that there is no unexpected interaction between the internal types
\&\f(CW\*(C`PVBM\*(C'\fR and \f(CW\*(C`PVGV\*(C'\fR.
.IP "t/mro/package_aliases.t" 4
.IX Item "t/mro/package_aliases.t"
Check that mro works properly in the presence of aliased packages.
.IP "t/op/dbm.t" 4
.IX Item "t/op/dbm.t"
Tests for \f(CW\*(C`dbmopen\*(C'\fR and \f(CW\*(C`dbmclose\*(C'\fR.
.IP "t/op/index_thr.t" 4
.IX Item "t/op/index_thr.t"
Tests for the interaction of \f(CW\*(C`index\*(C'\fR and threads.
.IP "t/op/pat_thr.t" 4
.IX Item "t/op/pat_thr.t"
Tests for the interaction of esoteric patterns and threads.
.IP "t/op/qr_gc.t" 4
.IX Item "t/op/qr_gc.t"
Test that \f(CW\*(C`qr\*(C'\fR doesn't leak.
.IP "t/op/reg_email_thr.t" 4
.IX Item "t/op/reg_email_thr.t"
Tests for the interaction of regex recursion and threads.
.IP "t/op/regexp_qr_embed_thr.t" 4
.IX Item "t/op/regexp_qr_embed_thr.t"
Tests for the interaction of patterns with embedded \f(CW\*(C`qr//\*(C'\fR and threads.
.IP "t/op/regexp_unicode_prop.t" 4
.IX Item "t/op/regexp_unicode_prop.t"
Tests for Unicode properties in regular expressions.
.IP "t/op/regexp_unicode_prop_thr.t" 4
.IX Item "t/op/regexp_unicode_prop_thr.t"
Tests for the interaction of Unicode properties and threads.
.IP "t/op/reg_nc_tie.t" 4
.IX Item "t/op/reg_nc_tie.t"
Test the tied methods of \f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.IP "t/op/reg_posixcc.t" 4
.IX Item "t/op/reg_posixcc.t"
Check that \s-1POSIX\s0 character classes behave consistently.
.IP "t/op/re.t" 4
.IX Item "t/op/re.t"
Check that exportable \f(CW\*(C`re\*(C'\fR functions in \fIuniversal.c\fR work.
.IP "t/op/setpgrpstack.t" 4
.IX Item "t/op/setpgrpstack.t"
Check that \f(CW\*(C`setpgrp\*(C'\fR works.
.IP "t/op/substr_thr.t" 4
.IX Item "t/op/substr_thr.t"
Tests for the interaction of \f(CW\*(C`substr\*(C'\fR and threads.
.IP "t/op/upgrade.t" 4
.IX Item "t/op/upgrade.t"
Check that upgrading and assigning scalars works.
.IP "t/uni/lex_utf8.t" 4
.IX Item "t/uni/lex_utf8.t"
Check that Unicode in the lexer works.
.IP "t/uni/tie.t" 4
.IX Item "t/uni/tie.t"
Check that Unicode and \f(CW\*(C`tie\*(C'\fR work.
.SH "Known Problems"
.IX Header "Known Problems"
This is a list of some significant unfixed bugs, which are regressions
from either 5.10.0 or 5.8.x.
.IP "\(bu" 4
\&\f(CW\*(C`List::Util::first\*(C'\fR misbehaves in the presence of a lexical \f(CW$_\fR
(typically introduced by \f(CW\*(C`my $_\*(C'\fR or implicitly by \f(CW\*(C`given\*(C'\fR). The variable
which gets set for each iteration is the package variable \f(CW$_\fR, not the
lexical \f(CW$_\fR [\s-1RT\s0 #67694].
.Sp
A similar issue may occur in other modules that provide functions which
take a block as their first argument, like
.Sp
.Vb 1
\&    foo { ... $_ ...} list
.Ve
.IP "\(bu" 4
The \f(CW\*(C`charnames\*(C'\fR pragma may generate a run-time error when a regex is
interpolated [\s-1RT\s0 #56444]:
.Sp
.Vb 4
\&    use charnames \*(Aq:full\*(Aq;
\&    my $r1 = qr/\eN{THAI CHARACTER SARA I}/;
\&    "foo" =~ $r1;    # okay
\&    "foo" =~ /$r1+/; # runtime error
.Ve
.Sp
A workaround is to generate the character outside of the regex:
.Sp
.Vb 2
\&    my $a = "\eN{THAI CHARACTER SARA I}";
\&    my $r1 = qr/$a/;
.Ve
.IP "\(bu" 4
Some regexes may run much more slowly when run in a child thread compared
with the thread the pattern was compiled into [\s-1RT\s0 #55600].
.SH "Deprecations"
.IX Header "Deprecations"
The following items are now deprecated.
.IP "\(bu" 4
\&\f(CW\*(C`Switch\*(C'\fR is buggy and should be avoided. From perl 5.11.0 onwards, it is
intended that any use of the core version of this module will emit a
warning, and that the module will eventually be removed from the core
(probably in perl 5.14.0). See \*(L"Switch statements\*(R" in perlsyn for its
replacement.
.IP "\(bu" 4
The following modules will be removed from the core distribution in a future
release, and should be installed from \s-1CPAN\s0 instead. Distributions on \s-1CPAN\s0
which require these should add them to their prerequisites. The core versions
of these modules warnings will issue a deprecation warning.
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`Class::ISA\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Pod::Plainer\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`Shell\*(C'\fR
.RE
.RS 4
.Sp
Currently support to install from \s-1CPAN\s0 without a \fIforce\fR is \f(CW\*(C`TODO\*(C'\fR in \s-1CPAN\s0
and \s-1CPANPLUS\s0. This will be addressed before 5.12.0 ships.
.RE
.IP "\(bu" 4
\&\f(CW\*(C`suidperl\*(C'\fR has been removed. It used to provide a mechanism to
emulate setuid permission bits on systems that don't support it properly.
.IP "\(bu" 4
Deprecate assignment to $[
.IP "\(bu" 4
Remove attrs, which has been deprecated since 1999/10/02.
.IP "\(bu" 4
Deprecate use of the attribute :locked on subroutines.
.IP "\(bu" 4
Deprecate using \*(L"locked\*(R" with the attributes pragma.
.IP "\(bu" 4
Deprecate using \*(L"unique\*(R" with the attributes pragma.
.IP "\(bu" 4
warn if ++ or \*(-- are unable to change the value because it's beyond the limit of representation
.Sp
This uses a new warnings category: \*(L"imprecision\*(R".
.IP "\(bu" 4
Make lc/uc/lcfirst/ucfirst warn when passed undef.
.IP "\(bu" 4
Show constant in \*(L"Useless use of a constant in void context\*(R"
.IP "\(bu" 4
Make the new warning report undef constants as undef
.IP "\(bu" 4
Add a new warning, \*(L"Prototype after '%s'\*(R"
.IP "\(bu" 4
Tweak the \*(L"Illegal character in prototype\*(R" warning so it's more precise when reporting illegal characters after _
.IP "\(bu" 4
Unintended interpolation of $\e in regex
.IP "\(bu" 4
Make overflow warnings in gmtime/localtime only occur when warnings are on
.IP "\(bu" 4
Improve mro merging error messages.
.Sp
They are now very similar to those produced by Algorithm::C3.
.IP "\(bu" 4
Amelioration of the error message \*(L"Unrecognized character \f(CW%s\fR in column \f(CW%d\fR\*(R"
.Sp
Changes the error message to \*(L"Unrecognized character \f(CW%s\fR; marked by <\-\-
\&\s-1HERE\s0 after \f(CW%s\fR<\-\- \s-1HERE\s0 near column \f(CW%d\fR\*(R". This should make it a little
simpler to spot and correct the suspicious character.
.IP "\(bu" 4
Explicitely point to $. when it causes an uninitialized warning for ranges in scalar context
.IP "\(bu" 4
Deprecated numerous Perl 4\-era libraries:
.Sp
\&\fItermcap.pl\fR, \fItainted.pl\fR, \fIstat.pl\fR, \fIshellwords.pl\fR, \fIpwd.pl\fR,
\&\fIopen3.pl\fR, \fIopen2.pl\fR, \fInewgetopt.pl\fR, \fIlook.pl\fR, \fIfind.pl\fR,
\&\fIfinddepth.pl\fR, \fIimportenv.pl\fR, \fIhostname.pl\fR, \fIgetopts.pl\fR,
\&\fIgetopt.pl\fR, \fIgetcwd.pl\fR, \fIflush.pl\fR, \fIfastcwd.pl\fR, \fIexceptions.pl\fR,
\&\fIctime.pl\fR, \fIcomplete.pl\fR, \fIcacheout.pl\fR, \fIbigrat.pl\fR, \fIbigint.pl\fR,
\&\fIbigfloat.pl\fR, \fIassert.pl\fR, \fIabbrev.pl\fR, \fIdotsh.pl\fR, and
\&\fItimelocal.pl\fR are all now deprecated. Using them will incur a warning.
.SH "Acknowledgements"
.IX Header "Acknowledgements"
Some of the work in this release was funded by a \s-1TPF\s0 grant funded by
Dijkmat \s-1BV\s0, The Netherlands.
.PP
Steffen Mueller and David Golden in particular helped getting \s-1CPAN\s0 modules
polished and synchronised with their in-core equivalents.
.PP
Craig Berry was tireless in getting maint to run under \s-1VMS\s0, no matter how
many times we broke it for him.
.PP
The other core committers contributed most of the changes, and applied most
of the patches sent in by the hundreds of contributors listed in \fI\s-1AUTHORS\s0\fR.
.PP
Much of the work of categorizing changes in this perldelta file was contributed
by the following porters using changelogger.bestpractical.com:
.PP
Nicholas Clark, leon, shawn, alexm, rjbs, rafl, Pedro Melo, brunorc,
anonymous, X, Tom Hukins, anonymous, Jesse, dagolden, Moritz Onken,
Mark Fowler, chorny, anonymous, tmtm
.PP
Finally, thanks to Larry Wall, without whom none of this would be
necessary.
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/perlbug/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.PP
If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send
it to perl5\-security\-report@perl.org. This points to a closed subscription
unarchived mailing list, which includes all the core committers, who be able
to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported. Please only use this address for
security issues in the Perl core, not for modules independently
distributed on \s-1CPAN\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for an explanation of how to view exhaustive details
on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
