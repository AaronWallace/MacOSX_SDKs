.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERL595DELTA 1"
.TH PERL595DELTA 1 "2012-11-03" "perl v5.12.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perl595delta \- what is new for perl v5.9.5
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes differences between the 5.9.4 and the 5.9.5
development releases. See perl590delta, perl591delta,
perl592delta, perl593delta and perl594delta for the differences
between 5.8.0 and 5.9.4.
.SH "Incompatible Changes"
.IX Header "Incompatible Changes"
.SS "Tainting and printf"
.IX Subsection "Tainting and printf"
When perl is run under taint mode, \f(CW\*(C`printf()\*(C'\fR and \f(CW\*(C`sprintf()\*(C'\fR will now
reject any tainted format argument. (Rafael Garcia-Suarez)
.SS "undef and signal handlers"
.IX Subsection "undef and signal handlers"
Undefining or deleting a signal handler via \f(CW\*(C`undef $SIG{FOO}\*(C'\fR is now
equivalent to setting it to \f(CW\*(AqDEFAULT\*(Aq\fR. (Rafael)
.SS "strictures and array/hash dereferencing in \fIdefined()\fP"
.IX Subsection "strictures and array/hash dereferencing in defined()"
\&\f(CW\*(C`defined @$foo\*(C'\fR and \f(CW\*(C`defined %$bar\*(C'\fR are now subject to \f(CW\*(C`strict \*(Aqrefs\*(Aq\*(C'\fR
(that is, \f(CW$foo\fR and \f(CW$bar\fR shall be proper references there.)
(Nicholas Clark)
.PP
(However, \f(CW\*(C`defined(@foo)\*(C'\fR and \f(CW\*(C`defined(%bar)\*(C'\fR are discouraged constructs
anyway.)
.ie n .SS """(?p{})"" has been removed"
.el .SS "\f(CW(?p{})\fP has been removed"
.IX Subsection "(?p{}) has been removed"
The regular expression construct \f(CW\*(C`(?p{})\*(C'\fR, which was deprecated in perl
5.8, has been removed. Use \f(CW\*(C`(??{})\*(C'\fR instead. (Rafael)
.SS "Pseudo-hashes have been removed"
.IX Subsection "Pseudo-hashes have been removed"
Support for pseudo-hashes has been removed from Perl 5.9. (The \f(CW\*(C`fields\*(C'\fR
pragma remains here, but uses an alternate implementation.)
.SS "Removal of the bytecode compiler and of perlcc"
.IX Subsection "Removal of the bytecode compiler and of perlcc"
\&\f(CW\*(C`perlcc\*(C'\fR, the byteloader and the supporting modules (B::C, B::CC,
B::Bytecode, etc.) are no longer distributed with the perl sources. Those
experimental tools have never worked reliably, and, due to the lack of
volunteers to keep them in line with the perl interpreter developments, it
was decided to remove them instead of shipping a broken version of those.
The last version of those modules can be found with perl 5.9.4.
.PP
However the B compiler framework stays supported in the perl core, as with
the more useful modules it has permitted (among others, B::Deparse and
B::Concise).
.SS "Removal of the \s-1JPL\s0"
.IX Subsection "Removal of the JPL"
The \s-1JPL\s0 (Java-Perl Linguo) has been removed from the perl sources tarball.
.SS "Recursive inheritance detected earlier"
.IX Subsection "Recursive inheritance detected earlier"
Perl will now immediately throw an exception if you modify any package's
\&\f(CW@ISA\fR in such a way that it would cause recursive inheritance.
.PP
Previously, the exception would not occur until Perl attempted to make
use of the recursive inheritance while resolving a method or doing a
\&\f(CW\*(C`$foo\->isa($bar)\*(C'\fR lookup.
.SH "Core Enhancements"
.IX Header "Core Enhancements"
.SS "Regular expressions"
.IX Subsection "Regular expressions"
.IP "Recursive Patterns" 4
.IX Item "Recursive Patterns"
It is now possible to write recursive patterns without using the \f(CW\*(C`(??{})\*(C'\fR
construct. This new way is more efficient, and in many cases easier to
read.
.Sp
Each capturing parenthesis can now be treated as an independent pattern
that can be entered by using the \f(CW\*(C`(?PARNO)\*(C'\fR syntax (\f(CW\*(C`PARNO\*(C'\fR standing for
\&\*(L"parenthesis number\*(R"). For example, the following pattern will match
nested balanced angle brackets:
.Sp
.Vb 10
\&    /
\&     ^                      # start of line
\&     (                      # start capture buffer 1
\&        <                   #   match an opening angle bracket
\&        (?:                 #   match one of:
\&            (?>             #     don\*(Aqt backtrack over the inside of this group
\&                [^<>]+      #       one or more non angle brackets
\&            )               #     end non backtracking group
\&        |                   #     ... or ...
\&            (?1)            #     recurse to bracket 1 and try it again
\&        )*                  #   0 or more times.
\&        >                   #   match a closing angle bracket
\&     )                      # end capture buffer one
\&     $                      # end of line
\&    /x
.Ve
.Sp
Note, users experienced with \s-1PCRE\s0 will find that the Perl implementation
of this feature differs from the \s-1PCRE\s0 one in that it is possible to
backtrack into a recursed pattern, whereas in \s-1PCRE\s0 the recursion is
atomic or \*(L"possessive\*(R" in nature. (Yves Orton)
.IP "Named Capture Buffers" 4
.IX Item "Named Capture Buffers"
It is now possible to name capturing parenthesis in a pattern and refer to
the captured contents by name. The naming syntax is \f(CW\*(C`(?<NAME>....)\*(C'\fR.
It's possible to backreference to a named buffer with the \f(CW\*(C`\ek<NAME>\*(C'\fR
syntax. In code, the new magical hashes \f(CW\*(C`%+\*(C'\fR and \f(CW\*(C`%\-\*(C'\fR can be used to
access the contents of the capture buffers.
.Sp
Thus, to replace all doubled chars, one could write
.Sp
.Vb 1
\&    s/(?<letter>.)\ek<letter>/$+{letter}/g
.Ve
.Sp
Only buffers with defined contents will be \*(L"visible\*(R" in the \f(CW\*(C`%+\*(C'\fR hash, so
it's possible to do something like
.Sp
.Vb 3
\&    foreach my $name (keys %+) {
\&        print "content of buffer \*(Aq$name\*(Aq is $+{$name}\en";
\&    }
.Ve
.Sp
The \f(CW\*(C`%\-\*(C'\fR hash is a bit more complete, since it will contain array refs
holding values from all capture buffers similarly named, if there should
be many of them.
.Sp
\&\f(CW\*(C`%+\*(C'\fR and \f(CW\*(C`%\-\*(C'\fR are implemented as tied hashes through the new module
\&\f(CW\*(C`Tie::Hash::NamedCapture\*(C'\fR.
.Sp
Users exposed to the .NET regex engine will find that the perl
implementation differs in that the numerical ordering of the buffers
is sequential, and not \*(L"unnamed first, then named\*(R". Thus in the pattern
.Sp
.Vb 1
\&   /(A)(?<B>B)(C)(?<D>D)/
.Ve
.Sp
\&\f(CW$1\fR will be 'A', \f(CW$2\fR will be 'B', \f(CW$3\fR will be 'C' and \f(CW$4\fR will be 'D' and not
\&\f(CW$1\fR is 'A', \f(CW$2\fR is 'C' and \f(CW$3\fR is 'B' and \f(CW$4\fR is 'D' that a .NET programmer
would expect. This is considered a feature. :\-) (Yves Orton)
.IP "Possessive Quantifiers" 4
.IX Item "Possessive Quantifiers"
Perl now supports the \*(L"possessive quantifier\*(R" syntax of the \*(L"atomic match\*(R"
pattern. Basically a possessive quantifier matches as much as it can and never
gives any back. Thus it can be used to control backtracking. The syntax is
similar to non-greedy matching, except instead of using a '?' as the modifier
the '+' is used. Thus \f(CW\*(C`?+\*(C'\fR, \f(CW\*(C`*+\*(C'\fR, \f(CW\*(C`++\*(C'\fR, \f(CW\*(C`{min,max}+\*(C'\fR are now legal
quantifiers. (Yves Orton)
.IP "Backtracking control verbs" 4
.IX Item "Backtracking control verbs"
The regex engine now supports a number of special-purpose backtrack
control verbs: (*THEN), (*PRUNE), (*MARK), (*SKIP), (*COMMIT), (*FAIL)
and (*ACCEPT). See perlre for their descriptions. (Yves Orton)
.IP "Relative backreferences" 4
.IX Item "Relative backreferences"
A new syntax \f(CW\*(C`\eg{N}\*(C'\fR or \f(CW\*(C`\egN\*(C'\fR where \*(L"N\*(R" is a decimal integer allows a
safer form of back-reference notation as well as allowing relative
backreferences. This should make it easier to generate and embed patterns
that contain backreferences. See \*(L"Capture buffers\*(R" in perlre. (Yves Orton)
.ie n .IP """\eK"" escape" 4
.el .IP "\f(CW\eK\fR escape" 4
.IX Item "K escape"
The functionality of Jeff Pinyan's module Regexp::Keep has been added to
the core. You can now use in regular expressions the special escape \f(CW\*(C`\eK\*(C'\fR
as a way to do something like floating length positive lookbehind. It is
also useful in substitutions like:
.Sp
.Vb 1
\&  s/(foo)bar/$1/g
.Ve
.Sp
that can now be converted to
.Sp
.Vb 1
\&  s/foo\eKbar//g
.Ve
.Sp
which is much more efficient. (Yves Orton)
.IP "Vertical and horizontal whitespace, and linebreak" 4
.IX Item "Vertical and horizontal whitespace, and linebreak"
Regular expressions now recognize the \f(CW\*(C`\ev\*(C'\fR and \f(CW\*(C`\eh\*(C'\fR escapes, that match
vertical and horizontal whitespace, respectively. \f(CW\*(C`\eV\*(C'\fR and \f(CW\*(C`\eH\*(C'\fR
logically match their complements.
.Sp
\&\f(CW\*(C`\eR\*(C'\fR matches a generic linebreak, that is, vertical whitespace, plus
the multi-character sequence \f(CW"\ex0D\ex0A"\fR.
.ie n .SS "The ""_"" prototype"
.el .SS "The \f(CW_\fP prototype"
.IX Subsection "The _ prototype"
A new prototype character has been added. \f(CW\*(C`_\*(C'\fR is equivalent to \f(CW\*(C`$\*(C'\fR (it
denotes a scalar), but defaults to \f(CW$_\fR if the corresponding argument
isn't supplied. Due to the optional nature of the argument, you can only
use it at the end of a prototype, or before a semicolon.
.PP
This has a small incompatible consequence: the \fIprototype()\fR function has
been adjusted to return \f(CW\*(C`_\*(C'\fR for some built-ins in appropriate cases (for
example, \f(CW\*(C`prototype(\*(AqCORE::rmdir\*(Aq)\*(C'\fR). (Rafael)
.SS "\s-1UNITCHECK\s0 blocks"
.IX Subsection "UNITCHECK blocks"
\&\f(CW\*(C`UNITCHECK\*(C'\fR, a new special code block has been introduced, in addition to
\&\f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR and \f(CW\*(C`END\*(C'\fR.
.PP
\&\f(CW\*(C`CHECK\*(C'\fR and \f(CW\*(C`INIT\*(C'\fR blocks, while useful for some specialized purposes,
are always executed at the transition between the compilation and the
execution of the main program, and thus are useless whenever code is
loaded at runtime. On the other hand, \f(CW\*(C`UNITCHECK\*(C'\fR blocks are executed
just after the unit which defined them has been compiled. See perlmod
for more information. (Alex Gough)
.SS "\fIreadpipe()\fP is now overridable"
.IX Subsection "readpipe() is now overridable"
The built-in function \fIreadpipe()\fR is now overridable. Overriding it permits
also to override its operator counterpart, \f(CW\*(C`qx//\*(C'\fR (a.k.a. \f(CW\*(C`\`\`\*(C'\fR).
Moreover, it now defaults to \f(CW$_\fR if no argument is provided. (Rafael)
.SS "default argument for \fIreadline()\fP"
.IX Subsection "default argument for readline()"
\&\fIreadline()\fR now defaults to \f(CW*ARGV\fR if no argument is provided. (Rafael)
.SS "\s-1UCD\s0 5.0.0"
.IX Subsection "UCD 5.0.0"
The copy of the Unicode Character Database included in Perl 5.9 has
been updated to version 5.0.0.
.SS "Smart match"
.IX Subsection "Smart match"
The smart match operator (\f(CW\*(C`~~\*(C'\fR) is now available by default (you don't
need to enable it with \f(CW\*(C`use feature\*(C'\fR any longer). (Michael G Schwern)
.ie n .SS "Implicit loading of ""feature"""
.el .SS "Implicit loading of \f(CWfeature\fP"
.IX Subsection "Implicit loading of feature"
The \f(CW\*(C`feature\*(C'\fR pragma is now implicitly loaded when you require a minimal
perl version (with the \f(CW\*(C`use VERSION\*(C'\fR construct) greater than, or equal
to, 5.9.5.
.SH "Modules and Pragmas"
.IX Header "Modules and Pragmas"
.ie n .SS "New Pragma, ""mro"""
.el .SS "New Pragma, \f(CWmro\fP"
.IX Subsection "New Pragma, mro"
A new pragma, \f(CW\*(C`mro\*(C'\fR (for Method Resolution Order) has been added. It
permits to switch, on a per-class basis, the algorithm that perl uses to
find inherited methods in case of a multiple inheritance hierarchy. The
default \s-1MRO\s0 hasn't changed (\s-1DFS\s0, for Depth First Search). Another \s-1MRO\s0 is
available: the C3 algorithm. See mro for more information.
(Brandon Black)
.PP
Note that, due to changes in the implementation of class hierarchy search,
code that used to undef the \f(CW*ISA\fR glob will most probably break. Anyway,
undef'ing \f(CW*ISA\fR had the side-effect of removing the magic on the \f(CW@ISA\fR
array and should not have been done in the first place.
.SS "bignum, bigint, bigrat"
.IX Subsection "bignum, bigint, bigrat"
The three numeric pragmas \f(CW\*(C`bignum\*(C'\fR, \f(CW\*(C`bigint\*(C'\fR and \f(CW\*(C`bigrat\*(C'\fR are now
lexically scoped. (Tels)
.SS "Math::BigInt/Math::BigFloat"
.IX Subsection "Math::BigInt/Math::BigFloat"
Many bugs have been fixed; noteworthy are comparisons with NaN, which
no longer warn about undef values.
.PP
The following things are new:
.IP "\fIconfig()\fR" 4
.IX Item "config()"
The \fIconfig()\fR method now also supports the calling-style
\&\f(CW\*(C`config(\*(Aqlib\*(Aq)\*(C'\fR in addition to \f(CW\*(C`config()\->{\*(Aqlib\*(Aq}\*(C'\fR.
.IP "\fIimport()\fR" 4
.IX Item "import()"
Upon import, using \f(CW\*(C`lib => \*(AqFoo\*(Aq\*(C'\fR now warns if the low-level library
cannot be found. To suppress the warning, you can use \f(CW\*(C`try => \*(AqFoo\*(Aq\*(C'\fR
instead. To convert the warning into a die, use \f(CW\*(C`only => \*(AqFoo\*(Aq\*(C'\fR
instead.
.IP "roundmode common" 4
.IX Item "roundmode common"
A rounding mode of \f(CW\*(C`common\*(C'\fR is now supported.
.PP
Also, support for the following methods has been added:
.IP "\fIbpi()\fR, \fIbcos()\fR, \fIbsin()\fR, \fIbatan()\fR, \fIbatan2()\fR" 4
.IX Item "bpi(), bcos(), bsin(), batan(), batan2()"
.PD 0
.IP "\fIbmuladd()\fR" 4
.IX Item "bmuladd()"
.IP "\fIbexp()\fR, \fIbnok()\fR" 4
.IX Item "bexp(), bnok()"
.IP "\fIfrom_hex()\fR, \fIfrom_oct()\fR, and \fIfrom_bin()\fR" 4
.IX Item "from_hex(), from_oct(), and from_bin()"
.IP "\fIas_oct()\fR" 4
.IX Item "as_oct()"
.PD
.PP
In addition, the default math-backend (Calc (Perl) and FastCalc (\s-1XS\s0)) now
support storing numbers in parts with 9 digits instead of 7 on Perls with
either 64bit integer or long double support. This means math operations
scale better and are thus faster for really big numbers.
.SS "New Core Modules"
.IX Subsection "New Core Modules"
.IP "\(bu" 4
\&\f(CW\*(C`Locale::Maketext::Simple\*(C'\fR, needed by \s-1CPANPLUS\s0, is a simple wrapper around
\&\f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR. Note that \f(CW\*(C`Locale::Maketext::Lexicon\*(C'\fR isn't
included in the perl core; the behaviour of \f(CW\*(C`Locale::Maketext::Simple\*(C'\fR
gracefully degrades when the later isn't present.
.IP "\(bu" 4
\&\f(CW\*(C`Params::Check\*(C'\fR implements a generic input parsing/checking mechanism. It
is used by \s-1CPANPLUS\s0.
.IP "\(bu" 4
\&\f(CW\*(C`Term::UI\*(C'\fR simplifies the task to ask questions at a terminal prompt.
.IP "\(bu" 4
\&\f(CW\*(C`Object::Accessor\*(C'\fR provides an interface to create per-object accessors.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Pluggable\*(C'\fR is a simple framework to create modules that accept
pluggable sub-modules.
.IP "\(bu" 4
\&\f(CW\*(C`Module::Load::Conditional\*(C'\fR provides simple ways to query and possibly
load installed modules.
.IP "\(bu" 4
\&\f(CW\*(C`Time::Piece\*(C'\fR provides an object oriented interface to time functions,
overriding the built-ins \fIlocaltime()\fR and \fIgmtime()\fR.
.IP "\(bu" 4
\&\f(CW\*(C`IPC::Cmd\*(C'\fR helps to find and run external commands, possibly
interactively.
.IP "\(bu" 4
\&\f(CW\*(C`File::Fetch\*(C'\fR provide a simple generic file fetching mechanism.
.IP "\(bu" 4
\&\f(CW\*(C`Log::Message\*(C'\fR and \f(CW\*(C`Log::Message::Simple\*(C'\fR are used by the log facility
of \f(CW\*(C`CPANPLUS\*(C'\fR.
.IP "\(bu" 4
\&\f(CW\*(C`Archive::Extract\*(C'\fR is a generic archive extraction mechanism
for \fI.tar\fR (plain, gziped or bzipped) or \fI.zip\fR files.
.IP "\(bu" 4
\&\f(CW\*(C`CPANPLUS\*(C'\fR provides an \s-1API\s0 and a command-line tool to access the \s-1CPAN\s0
mirrors.
.SS "Module changes"
.IX Subsection "Module changes"
.ie n .IP """assertions""" 4
.el .IP "\f(CWassertions\fR" 4
.IX Item "assertions"
The \f(CW\*(C`assertions\*(C'\fR pragma, its submodules \f(CW\*(C`assertions::activate\*(C'\fR and
\&\f(CW\*(C`assertions::compat\*(C'\fR and the \fB\-A\fR command-line switch have been removed.
The interface was not judged mature enough for inclusion in a stable
release.
.ie n .IP """base""" 4
.el .IP "\f(CWbase\fR" 4
.IX Item "base"
The \f(CW\*(C`base\*(C'\fR pragma now warns if a class tries to inherit from itself.
(Curtis \*(L"Ovid\*(R" Poe)
.ie n .IP """strict"" and ""warnings""" 4
.el .IP "\f(CWstrict\fR and \f(CWwarnings\fR" 4
.IX Item "strict and warnings"
\&\f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR will now complain loudly if they are loaded via
incorrect casing (as in \f(CW\*(C`use Strict;\*(C'\fR). (Johan Vromans)
.ie n .IP """warnings""" 4
.el .IP "\f(CWwarnings\fR" 4
.IX Item "warnings"
The \f(CW\*(C`warnings\*(C'\fR pragma doesn't load \f(CW\*(C`Carp\*(C'\fR anymore. That means that code
that used \f(CW\*(C`Carp\*(C'\fR routines without having loaded it at compile time might
need to be adjusted; typically, the following (faulty) code won't work
anymore, and will require parentheses to be added after the function name:
.Sp
.Vb 3
\&    use warnings;
\&    require Carp;
\&    Carp::confess "argh";
.Ve
.ie n .IP """less""" 4
.el .IP "\f(CWless\fR" 4
.IX Item "less"
\&\f(CW\*(C`less\*(C'\fR now does something useful (or at least it tries to). In fact, it
has been turned into a lexical pragma. So, in your modules, you can now
test whether your users have requested to use less \s-1CPU\s0, or less memory,
less magic, or maybe even less fat. See less for more. (Joshua ben
Jore)
.ie n .IP """Attribute::Handlers""" 4
.el .IP "\f(CWAttribute::Handlers\fR" 4
.IX Item "Attribute::Handlers"
\&\f(CW\*(C`Attribute::Handlers\*(C'\fR can now report the caller's file and line number.
(David Feldman)
.ie n .IP """B::Lint""" 4
.el .IP "\f(CWB::Lint\fR" 4
.IX Item "B::Lint"
\&\f(CW\*(C`B::Lint\*(C'\fR is now based on \f(CW\*(C`Module::Pluggable\*(C'\fR, and so can be extended
with plugins. (Joshua ben Jore)
.ie n .IP """B""" 4
.el .IP "\f(CWB\fR" 4
.IX Item "B"
It's now possible to access the lexical pragma hints (\f(CW\*(C`%^H\*(C'\fR) by using the
method \fIB::COP::hints_hash()\fR. It returns a \f(CW\*(C`B::RHE\*(C'\fR object, which in turn
can be used to get a hash reference via the method \fIB::RHE::HASH()\fR. (Joshua
ben Jore)
.ie n .IP """Thread""" 4
.el .IP "\f(CWThread\fR" 4
.IX Item "Thread"
As the old 5005thread threading model has been removed, in favor of the
ithreads scheme, the \f(CW\*(C`Thread\*(C'\fR module is now a compatibility wrapper, to
be used in old code only. It has been removed from the default list of
dynamic extensions.
.SH "Utility Changes"
.IX Header "Utility Changes"
.ie n .SS """cpanp"""
.el .SS "\f(CWcpanp\fP"
.IX Subsection "cpanp"
\&\f(CW\*(C`cpanp\*(C'\fR, the \s-1CPANPLUS\s0 shell, has been added. (\f(CW\*(C`cpanp\-run\-perl\*(C'\fR, an
helper for \s-1CPANPLUS\s0 operation, has been added too, but isn't intended for
direct use).
.ie n .SS """cpan2dist"""
.el .SS "\f(CWcpan2dist\fP"
.IX Subsection "cpan2dist"
\&\f(CW\*(C`cpan2dist\*(C'\fR is a new utility, that comes with \s-1CPANPLUS\s0. It's a tool to
create distributions (or packages) from \s-1CPAN\s0 modules.
.ie n .SS """pod2html"""
.el .SS "\f(CWpod2html\fP"
.IX Subsection "pod2html"
The output of \f(CW\*(C`pod2html\*(C'\fR has been enhanced to be more customizable via
\&\s-1CSS\s0. Some formatting problems were also corrected. (Jari Aalto)
.SH "Documentation"
.IX Header "Documentation"
.SS "New manpage, perlunifaq"
.IX Subsection "New manpage, perlunifaq"
A new manual page, perlunifaq (the Perl Unicode \s-1FAQ\s0), has been added
(Juerd Waalboer).
.SH "Installation and Configuration Improvements"
.IX Header "Installation and Configuration Improvements"
.SS "\*(C+ compatibility"
.IX Subsection " compatibility"
Efforts have been made to make perl and the core \s-1XS\s0 modules compilable
with various \*(C+ compilers (although the situation is not perfect with
some of the compilers on some of the platforms tested.)
.SS "Visual \*(C+"
.IX Subsection "Visual "
Perl now can be compiled with Microsoft Visual \*(C+ 2005.
.SS "Static build on Win32"
.IX Subsection "Static build on Win32"
It's now possible to build a \f(CW\*(C`perl\-static.exe\*(C'\fR that doesn't depend
on \f(CW\*(C`perl59.dll\*(C'\fR on Win32. See the Win32 makefiles for details.
(Vadim Konovalov)
.SS "win32 builds"
.IX Subsection "win32 builds"
All win32 builds (MS-Win, WinCE) have been merged and cleaned up.
.ie n .SS """d_pseudofork"" and ""d_printf_format_null"""
.el .SS "\f(CWd_pseudofork\fP and \f(CWd_printf_format_null\fP"
.IX Subsection "d_pseudofork and d_printf_format_null"
A new configuration variable, available as \f(CW$Config{d_pseudofork}\fR in
the Config module, has been added, to distinguish real \fIfork()\fR support
from fake pseudofork used on Windows platforms.
.PP
A new configuration variable, \f(CW\*(C`d_printf_format_null\*(C'\fR, has been added, 
to see if printf-like formats are allowed to be \s-1NULL\s0.
.SS "Help"
.IX Subsection "Help"
\&\f(CW\*(C`Configure \-h\*(C'\fR has been extended with the most used option.
.PP
Much less 'Whoa there' messages.
.SS "64bit systems"
.IX Subsection "64bit systems"
Better detection of 64bit(only) systems, and setting all the (library)
paths accordingly.
.SS "Ports"
.IX Subsection "Ports"
Perl has been reported to work on MidnightBSD.
.PP
Support for Cray \s-1XT4\s0 Catamount/Qk has been added.
.PP
Vendor patches have been merged for RedHat and GenToo.
.SH "Selected Bug Fixes"
.IX Header "Selected Bug Fixes"
PerlIO::scalar will now prevent writing to read-only scalars. Moreover,
\&\fIseek()\fR is now supported with PerlIO::scalar\-based filehandles, the
underlying string being zero-filled as needed. (Rafael, Jarkko Hietaniemi)
.PP
\&\fIstudy()\fR never worked for \s-1UTF\-8\s0 strings, but could lead to false results.
It's now a no-op on \s-1UTF\-8\s0 data. (Yves Orton)
.PP
The signals \s-1SIGILL\s0, \s-1SIGBUS\s0 and \s-1SIGSEGV\s0 are now always delivered in an
\&\*(L"unsafe\*(R" manner (contrary to other signals, that are deferred until the
perl interpreter reaches a reasonably stable state; see
\&\*(L"Deferred Signals (Safe Signals)\*(R" in perlipc). (Rafael)
.PP
When a module or a file is loaded through an \f(CW@INC\fR\-hook, and when this hook
has set a filename entry in \f(CW%INC\fR, _\|_FILE_\|_ is now set for this module
accordingly to the contents of that \f(CW%INC\fR entry. (Rafael)
.PP
The \f(CW\*(C`\-w\*(C'\fR and \f(CW\*(C`\-t\*(C'\fR switches can now be used together without messing
up what categories of warnings are activated or not. (Rafael)
.PP
Duping a filehandle which has the \f(CW\*(C`:utf8\*(C'\fR PerlIO layer set will now
properly carry that layer on the duped filehandle. (Rafael)
.PP
Localizing an hash element whose key was given as a variable didn't work
correctly if the variable was changed while the \fIlocal()\fR was in effect (as
in \f(CW\*(C`local $h{$x}; ++$x\*(C'\fR). (Bo Lindbergh)
.SH "New or Changed Diagnostics"
.IX Header "New or Changed Diagnostics"
.SS "Deprecations"
.IX Subsection "Deprecations"
Two deprecation warnings have been added: (Rafael)
.PP
.Vb 2
\&    Opening dirhandle %s also as a file
\&    Opening filehandle %s also as a directory
.Ve
.SH "Changed Internals"
.IX Header "Changed Internals"
The anonymous hash and array constructors now take 1 op in the optree
instead of 3, now that pp_anonhash and pp_anonlist return a reference to
an hash/array when the op is flagged with OPf_SPECIAL (Nicholas Clark).
.SH "Reporting Bugs"
.IX Header "Reporting Bugs"
If you find what you think is a bug, you might check the articles
recently posted to the comp.lang.perl.misc newsgroup and the perl
bug database at http://rt.perl.org/rt3/ .  There may also be
information at http://www.perl.org/ , the Perl Home Page.
.PP
If you believe you have an unreported bug, please run the \fBperlbug\fR
program included with your release.  Be sure to trim your bug down
to a tiny but sufficient test case.  Your bug report, along with the
output of \f(CW\*(C`perl \-V\*(C'\fR, will be sent off to perlbug@perl.org to be
analysed by the Perl porting team.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \fIChanges\fR file for exhaustive details on what changed.
.PP
The \fI\s-1INSTALL\s0\fR file for how to build Perl.
.PP
The \fI\s-1README\s0\fR file for general stuff.
.PP
The \fIArtistic\fR and \fICopying\fR files for copyright information.
