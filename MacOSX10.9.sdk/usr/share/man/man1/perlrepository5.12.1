.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLREPOSITORY 1"
.TH PERLREPOSITORY 1 "2012-11-03" "perl v5.12.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlrepository \- Using the Perl source repository
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR. The repository contains many Perl revisions from
Perl 1 onwards and all the revisions from Perforce, the version control
system we were using previously. This repository is accessible in
different ways.
.PP
The full repository takes up about 80MB of disk space. A check out of
the blead branch (that is, the main development branch, which contains
bleadperl, the development version of perl 5) takes up about 160MB of
disk space (including the repository). A build of bleadperl takes up
about 200MB (including the repository and the check out).
.SH "Getting access to the repository"
.IX Header "Getting access to the repository"
.SS "Read access via the web"
.IX Subsection "Read access via the web"
You may access the repository over the web. This allows you to browse
the tree, see recent commits, subscribe to \s-1RSS\s0 feeds for the changes,
search for particular commits and more. You may access it at:
.PP
.Vb 1
\&  http://perl5.git.perl.org/perl.git
.Ve
.PP
A mirror of the repository is found at:
.PP
.Vb 1
\&  http://github.com/mirrors/perl
.Ve
.SS "Read access via Git"
.IX Subsection "Read access via Git"
You will need a copy of Git for your computer. You can fetch a copy of
the repository using the Git protocol (which uses port 9418):
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl\-git
.Ve
.PP
This clones the repository and makes a local copy in the \fIperl-git\fR
directory.
.PP
If your local network does not allow you to use port 9418, then you can
fetch a copy of the repository over \s-1HTTP\s0 (this is at least 4x slower):
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl\-http
.Ve
.PP
This clones the repository and makes a local copy in the \fIperl-http\fR
directory.
.SS "Write access to the repository"
.IX Subsection "Write access to the repository"
If you are a committer, then you can fetch a copy of the repository
that you can push back on with:
.PP
.Vb 1
\&  % git clone ssh://perl5.git.perl.org/perl.git perl\-ssh
.Ve
.PP
This clones the repository and makes a local copy in the \fIperl-ssh\fR
directory.
.PP
If you cloned using the git protocol, which is faster than ssh, then
you will need to modify the \s-1URL\s0 for the origin remote to enable
pushing. To do that edit \fI.git/config\fR with \fIgit\-config\fR\|(1) like
this:
.PP
.Vb 1
\&  % git config remote.origin.url ssh://perl5.git.perl.org/perl.git
.Ve
.PP
You can also set up your user name and e\-mail address. Most people do
this once globally in their \fI~/.gitconfig\fR by doing something like:
.PP
.Vb 2
\&  % git config \-\-global user.name "A\*~Xvar ArnfjA\*~XrA\*~X Bjarmason"
\&  % git config \-\-global user.email avarab@gmail.com
.Ve
.PP
However if you'd like to override that just for perl then execute then
execute something like the following in \fIperl-git\fR:
.PP
.Vb 1
\&  % git config user.email avar@cpan.org
.Ve
.PP
It is also possible to keep \f(CW\*(C`origin\*(C'\fR as a git remote, and add a new
remote for ssh access:
.PP
.Vb 1
\&  % git remote add camel perl5.git.perl.org:/perl.git
.Ve
.PP
This allows you to update your local repository by pulling from
\&\f(CW\*(C`origin\*(C'\fR, which is faster and doesn't require you to authenticate, and
to push your changes back with the \f(CW\*(C`camel\*(C'\fR remote:
.PP
.Vb 2
\&  % git fetch camel
\&  % git push camel
.Ve
.PP
The \f(CW\*(C`fetch\*(C'\fR command just updates the \f(CW\*(C`camel\*(C'\fR refs, as the objects
themselves should have been fetched when pulling from \f(CW\*(C`origin\*(C'\fR.
.SS "A note on camel and dromedary"
.IX Subsection "A note on camel and dromedary"
The committers have \s-1SSH\s0 access to the two servers that serve
\&\f(CW\*(C`perl5.git.perl.org\*(C'\fR. One is \f(CW\*(C`perl5.git.perl.org\*(C'\fR itself (\fIcamel\fR),
which is the 'master' repository. The second one is
\&\f(CW\*(C`users.perl5.git.perl.org\*(C'\fR (\fIdromedary\fR), which can be used for
general testing and development. Dromedary syncs the git tree from
camel every few minutes, you should not push there. Both machines also
have a full \s-1CPAN\s0 mirror in /srv/CPAN, please use this. To share files
with the general public, dromedary serves your ~/public_html/ as
\&\f(CW\*(C`http://users.perl5.git.perl.org/~yourlogin/\*(C'\fR
.PP
These hosts have fairly strict firewalls to the outside. Outgoing, only
rsync, ssh and git are allowed. For http and ftp, you can use
http://webproxy:3128 as proxy. Incoming, the firewall tries to detect
attacks and blocks \s-1IP\s0 addresses with suspicious activity. This
sometimes (but very rarely) has false positives and you might get
blocked. The quickest way to get unblocked is to notify the admins.
.PP
These two boxes are owned, hosted, and operated by booking.com. You can
reach the sysadmins in #p5p on irc.perl.org or via mail to
\&\f(CW\*(C`perl5\-porters@perl.org\*(C'\fR
.SH "Overview of the repository"
.IX Header "Overview of the repository"
Once you have changed into the repository directory, you can inspect
it.
.PP
After a clone the repository will contain a single local branch, which
will be the current branch as well, as indicated by the asterisk.
.PP
.Vb 2
\&  % git branch
\&  * blead
.Ve
.PP
Using the \-a switch to \f(CW\*(C`branch\*(C'\fR will also show the remote tracking
branches in the repository:
.PP
.Vb 5
\&  % git branch \-a
\&  * blead
\&    origin/HEAD
\&    origin/blead
\&  ...
.Ve
.PP
The branches that begin with \*(L"origin\*(R" correspond to the \*(L"git remote\*(R"
that you cloned from (which is named \*(L"origin\*(R"). Each branch on the
remote will be exactly tracked by theses branches. You should \s-1NEVER\s0 do
work on these remote tracking branches. You only ever do work in a
local branch. Local branches can be configured to automerge (on pull)
from a designated remote tracking branch. This is the case with the
default branch \f(CW\*(C`blead\*(C'\fR which will be configured to merge from the
remote tracking branch \f(CW\*(C`origin/blead\*(C'\fR.
.PP
You can see recent commits:
.PP
.Vb 1
\&  % git log
.Ve
.PP
And pull new changes from the repository, and update your local
repository (must be clean first)
.PP
.Vb 1
\&  % git pull
.Ve
.PP
Assuming we are on the branch \f(CW\*(C`blead\*(C'\fR immediately after a pull, this
command would be more or less equivalent to:
.PP
.Vb 2
\&  % git fetch
\&  % git merge origin/blead
.Ve
.PP
In fact if you want to update your local repository without touching
your working directory you do:
.PP
.Vb 1
\&  % git fetch
.Ve
.PP
And if you want to update your remote-tracking branches for all defined
remotes simultaneously you can do
.PP
.Vb 1
\&  % git remote update
.Ve
.PP
Neither of these last two commands will update your working directory,
however both will update the remote-tracking branches in your
repository.
.PP
To make a local branch of a remote branch:
.PP
.Vb 1
\&  % git checkout \-b maint\-5.10 origin/maint\-5.10
.Ve
.PP
To switch back to blead:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.SS "Finding out your status"
.IX Subsection "Finding out your status"
The most common git command you will use will probably be
.PP
.Vb 1
\&  % git status
.Ve
.PP
This command will produce as output a description of the current state
of the repository, including modified files and unignored untracked
files, and in addition it will show things like what files have been
staged for the next commit, and usually some useful information about
how to change things. For instance the following:
.PP
.Vb 10
\&  $ git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 1 commit.
\&  #
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #       modified:   pod/perlrepository.pod
\&  #
\&  # Changed but not updated:
\&  #   (use "git add <file>..." to update what will be committed)
\&  #
\&  #       modified:   pod/perlrepository.pod
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
.Ve
.PP
This shows that there were changes to this document staged for commit,
and that there were further changes in the working directory not yet
staged. It also shows that there was an untracked file in the working
directory, and as you can see shows how to change all of this. It also
shows that there is one commit on the working branch \f(CW\*(C`blead\*(C'\fR which has
not been pushed to the \f(CW\*(C`origin\*(C'\fR remote yet. \fB\s-1NOTE\s0\fR: that this output
is also what you see as a template if you do not provide a message to
\&\f(CW\*(C`git commit\*(C'\fR.
.PP
Assuming that you'd like to commit all the changes you've just made as a
a single atomic unit, run this command:
.PP
.Vb 1
\&   % git commit \-a
.Ve
.PP
(That \f(CW\*(C`\-a\*(C'\fR tells git to add every file you've changed to this commit.
New files aren't automatically added to your commit when you use \f(CW\*(C`commit
\&\-a\*(C'\fR If you want to add files or to commit some, but not all of your
changes, have a look at the documentation for \f(CW\*(C`git add\*(C'\fR.)
.PP
Git will start up your favorite text editor, so that you can craft a
commit message for your change. See \*(L"Commit message\*(R" below for more
information about what makes a good commit message.
.PP
Once you've finished writing your commit message and exited your editor,
git will write your change to disk and tell you something like this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.SH "Submitting a patch"
.IX Header "Submitting a patch"
If you have a patch in mind for Perl, you should first get a copy of
the repository:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl\-git
.Ve
.PP
Then change into the directory:
.PP
.Vb 1
\&  % cd perl\-git
.Ve
.PP
Alternatively, if you already have a Perl repository, you should ensure
that you're on the \fIblead\fR branch, and your repository is up to date:
.PP
.Vb 2
\&  % git checkout blead
\&  % git pull
.Ve
.PP
It's preferable to patch against the latest blead version, since this
is where new development occurs for all changes other than critical bug
fixes.  Critical bug fix patches should be made against the relevant
maint branches, or should be submitted with a note indicating all the
branches where the fix should be applied.
.PP
Now that we have everything up to date, we need to create a temporary
new branch for these changes and switch into it:
.PP
.Vb 1
\&  % git checkout \-b orange
.Ve
.PP
which is the short form of
.PP
.Vb 2
\&  % git branch orange
\&  % git checkout orange
.Ve
.PP
Creating a topic branch makes it easier for the maintainers to rebase
or merge back into the master blead for a more linear history. If you
don't work on a topic branch the maintainer has to manually cherry
pick your changes onto blead before they can be applied.
.PP
That'll get you scolded on perl5\-porters, so don't do that. Be
Awesome.
.PP
Then make your changes. For example, if Leon Brocard changes his name
to Orange Brocard, we should change his name in the \s-1AUTHORS\s0 file:
.PP
.Vb 1
\&  % perl \-pi \-e \*(Aqs{Leon Brocard}{Orange Brocard}\*(Aq AUTHORS
.Ve
.PP
You can see what files are changed:
.PP
.Vb 7
\&  % git status
\&  # On branch orange
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #    modified:   AUTHORS
\&  #
.Ve
.PP
And you can see the changes:
.PP
.Vb 10
\&  % git diff
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@    Lars Hecking                   <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
Now commit your change locally:
.PP
.Vb 3
\&  % git commit \-a \-m \*(AqRename Leon Brocard to Orange Brocard\*(Aq
\&  Created commit 6196c1d: Rename Leon Brocard to Orange Brocard
\&   1 files changed, 1 insertions(+), 1 deletions(\-)
.Ve
.PP
You can examine your last commit with:
.PP
.Vb 1
\&  % git show HEAD
.Ve
.PP
and if you are not happy with either the description or the patch
itself you can fix it up by editing the files once more and then issue:
.PP
.Vb 1
\&  % git commit \-a \-\-amend
.Ve
.PP
Now you should create a patch file for all your local changes:
.PP
.Vb 2
\&  % git format\-patch \-M origin..
\&  0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You should now send an email to to
perlbug@perl.org <mailto:perlbug@perl.org> with a description of your
changes, and include this patch file as an attachment. In addition to
being tracked by \s-1RT\s0, mail to perlbug will automatically be forwarded
to perl5\-porters. You should only send patches to
perl5\-porters@perl.org <mailto:perl5-porters@perl.org> directly if the
patch is not ready to be applied, but intended for discussion.
.PP
See the next section for how to configure and use git to send these
emails for you.
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d orange
\&  error: The branch \*(Aqorange\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D orange\*(Aq.
\&  % git branch \-D orange
\&  Deleted branch orange.
.Ve
.SS "Using git to send patch emails"
.IX Subsection "Using git to send patch emails"
In your ~/git/perl repository, set the destination email to perl's bug
tracker:
.PP
.Vb 1
\&  $ git config sendemail.to perlbug@perl.org
.Ve
.PP
Or maybe perl5\-porters (discussed above):
.PP
.Vb 1
\&  $ git config sendemail.to perl5\-porters@perl.org
.Ve
.PP
Then you can use git directly to send your patch emails:
.PP
.Vb 1
\&  $ git send\-email 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You may need to set some configuration variables for your particular
email service provider. For example, to set your global git config to
send email via a gmail account:
.PP
.Vb 3
\&  $ git config \-\-global sendemail.smtpserver smtp.gmail.com
\&  $ git config \-\-global sendemail.smtpssl 1
\&  $ git config \-\-global sendemail.smtpuser YOURUSERNAME@gmail.com
.Ve
.PP
With this configuration, you will be prompted for your gmail password
when you run 'git send\-email'.  You can also configure
\&\f(CW\*(C`sendemail.smtppass\*(C'\fR with your password if you don't care about having
your password in the .gitconfig file.
.SS "A note on derived files"
.IX Subsection "A note on derived files"
Be aware that many files in the distribution are derivative\*(--avoid
patching them, because git won't see the changes to them, and the build
process will overwrite them. Patch the originals instead.  Most
utilities (like perldoc) are in this category, i.e. patch
\&\fIutils/perldoc.PL\fR rather than \fIutils/perldoc\fR. Similarly, don't create
patches for files under \f(CW$src_root\fR/ext from their copies found in
\&\f(CW$install_root\fR/lib.  If you are unsure about the proper location of a
file that may have gotten copied while building the source
distribution, consult the \f(CW\*(C`MANIFEST\*(C'\fR.
.PP
As a special case, several files are regenerated by 'make regen' if
your patch alters \f(CW\*(C`embed.fnc\*(C'\fR.  These are needed for compilation, but
are included in the distribution so that you can build perl without
needing another perl to generate the files.  You must test with these
regenerated files, but it is preferred that you instead note that
\&'make regen is needed' in both the email and the commit message, and
submit your patch without them.  If you're submitting a series of
patches, it might be best to submit the regenerated changes
immediately after the source-changes that caused them, so as to have
as little effect as possible on the bisectability of your patchset.
.SS "Getting your patch accepted"
.IX Subsection "Getting your patch accepted"
If you are submitting a code patch there are several things that
you need to do.
.IP "Commit message" 4
.IX Item "Commit message"
As you craft each patch you intend to submit to the Perl core, it's
important to write a good commit message.
.Sp
The first line of the commit message should be a short description and
should skip the full stop. It should be no longer than the subject
line of an E\-Mail, 50 characters being a good rule of thumb.
.Sp
A lot of Git tools (Gitweb, GitHub, git log \-\-pretty=oneline, ..) will
only display the first line (cut off at 50 characters) when presenting
commit summaries.
.Sp
The commit message should include description of the problem that the
patch corrects or new functionality that the patch adds.
.Sp
As a general rule of thumb, your commit message should let a programmer
with a reasonable familiarity with the Perl core quickly understand what
you were trying to do, how you were trying to do it and why the change
matters to Perl.
.RS 4
.IP "What" 4
.IX Item "What"
Your commit message should describe what part of the Perl core you're
changing and what you expect your patch to do.
.IP "Why" 4
.IX Item "Why"
Perhaps most importantly, your commit message should describe why the
change you are making is important. When someone looks at your change
in six months or six years, your intent should be clear.  If you're
deprecating a feature with the intent of later simplifying another bit
of code, say so. If you're fixing a performance problem or adding a new
feature to support some other bit of the core, mention that.
.IP "How" 4
.IX Item "How"
While it's not necessary for documentation changes, new tests or
trivial patches, it's often worth explaining how your change works.
Even if it's clear to you today, it may not be clear to a porter next
month or next year.
.RE
.RS 4
.Sp
A commit message isn't intended to take the place of comments in your
code.  Commit messages should describe the change you made, while code
comments should describe the current state of the code.  If you've just
implemented a new feature, complete with doc, tests and well-commented
code, a brief commit message will often suffice.  If, however, you've
just changed a single character deep in the parser or lexer, you might
need to write a small novel to ensure that future readers understand
what you did and why you did it.
.RE
.IP "Comments, Comments, Comments" 4
.IX Item "Comments, Comments, Comments"
Be sure to adequately comment your code.  While commenting every line
is unnecessary, anything that takes advantage of side effects of
operators, that creates changes that will be felt outside of the
function being patched, or that others may find confusing should be
documented.  If you are going to err, it is better to err on the side
of adding too many comments than too few.
.IP "Style" 4
.IX Item "Style"
In general, please follow the particular style of the code you are
patching.
.Sp
In particular, follow these general guidelines for patching Perl
sources:
.Sp
.Vb 10
\&    8\-wide tabs (no exceptions!)
\&    4\-wide indents for code, 2\-wide indents for nested CPP #defines
\&    try hard not to exceed 79\-columns
\&    ANSI C prototypes
\&    uncuddled elses and "K&R" style for indenting control constructs
\&    no C++ style (//) comments
\&    mark places that need to be revisited with XXX (and revisit often!)
\&    opening brace lines up with "if" when conditional spans multiple
\&        lines; should be at end\-of\-line otherwise
\&    in function definitions, name starts in column 0 (return value is on
\&        previous line)
\&    single space after keywords that are followed by parens, no space
\&        between function name and following paren
\&    avoid assignments in conditionals, but if they\*(Aqre unavoidable, use
\&        extra paren, e.g. "if (a && (b = c)) ..."
\&    "return foo;" rather than "return(foo);"
\&    "if (!foo) ..." rather than "if (foo == FALSE) ..." etc.
.Ve
.IP "Testsuite" 4
.IX Item "Testsuite"
If your patch changes code (rather than just changing documentation) you
should also include one or more test cases which illustrate the bug you're
fixing or validate the new functionality you're adding.  In general,
you should update an existing test file rather than create a new one.
.Sp
Your testsuite additions should generally follow these guidelines
(courtesy of Gurusamy Sarathy <gsar@activestate.com>):
.Sp
.Vb 10
\&    Know what you\*(Aqre testing.  Read the docs, and the source.
\&    Tend to fail, not succeed.
\&    Interpret results strictly.
\&    Use unrelated features (this will flush out bizarre interactions).
\&    Use non\-standard idioms (otherwise you are not testing TIMTOWTDI).
\&    Avoid using hardcoded test numbers whenever possible (the
\&      EXPECTED/GOT found in t/op/tie.t is much more maintainable,
\&      and gives better failure reports).
\&    Give meaningful error messages when a test fails.
\&    Avoid using qx// and system() unless you are testing for them.  If you
\&      do use them, make sure that you cover _all_ perl platforms.
\&    Unlink any temporary files you create.
\&    Promote unforeseen warnings to errors with $SIG{_\|_WARN_\|_}.
\&    Be sure to use the libraries and modules shipped with the version
\&      being tested, not those that were already installed.
\&    Add comments to the code explaining what you are testing for.
\&    Make updating the \*(Aq1..42\*(Aq string unnecessary.  Or make sure that
\&      you update it.
\&    Test _all_ behaviors of a given operator, library, or function:
\&      \- All optional arguments
\&      \- Return values in various contexts (boolean, scalar, list, lvalue)
\&      \- Use both global and lexical variables
\&      \- Don\*(Aqt forget the exceptional, pathological cases.
.Ve
.SH "Accepting a patch"
.IX Header "Accepting a patch"
If you have received a patch file generated using the above section,
you should try out the patch.
.PP
First we need to create a temporary new branch for these changes and
switch into it:
.PP
.Vb 1
\&  % git checkout \-b experimental
.Ve
.PP
Patches that were formatted by \f(CW\*(C`git format\-patch\*(C'\fR are applied with
\&\f(CW\*(C`git am\*(C'\fR:
.PP
.Vb 2
\&  % git am 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
\&  Applying Rename Leon Brocard to Orange Brocard
.Ve
.PP
If just a raw diff is provided, it is also possible use this two-step
process:
.PP
.Vb 2
\&  % git apply bugfix.diff
\&  % git commit \-a \-m "Some fixing" \-\-author="That Guy <that.guy@internets.com>"
.Ve
.PP
Now we can inspect the change:
.PP
.Vb 4
\&  % git show HEAD
\&  commit b1b3dab48344cff6de4087efca3dbd63548ab5e2
\&  Author: Leon Brocard <acme@astray.com>
\&  Date:   Fri Dec 19 17:02:59 2008 +0000
\&
\&    Rename Leon Brocard to Orange Brocard
\&
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@ Lars Hecking                        <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
If you are a committer to Perl and you think the patch is good, you can
then merge it into blead then push it out to the main repository:
.PP
.Vb 3
\&  % git checkout blead
\&  % git merge experimental
\&  % git push
.Ve
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d experimental
\&  error: The branch \*(Aqexperimental\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D experimental\*(Aq.
\&  % git branch \-D experimental
\&  Deleted branch experimental.
.Ve
.SH "Cleaning a working directory"
.IX Header "Cleaning a working directory"
The command \f(CW\*(C`git clean\*(C'\fR can with varying arguments be used as a
replacement for \f(CW\*(C`make clean\*(C'\fR.
.PP
To reset your working directory to a pristine condition you can do:
.PP
.Vb 1
\&  % git clean \-dxf
.Ve
.PP
However, be aware this will delete \s-1ALL\s0 untracked content. You can use
.PP
.Vb 1
\&  % git clean \-Xf
.Ve
.PP
to remove all ignored untracked files, such as build and test
byproduct, but leave any  manually created files alone.
.PP
If you only want to cancel some uncommitted edits, you can use \f(CW\*(C`git
checkout\*(C'\fR and give it a list of files to be reverted, or \f(CW\*(C`git checkout
\&\-f\*(C'\fR to revert them all.
.PP
If you want to cancel one or several commits, you can use \f(CW\*(C`git reset\*(C'\fR.
.SH "Bisecting"
.IX Header "Bisecting"
\&\f(CW\*(C`git\*(C'\fR provides a built-in way to determine, with a binary search in
the history, which commit should be blamed for introducing a given bug.
.PP
Suppose that we have a script \fI~/testcase.pl\fR that exits with \f(CW0\fR
when some behaviour is correct, and with \f(CW1\fR when it's faulty. You need
an helper script that automates building \f(CW\*(C`perl\*(C'\fR and running the
testcase:
.PP
.Vb 10
\&  % cat ~/run
\&  #!/bin/sh
\&  git clean \-dxf
\&  # If you can use ccache, add \-Dcc=ccache\e gcc \-Dld=gcc to the Configure line
\&  # if Encode is not needed for the test, you can speed up the bisect by
\&  # excluding it from the runs with \-Dnoextensions=Encode
\&  sh Configure \-des \-Dusedevel \-Doptimize="\-g"
\&  test \-f config.sh || exit 125
\&  # Correct makefile for newer GNU gcc
\&  perl \-ni \-we \*(Aqprint unless /<(?:built\-in|command)/\*(Aq makefile x2p/makefile
\&  # if you just need miniperl, replace test_prep with miniperl
\&  make \-j4 test_prep
\&  [ \-x ./perl ] || exit 125
\&  ./perl \-Ilib ~/testcase.pl
\&  ret=$?
\&  [ $ret \-gt 127 ] && ret=127
\&  git clean \-dxf
\&  exit $ret
.Ve
.PP
This script may return \f(CW125\fR to indicate that the corresponding commit
should be skipped. Otherwise, it returns the status of
\&\fI~/testcase.pl\fR.
.PP
You first enter in bisect mode with:
.PP
.Vb 1
\&  % git bisect start
.Ve
.PP
For example, if the bug is present on \f(CW\*(C`HEAD\*(C'\fR but wasn't in 5.10.0,
\&\f(CW\*(C`git\*(C'\fR will learn about this when you enter:
.PP
.Vb 3
\&  % git bisect bad
\&  % git bisect good perl\-5.10.0
\&  Bisecting: 853 revisions left to test after this
.Ve
.PP
This results in checking out the median commit between \f(CW\*(C`HEAD\*(C'\fR and
\&\f(CW\*(C`perl\-5.10.0\*(C'\fR. You can then run the bisecting process with:
.PP
.Vb 1
\&  % git bisect run ~/run
.Ve
.PP
When the first bad commit is isolated, \f(CW\*(C`git bisect\*(C'\fR will tell you so:
.PP
.Vb 4
\&  ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5 is first bad commit
\&  commit ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5
\&  Author: Dave Mitchell <davem@fdisolutions.com>
\&  Date:   Sat Feb 9 14:56:23 2008 +0000
\&
\&      [perl #49472] Attributes + Unknown Error
\&      ...
\&
\&  bisect run success
.Ve
.PP
You can peek into the bisecting process with \f(CW\*(C`git bisect log\*(C'\fR and
\&\f(CW\*(C`git bisect visualize\*(C'\fR. \f(CW\*(C`git bisect reset\*(C'\fR will get you out of bisect
mode.
.PP
Please note that the first \f(CW\*(C`good\*(C'\fR state must be an ancestor of the
first \f(CW\*(C`bad\*(C'\fR state. If you want to search for the commit that \fIsolved\fR
some bug, you have to negate your test case (i.e. exit with \f(CW1\fR if \s-1OK\s0
and \f(CW0\fR if not) and still mark the lower bound as \f(CW\*(C`good\*(C'\fR and the
upper as \f(CW\*(C`bad\*(C'\fR. The \*(L"first bad commit\*(R" has then to be understood as
the \*(L"first commit where the bug is solved\*(R".
.PP
\&\f(CW\*(C`git help bisect\*(C'\fR has much more information on how you can tweak your
binary searches.
.SH "Submitting a patch via GitHub"
.IX Header "Submitting a patch via GitHub"
GitHub is a website that makes it easy to fork and publish projects
with Git. First you should set up a GitHub account and log in.
.PP
Perl's git repository is mirrored on GitHub at this page:
.PP
.Vb 1
\&  http://github.com/mirrors/perl/tree/blead
.Ve
.PP
Visit the page and click the \*(L"fork\*(R" button. This clones the Perl git
repository for you and provides you with \*(L"Your Clone \s-1URL\s0\*(R" from which
you should clone:
.PP
.Vb 1
\&  % git clone git@github.com:USERNAME/perl.git perl\-github
.Ve
.PP
The same patch as above, using github might look like this:
.PP
.Vb 7
\&  % cd perl\-github
\&  % git remote add upstream git://perl5.git.perl.org/perl.git
\&  % git pull upstream blead
\&  % git checkout \-b orange
\&  % perl \-pi \-e \*(Aqs{Leon Brocard}{Orange Brocard}\*(Aq AUTHORS
\&  % git commit \-a \-m \*(AqRename Leon Brocard to Orange Brocard\*(Aq
\&  % git push origin orange
.Ve
.PP
The orange branch has been pushed to GitHub, so you should now send an
email (see \*(L"Submitting a patch\*(R") with a description of your changes
and the following information:
.PP
.Vb 2
\&  http://github.com/USERNAME/perl/tree/orange
\&  git@github.com:USERNAME/perl.git branch orange
.Ve
.SH "Merging from a branch via GitHub"
.IX Header "Merging from a branch via GitHub"
If someone has provided a branch via GitHub and you are a committer,
you should use the following in your perl-ssh directory:
.PP
.Vb 2
\&  % git remote add dandv git://github.com/dandv/perl.git
\&  % git fetch dandv
.Ve
.PP
Now you can see the differences between the branch and blead:
.PP
.Vb 1
\&  % git diff dandv/blead
.Ve
.PP
And you can see the commits:
.PP
.Vb 1
\&  % git log dandv/blead
.Ve
.PP
If you approve of a specific commit, you can cherry pick it:
.PP
.Vb 1
\&  % git cherry\-pick 3adac458cb1c1d41af47fc66e67b49c8dec2323f
.Ve
.PP
Or you could just merge the whole branch if you like it all:
.PP
.Vb 1
\&  % git merge dandv/blead
.Ve
.PP
And then push back to the repository:
.PP
.Vb 1
\&  % git push
.Ve
.SH "Topic branches and rewriting history"
.IX Header "Topic branches and rewriting history"
Individual committers should create topic branches under
\&\fByourname\fR/\fBsome_descriptive_name\fR. Other committers should check
with a topic branch's creator before making any change to it.
.PP
The simplest way to create a remote topic branch that works on all
versions of git is to push the current head as a new branch on the
remote, then check it out locally:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git push origin HEAD:$branch
\&  $ git checkout \-b $branch origin/$branch
.Ve
.PP
Users of git 1.7 or newer can do it in a more obvious manner:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git checkout \-b $branch
\&  $ git push origin \-u $branch
.Ve
.PP
If you are not the creator of \fByourname\fR/\fBsome_descriptive_name\fR, you
might sometimes find that the original author has edited the branch's
history. There are lots of good reasons for this. Sometimes, an author
might simply be rebasing the branch onto a newer source point.
Sometimes, an author might have found an error in an early commit which
they wanted to fix before merging the branch to blead.
.PP
Currently the master repository is configured to forbid
non-fast-forward merges.  This means that the branches within can not
be rebased and pushed as a single step.
.PP
The only way you will ever be allowed to rebase or modify the history
of a pushed branch is to delete it and push it as a new branch under
the same name. Please think carefully about doing this. It may be
better to sequentially rename your branches so that it is easier for
others working with you to cherry-pick their local changes onto the new
version. (\s-1XXX:\s0 needs explanation).
.PP
If you want to rebase a personal topic branch, you will have to delete
your existing topic branch and push as a new version of it. You can do
this via the following formula (see the explanation about \f(CW\*(C`refspec\*(C'\fR's
in the git push documentation for details) after you have rebased your
branch:
.PP
.Vb 4
\&   # first rebase
\&   $ git checkout $user/$topic
\&   $ git fetch
\&   $ git rebase origin/blead
\&
\&   # then "delete\-and\-push"
\&   $ git push origin :$user/$topic
\&   $ git push origin $user/$topic
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR it is forbidden at the repository level to delete any of the
\&\*(L"primary\*(R" branches. That is any branch matching
\&\f(CW\*(C`m!^(blead|maint|perl)!\*(C'\fR. Any attempt to do so will result in git
producing an error like this:
.PP
.Vb 7
\&    $ git push origin :blead
\&    *** It is forbidden to delete blead/maint branches in this repository
\&    error: hooks/update exited with error code 1
\&    error: hook declined to update refs/heads/blead
\&    To ssh://perl5.git.perl.org/perl
\&     ! [remote rejected] blead (hook declined)
\&     error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl\*(Aq
.Ve
.PP
As a matter of policy we do \fBnot\fR edit the history of the blead and
maint\-* branches. If a typo (or worse) sneaks into a commit to blead or
maint\-*, we'll fix it in another commit. The only types of updates
allowed on these branches are \*(L"fast-forward's\*(R", where all history is
preserved.
.PP
Annotated tags in the canonical perl.git repository will never be
deleted or modified. Think long and hard about whether you want to push
a local tag to perl.git before doing so. (Pushing unannotated tags is
not allowed.)
.SH "Committing to maintenance versions"
.IX Header "Committing to maintenance versions"
Maintenance versions should only be altered to add critical bug
fixes, see perlpolicy.
.PP
To commit to a maintenance version of perl, you need to create a local
tracking branch:
.PP
.Vb 1
\&  % git checkout \-\-track \-b maint\-5.005 origin/maint\-5.005
.Ve
.PP
This creates a local branch named \f(CW\*(C`maint\-5.005\*(C'\fR, which tracks the
remote branch \f(CW\*(C`origin/maint\-5.005\*(C'\fR. Then you can pull, commit, merge
and push as before.
.PP
You can also cherry-pick commits from blead and another branch, by
using the \f(CW\*(C`git cherry\-pick\*(C'\fR command. It is recommended to use the
\&\fB\-x\fR option to \f(CW\*(C`git cherry\-pick\*(C'\fR in order to record the \s-1SHA1\s0 of the
original commit in the new commit message.
.SH "Grafts"
.IX Header "Grafts"
The perl history contains one mistake which was not caught in the
conversion: a merge was recorded in the history between blead and
maint\-5.10 where no merge actually occurred.  Due to the nature of git,
this is now impossible to fix in the public repository.  You can remove
this mis-merge locally by adding the following line to your
\&\f(CW\*(C`.git/info/grafts\*(C'\fR file:
.PP
.Vb 1
\&  296f12bbbbaa06de9be9d09d3dcf8f4528898a49 434946e0cb7a32589ed92d18008aaa1d88515930
.Ve
.PP
It is particularly important to have this graft line if any bisecting
is done in the area of the \*(L"merge\*(R" in question.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The git documentation, accessible via the \f(CW\*(C`git help\*(C'\fR command
.IP "\(bu" 4
perlpolicy \- Perl core development policy
