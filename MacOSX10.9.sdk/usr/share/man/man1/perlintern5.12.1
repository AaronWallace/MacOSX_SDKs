.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLINTERN 1"
.TH PERLINTERN 1 "2013-08-25" "perl v5.12.5" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlintern \- autogenerated documentation of purely internal
		 Perl functions
.SH "DESCRIPTION"
.IX Xref "internal Perl functions interpreter functions"
.IX Header "DESCRIPTION"
This file is the autogenerated documentation of functions in the
Perl interpreter that are documented using Perl's internal documentation
format but are not marked as part of the Perl \s-1API\s0. In other words,
\&\fBthey are not for use in extensions\fR!
.SH "CV reference counts and CvOUTSIDE"
.IX Header "CV reference counts and CvOUTSIDE"
.IP "CvWEAKOUTSIDE" 8
.IX Xref "CvWEAKOUTSIDE"
.IX Item "CvWEAKOUTSIDE"
Each \s-1CV\s0 has a pointer, \f(CW\*(C`CvOUTSIDE()\*(C'\fR, to its lexically enclosing
\&\s-1CV\s0 (if any). Because pointers to anonymous sub prototypes are
stored in \f(CW\*(C`&\*(C'\fR pad slots, it is a possible to get a circular reference,
with the parent pointing to the child and vice-versa. To avoid the
ensuing memory leak, we do not increment the reference count of the \s-1CV\s0
pointed to by \f(CW\*(C`CvOUTSIDE\*(C'\fR in the \fIone specific instance\fR that the parent
has a \f(CW\*(C`&\*(C'\fR pad slot pointing back to us. In this case, we set the
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR flag in the child. This allows us to determine under what
circumstances we should decrement the refcount of the parent when freeing
the child.
.Sp
There is a further complication with non-closure anonymous subs (i.e. those
that do not refer to any lexicals outside that sub). In this case, the
anonymous prototype is shared rather than being cloned. This has the
consequence that the parent may be freed while there are still active
children, eg
.Sp
.Vb 1
\&    BEGIN { $a = sub { eval \*(Aq$x\*(Aq } }
.Ve
.Sp
In this case, the \s-1BEGIN\s0 is freed immediately after execution since there
are no active references to it: the anon sub prototype has
\&\f(CW\*(C`CvWEAKOUTSIDE\*(C'\fR set since it's not a closure, and \f(CW$a\fR points to the same
\&\s-1CV\s0, so it doesn't contribute to \s-1BEGIN\s0's refcount either.  When \f(CW$a\fR is
executed, the \f(CW\*(C`eval \*(Aq$x\*(Aq\*(C'\fR causes the chain of \f(CW\*(C`CvOUTSIDE\*(C'\fRs to be followed,
and the freed \s-1BEGIN\s0 is accessed.
.Sp
To avoid this, whenever a \s-1CV\s0 and its associated pad is freed, any
\&\f(CW\*(C`&\*(C'\fR entries in the pad are explicitly removed from the pad, and if the
refcount of the pointed-to anon sub is still positive, then that
child's \f(CW\*(C`CvOUTSIDE\*(C'\fR is set to point to its grandparent. This will only
occur in the single specific case of a non-closure anon prototype
having one or more active references (such as \f(CW$a\fR above).
.Sp
One other thing to consider is that a \s-1CV\s0 may be merely undefined
rather than freed, eg \f(CW\*(C`undef &foo\*(C'\fR. In this case, its refcount may
not have reached zero, but we still delete its pad and its \f(CW\*(C`CvROOT\*(C'\fR etc.
Since various children may still have their \f(CW\*(C`CvOUTSIDE\*(C'\fR pointing at this
undefined \s-1CV\s0, we keep its own \f(CW\*(C`CvOUTSIDE\*(C'\fR for the time being, so that
the chain of lexical scopes is unbroken. For example, the following
should print 123:
.Sp
.Vb 5
\&    my $x = 123;
\&    sub tmp { sub { eval \*(Aq$x\*(Aq } }
\&    my $a = tmp();
\&    undef &tmp;
\&    print  $a\->();
\&
\&        bool    CvWEAKOUTSIDE(CV *cv)
.Ve
.SH "Functions in file pad.h"
.IX Header "Functions in file pad.h"
.IP "\s-1CX_CURPAD_SAVE\s0" 8
.IX Xref "CX_CURPAD_SAVE"
.IX Item "CX_CURPAD_SAVE"
Save the current pad in the given context block structure.
.Sp
.Vb 1
\&        void    CX_CURPAD_SAVE(struct context)
.Ve
.IP "\s-1CX_CURPAD_SV\s0" 8
.IX Xref "CX_CURPAD_SV"
.IX Item "CX_CURPAD_SV"
Access the \s-1SV\s0 at offset po in the saved current pad in the given
context block structure (can be used as an lvalue).
.Sp
.Vb 1
\&        SV *    CX_CURPAD_SV(struct context, PADOFFSET po)
.Ve
.IP "\s-1PAD_BASE_SV\s0" 8
.IX Xref "PAD_BASE_SV"
.IX Item "PAD_BASE_SV"
Get the value from slot \f(CW\*(C`po\*(C'\fR in the base (DEPTH=1) pad of a padlist
.Sp
.Vb 1
\&        SV *    PAD_BASE_SV(PADLIST padlist, PADOFFSET po)
.Ve
.IP "\s-1PAD_CLONE_VARS\s0" 8
.IX Xref "PAD_CLONE_VARS"
.IX Item "PAD_CLONE_VARS"
Clone the state variables associated with running and compiling pads.
.Sp
.Vb 1
\&        void    PAD_CLONE_VARS(PerlInterpreter *proto_perl, CLONE_PARAMS* param)
.Ve
.IP "\s-1PAD_COMPNAME_FLAGS\s0" 8
.IX Xref "PAD_COMPNAME_FLAGS"
.IX Item "PAD_COMPNAME_FLAGS"
Return the flags for the current compiling pad name
at offset \f(CW\*(C`po\*(C'\fR. Assumes a valid slot entry.
.Sp
.Vb 1
\&        U32     PAD_COMPNAME_FLAGS(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_GEN\s0" 8
.IX Xref "PAD_COMPNAME_GEN"
.IX Item "PAD_COMPNAME_GEN"
The generation number of the name at offset \f(CW\*(C`po\*(C'\fR in the current
compiling pad (lvalue). Note that \f(CW\*(C`SvUVX\*(C'\fR is hijacked for this purpose.
.Sp
.Vb 1
\&        STRLEN  PAD_COMPNAME_GEN(PADOFFSET po)
.Ve
.IP "PAD_COMPNAME_GEN_set" 8
.IX Xref "PAD_COMPNAME_GEN_set"
.IX Item "PAD_COMPNAME_GEN_set"
Sets the generation number of the name at offset \f(CW\*(C`po\*(C'\fR in the current
ling pad (lvalue) to \f(CW\*(C`gen\*(C'\fR.  Note that \f(CW\*(C`SvUV_set\*(C'\fR is hijacked for this purpose.
.Sp
.Vb 1
\&        STRLEN  PAD_COMPNAME_GEN_set(PADOFFSET po, int gen)
.Ve
.IP "\s-1PAD_COMPNAME_OURSTASH\s0" 8
.IX Xref "PAD_COMPNAME_OURSTASH"
.IX Item "PAD_COMPNAME_OURSTASH"
Return the stash associated with an \f(CW\*(C`our\*(C'\fR variable.
Assumes the slot entry is a valid \f(CW\*(C`our\*(C'\fR lexical.
.Sp
.Vb 1
\&        HV *    PAD_COMPNAME_OURSTASH(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_PV\s0" 8
.IX Xref "PAD_COMPNAME_PV"
.IX Item "PAD_COMPNAME_PV"
Return the name of the current compiling pad name
at offset \f(CW\*(C`po\*(C'\fR. Assumes a valid slot entry.
.Sp
.Vb 1
\&        char *  PAD_COMPNAME_PV(PADOFFSET po)
.Ve
.IP "\s-1PAD_COMPNAME_TYPE\s0" 8
.IX Xref "PAD_COMPNAME_TYPE"
.IX Item "PAD_COMPNAME_TYPE"
Return the type (stash) of the current compiling pad name at offset
\&\f(CW\*(C`po\*(C'\fR. Must be a valid name. Returns null if not typed.
.Sp
.Vb 1
\&        HV *    PAD_COMPNAME_TYPE(PADOFFSET po)
.Ve
.IP "\s-1PAD_DUP\s0" 8
.IX Xref "PAD_DUP"
.IX Item "PAD_DUP"
Clone a padlist.
.Sp
.Vb 1
\&        void    PAD_DUP(PADLIST dstpad, PADLIST srcpad, CLONE_PARAMS* param)
.Ve
.IP "\s-1PAD_RESTORE_LOCAL\s0" 8
.IX Xref "PAD_RESTORE_LOCAL"
.IX Item "PAD_RESTORE_LOCAL"
Restore the old pad saved into the local variable opad by \s-1\fIPAD_SAVE_LOCAL\s0()\fR
.Sp
.Vb 1
\&        void    PAD_RESTORE_LOCAL(PAD *opad)
.Ve
.IP "\s-1PAD_SAVE_LOCAL\s0" 8
.IX Xref "PAD_SAVE_LOCAL"
.IX Item "PAD_SAVE_LOCAL"
Save the current pad to the local variable opad, then make the
current pad equal to npad
.Sp
.Vb 1
\&        void    PAD_SAVE_LOCAL(PAD *opad, PAD *npad)
.Ve
.IP "\s-1PAD_SAVE_SETNULLPAD\s0" 8
.IX Xref "PAD_SAVE_SETNULLPAD"
.IX Item "PAD_SAVE_SETNULLPAD"
Save the current pad then set it to null.
.Sp
.Vb 1
\&        void    PAD_SAVE_SETNULLPAD()
.Ve
.IP "\s-1PAD_SETSV\s0" 8
.IX Xref "PAD_SETSV"
.IX Item "PAD_SETSV"
Set the slot at offset \f(CW\*(C`po\*(C'\fR in the current pad to \f(CW\*(C`sv\*(C'\fR
.Sp
.Vb 1
\&        SV *    PAD_SETSV(PADOFFSET po, SV* sv)
.Ve
.IP "\s-1PAD_SET_CUR\s0" 8
.IX Xref "PAD_SET_CUR"
.IX Item "PAD_SET_CUR"
Set the current pad to be pad \f(CW\*(C`n\*(C'\fR in the padlist, saving
the previous current pad. \s-1NB\s0 currently this macro expands to a string too
long for some compilers, so it's best to replace it with
.Sp
.Vb 2
\&    SAVECOMPPAD();
\&    PAD_SET_CUR_NOSAVE(padlist,n);
\&
\&
\&        void    PAD_SET_CUR(PADLIST padlist, I32 n)
.Ve
.IP "\s-1PAD_SET_CUR_NOSAVE\s0" 8
.IX Xref "PAD_SET_CUR_NOSAVE"
.IX Item "PAD_SET_CUR_NOSAVE"
like \s-1PAD_SET_CUR\s0, but without the save
.Sp
.Vb 1
\&        void    PAD_SET_CUR_NOSAVE(PADLIST padlist, I32 n)
.Ve
.IP "\s-1PAD_SV\s0" 8
.IX Xref "PAD_SV"
.IX Item "PAD_SV"
Get the value at offset \f(CW\*(C`po\*(C'\fR in the current pad
.Sp
.Vb 1
\&        void    PAD_SV(PADOFFSET po)
.Ve
.IP "PAD_SVl" 8
.IX Xref "PAD_SVl"
.IX Item "PAD_SVl"
Lightweight and lvalue version of \f(CW\*(C`PAD_SV\*(C'\fR.
Get or set the value at offset \f(CW\*(C`po\*(C'\fR in the current pad.
Unlike \f(CW\*(C`PAD_SV\*(C'\fR, does not print diagnostics with \-DX.
For internal use only.
.Sp
.Vb 1
\&        SV *    PAD_SVl(PADOFFSET po)
.Ve
.IP "\s-1SAVECLEARSV\s0" 8
.IX Xref "SAVECLEARSV"
.IX Item "SAVECLEARSV"
Clear the pointed to pad value on scope exit. (i.e. the runtime action of 'my')
.Sp
.Vb 1
\&        void    SAVECLEARSV(SV **svp)
.Ve
.IP "\s-1SAVECOMPPAD\s0" 8
.IX Xref "SAVECOMPPAD"
.IX Item "SAVECOMPPAD"
save PL_comppad and PL_curpad
.Sp
.Vb 1
\&        void    SAVECOMPPAD()
.Ve
.IP "\s-1SAVEPADSV\s0" 8
.IX Xref "SAVEPADSV"
.IX Item "SAVEPADSV"
Save a pad slot (used to restore after an iteration)
.Sp
\&\s-1XXX\s0 \s-1DAPM\s0 it would make more sense to make the arg a \s-1PADOFFSET\s0
	void	\s-1SAVEPADSV\s0(\s-1PADOFFSET\s0 po)
.SH "Functions in file pp_ctl.c"
.IX Header "Functions in file pp_ctl.c"
.IP "docatch" 8
.IX Xref "docatch"
.IX Item "docatch"
Check for the cases 0 or 3 of cur_env.je_ret, only used inside an eval context.
.Sp
0 is used as continue inside eval,
.Sp
3 is used for a die caught by an inner eval \- continue inner loop
.Sp
See cop.h: je_mustcatch, when set at any runlevel to \s-1TRUE\s0, means eval ops must
establish a local jmpenv to handle exception traps.
.Sp
.Vb 1
\&        OP*     docatch(OP *o)
.Ve
.SH "GV Functions"
.IX Header "GV Functions"
.IP "gv_try_downgrade" 8
.IX Xref "gv_try_downgrade"
.IX Item "gv_try_downgrade"
If the typeglob \f(CW\*(C`gv\*(C'\fR can be expressed more succinctly, by having
something other than a real \s-1GV\s0 in its place in the stash, replace it
with the optimised form.  Basic requirements for this are that \f(CW\*(C`gv\*(C'\fR
is a real typeglob, is sufficiently ordinary, and is only referenced
from its package.  This function is meant to be used when a \s-1GV\s0 has been
looked up in part to see what was there, causing upgrading, but based
on what was found it turns out that the real \s-1GV\s0 isn't required after all.
.Sp
If \f(CW\*(C`gv\*(C'\fR is a completely empty typeglob, it is deleted from the stash.
.Sp
If \f(CW\*(C`gv\*(C'\fR is a typeglob containing only a sufficiently-ordinary constant
sub, the typeglob is replaced with a scalar-reference placeholder that
more compactly represents the same thing.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void    gv_try_downgrade(GV* gv)
.Ve
.IP "is_gv_magical_sv" 8
.IX Xref "is_gv_magical_sv"
.IX Item "is_gv_magical_sv"
Returns \f(CW\*(C`TRUE\*(C'\fR if given the name of a magical \s-1GV\s0.
.Sp
Currently only useful internally when determining if a \s-1GV\s0 should be
created even in rvalue contexts.
.Sp
\&\f(CW\*(C`flags\*(C'\fR is not used at present but available for future extension to
allow selecting particular classes of magical variable.
.Sp
Currently assumes that \f(CW\*(C`name\*(C'\fR is \s-1NUL\s0 terminated (as well as len being valid).
This assumption is met by all callers within the perl core, which all pass
pointers returned by SvPV.
.Sp
.Vb 1
\&        bool    is_gv_magical_sv(SV *const name_sv, U32 flags)
.Ve
.SH "Hash Manipulation Functions"
.IX Header "Hash Manipulation Functions"
.IP "refcounted_he_chain_2hv" 8
.IX Xref "refcounted_he_chain_2hv"
.IX Item "refcounted_he_chain_2hv"
Generates and returns a \f(CW\*(C`HV *\*(C'\fR by walking up the tree starting at the passed
in \f(CW\*(C`struct refcounted_he *\*(C'\fR.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        HV *    refcounted_he_chain_2hv(const struct refcounted_he *c)
.Ve
.IP "refcounted_he_free" 8
.IX Xref "refcounted_he_free"
.IX Item "refcounted_he_free"
Decrements the reference count of the passed in \f(CW\*(C`struct refcounted_he *\*(C'\fR
by one. If the reference count reaches zero the structure's memory is freed,
and \f(CW\*(C`refcounted_he_free\*(C'\fR iterates onto the parent node.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        void    refcounted_he_free(struct refcounted_he *he)
.Ve
.IP "refcounted_he_new" 8
.IX Xref "refcounted_he_new"
.IX Item "refcounted_he_new"
Creates a new \f(CW\*(C`struct refcounted_he\*(C'\fR. As key is copied, and value is
stored in a compact form, all references remain the property of the caller.
The \f(CW\*(C`struct refcounted_he\*(C'\fR is returned with a reference count of 1.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        struct refcounted_he *  refcounted_he_new(struct refcounted_he *const parent, SV *const key, SV *const value)
.Ve
.SH "IO Functions"
.IX Header "IO Functions"
.IP "start_glob" 8
.IX Xref "start_glob"
.IX Item "start_glob"
Function called by \f(CW\*(C`do_readline\*(C'\fR to spawn a glob (or do the glob inside
perl on \s-1VMS\s0). This code used to be inline, but now perl uses \f(CW\*(C`File::Glob\*(C'\fR
this glob starter is only used by miniperl during the build process.
Moving it away shrinks pp_hot.c; shrinking pp_hot.c helps speed perl up.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        PerlIO* start_glob(SV *tmpglob, IO *io)
.Ve
.SH "Magical Functions"
.IX Header "Magical Functions"
.IP "magic_clearhint" 8
.IX Xref "magic_clearhint"
.IX Item "magic_clearhint"
Triggered by a delete from %^H, records the key to
\&\f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.
.Sp
.Vb 1
\&        int     magic_clearhint(SV* sv, MAGIC* mg)
.Ve
.IP "magic_clearhints" 8
.IX Xref "magic_clearhints"
.IX Item "magic_clearhints"
Triggered by clearing %^H, resets \f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.
.Sp
.Vb 1
\&        int     magic_clearhints(SV* sv, MAGIC* mg)
.Ve
.IP "magic_sethint" 8
.IX Xref "magic_sethint"
.IX Item "magic_sethint"
Triggered by a store to %^H, records the key/value pair to
\&\f(CW\*(C`PL_compiling.cop_hints_hash\*(C'\fR.  It is assumed that hints aren't storing
anything that would need a deep copy.  Maybe we should warn if we find a
reference.
.Sp
.Vb 1
\&        int     magic_sethint(SV* sv, MAGIC* mg)
.Ve
.IP "mg_localize" 8
.IX Xref "mg_localize"
.IX Item "mg_localize"
Copy some of the magic from an existing \s-1SV\s0 to new localized version of that
\&\s-1SV\s0. Container magic (eg \f(CW%ENV\fR, \f(CW$1\fR, tie) gets copied, value magic doesn't (eg
taint, pos).
.Sp
If setmagic is false then no set magic will be called on the new (empty) \s-1SV\s0.
This typically means that assignment will soon follow (e.g. 'local \f(CW$x\fR = \f(CW$y\fR'),
and that will handle the magic.
.Sp
.Vb 1
\&        void    mg_localize(SV* sv, SV* nsv, bool setmagic)
.Ve
.SH "MRO Functions"
.IX Header "MRO Functions"
.IP "mro_get_linear_isa_dfs" 8
.IX Xref "mro_get_linear_isa_dfs"
.IX Item "mro_get_linear_isa_dfs"
Returns the Depth-First Search linearization of \f(CW@ISA\fR
the given stash.  The return value is a read-only AV*.
\&\f(CW\*(C`level\*(C'\fR should be 0 (it is used internally in this
function's recursion).
.Sp
You are responsible for \f(CW\*(C`SvREFCNT_inc()\*(C'\fR on the
return value if you plan to store it anywhere
semi-permanently (otherwise it might be deleted
out from under you the next time the cache is
invalidated).
.Sp
.Vb 1
\&        AV*     mro_get_linear_isa_dfs(HV* stash, U32 level)
.Ve
.IP "mro_isa_changed_in" 8
.IX Xref "mro_isa_changed_in"
.IX Item "mro_isa_changed_in"
Takes the necessary steps (cache invalidations, mostly)
when the \f(CW@ISA\fR of the given package has changed.  Invoked
by the \f(CW\*(C`setisa\*(C'\fR magic, should not need to invoke directly.
.Sp
.Vb 1
\&        void    mro_isa_changed_in(HV* stash)
.Ve
.SH "Pad Data Structures"
.IX Header "Pad Data Structures"
.IP "CvPADLIST" 8
.IX Xref "CvPADLIST"
.IX Item "CvPADLIST"
\&\s-1CV\s0's can have CvPADLIST(cv) set to point to an \s-1AV\s0.
.Sp
For these purposes \*(L"forms\*(R" are a kind-of \s-1CV\s0, eval"\*(L"s are too (except they're
not callable at will and are always thrown away after the eval\*(R"" is done
executing). Require'd files are simply evals without any outer lexical
scope.
.Sp
XSUBs don't have CvPADLIST set \- dXSTARG fetches values from PL_curpad,
but that is really the callers pad (a slot of which is allocated by
every entersub).
.Sp
The CvPADLIST \s-1AV\s0 has does not have AvREAL set, so \s-1REFCNT\s0 of component items
is managed \*(L"manual\*(R" (mostly in pad.c) rather than normal av.c rules.
The items in the \s-1AV\s0 are not SVs as for a normal \s-1AV\s0, but other AVs:
.Sp
0'th Entry of the CvPADLIST is an \s-1AV\s0 which represents the \*(L"names\*(R" or rather
the \*(L"static type information\*(R" for lexicals.
.Sp
The CvDEPTH'th entry of CvPADLIST \s-1AV\s0 is an \s-1AV\s0 which is the stack frame at that
depth of recursion into the \s-1CV\s0.
The 0'th slot of a frame \s-1AV\s0 is an \s-1AV\s0 which is \f(CW@_\fR.
other entries are storage for variables and op targets.
.Sp
During compilation:
\&\f(CW\*(C`PL_comppad_name\*(C'\fR is set to the names \s-1AV\s0.
\&\f(CW\*(C`PL_comppad\*(C'\fR is set to the frame \s-1AV\s0 for the frame CvDEPTH == 1.
\&\f(CW\*(C`PL_curpad\*(C'\fR is set to the body of the frame \s-1AV\s0 (i.e. AvARRAY(PL_comppad)).
.Sp
During execution, \f(CW\*(C`PL_comppad\*(C'\fR and \f(CW\*(C`PL_curpad\*(C'\fR refer to the live
frame of the currently executing sub.
.Sp
Iterating over the names \s-1AV\s0 iterates over all possible pad
items. Pad slots that are SVs_PADTMP (targets/GVs/constants) end up having
&PL_sv_undef \*(L"names\*(R" (see \fIpad_alloc()\fR).
.Sp
Only my/our variable (SVs_PADMY/SVs_PADOUR) slots get valid names.
The rest are op targets/GVs/constants which are statically allocated
or resolved at compile time.  These don't have names by which they
can be looked up from Perl code at run time through eval"\*(L" like
my/our variables can be.  Since they can't be looked up by \*(R"name"
but only by their index allocated at compile time (which is usually
in PL_op\->op_targ), wasting a name \s-1SV\s0 for them doesn't make sense.
.Sp
The SVs in the names \s-1AV\s0 have their \s-1PV\s0 being the name of the variable.
xlow+1..xhigh inclusive in the \s-1NV\s0 union is a range of cop_seq numbers for
which the name is valid.  For typed lexicals name \s-1SV\s0 is SVt_PVMG and SvSTASH
points at the type.  For \f(CW\*(C`our\*(C'\fR lexicals, the type is also SVt_PVMG, with the
SvOURSTASH slot pointing at the stash of the associated global (so that
duplicate \f(CW\*(C`our\*(C'\fR declarations in the same package can be detected).  SvUVX is
sometimes hijacked to store the generation number during compilation.
.Sp
If SvFAKE is set on the name \s-1SV\s0, then that slot in the frame \s-1AV\s0 is
a \s-1REFCNT\s0'ed reference to a lexical from \*(L"outside\*(R". In this case,
the name \s-1SV\s0 does not use xlow and xhigh to store a cop_seq range, since it is
in scope throughout. Instead xhigh stores some flags containing info about
the real lexical (is it declared in an anon, and is it capable of being
instantiated multiple times?), and for fake ANONs, xlow contains the index
within the parent's pad where the lexical's value is stored, to make
cloning quicker.
.Sp
If the 'name' is '&' the corresponding entry in frame \s-1AV\s0
is a \s-1CV\s0 representing a possible closure.
(SvFAKE and name of '&' is not a meaningful combination currently but could
become so if \f(CW\*(C`my sub foo {}\*(C'\fR is implemented.)
.Sp
Note that formats are treated as anon subs, and are cloned each time
write is called (if necessary).
.Sp
The flag SVs_PADSTALE is cleared on lexicals each time the \fImy()\fR is executed,
and set on scope exit. This allows the 'Variable \f(CW$x\fR is not available' warning
to be generated in evals, such as
.Sp
.Vb 1
\&    { my $x = 1; sub f { eval \*(Aq$x\*(Aq} } f();
.Ve
.Sp
For state vars, SVs_PADSTALE is overloaded to mean 'not yet initialised'
.Sp
.Vb 1
\&        AV *    CvPADLIST(CV *cv)
.Ve
.IP "cv_clone" 8
.IX Xref "cv_clone"
.IX Item "cv_clone"
Clone a \s-1CV:\s0 make a new \s-1CV\s0 which points to the same code etc, but which
has a newly-created pad built by copying the prototype pad and capturing
any outer lexicals.
.Sp
.Vb 1
\&        CV*     cv_clone(CV* proto)
.Ve
.IP "cv_dump" 8
.IX Xref "cv_dump"
.IX Item "cv_dump"
dump the contents of a \s-1CV\s0
.Sp
.Vb 1
\&        void    cv_dump(const CV *cv, const char *title)
.Ve
.IP "do_dump_pad" 8
.IX Xref "do_dump_pad"
.IX Item "do_dump_pad"
Dump the contents of a padlist
.Sp
.Vb 1
\&        void    do_dump_pad(I32 level, PerlIO *file, PADLIST *padlist, int full)
.Ve
.IP "intro_my" 8
.IX Xref "intro_my"
.IX Item "intro_my"
\&\*(L"Introduce\*(R" my variables to visible status.
.Sp
.Vb 1
\&        U32     intro_my()
.Ve
.IP "pad_add_anon" 8
.IX Xref "pad_add_anon"
.IX Item "pad_add_anon"
Add an anon code entry to the current compiling pad
.Sp
.Vb 1
\&        PADOFFSET       pad_add_anon(SV* sv, OPCODE op_type)
.Ve
.IP "pad_add_name" 8
.IX Xref "pad_add_name"
.IX Item "pad_add_name"
Create a new name and associated \s-1PADMY\s0 \s-1SV\s0 in the current pad; return the
offset.
If \f(CW\*(C`typestash\*(C'\fR is valid, the name is for a typed lexical; set the
name's stash to that value.
If \f(CW\*(C`ourstash\*(C'\fR is valid, it's an our lexical, set the name's
SvOURSTASH to that value
.Sp
If fake, it means we're cloning an existing entry
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        PADOFFSET       pad_add_name(const char *name, const STRLEN len, const U32 flags, HV *typestash, HV *ourstash)
.Ve
.IP "pad_alloc" 8
.IX Xref "pad_alloc"
.IX Item "pad_alloc"
Allocate a new my or tmp pad entry. For a my, simply push a null \s-1SV\s0 onto
the end of PL_comppad, but for a tmp, scan the pad from PL_padix upwards
for a slot which has no name and no active value.
.Sp
.Vb 1
\&        PADOFFSET       pad_alloc(I32 optype, U32 tmptype)
.Ve
.IP "pad_block_start" 8
.IX Xref "pad_block_start"
.IX Item "pad_block_start"
Update the pad compilation state variables on entry to a new block
.Sp
.Vb 1
\&        void    pad_block_start(int full)
.Ve
.IP "pad_check_dup" 8
.IX Xref "pad_check_dup"
.IX Item "pad_check_dup"
Check for duplicate declarations: report any of:
     * a my in the current scope with the same name;
     * an our (anywhere in the pad) with the same name and the same stash
       as \f(CW\*(C`ourstash\*(C'\fR
\&\f(CW\*(C`is_our\*(C'\fR indicates that the name to check is an 'our' declaration
.Sp
.Vb 1
\&        void    pad_check_dup(SV *name, const U32 flags, const HV *ourstash)
.Ve
.IP "pad_findlex" 8
.IX Xref "pad_findlex"
.IX Item "pad_findlex"
Find a named lexical anywhere in a chain of nested pads. Add fake entries
in the inner pads if it's found in an outer one.
.Sp
Returns the offset in the bottom pad of the lex or the fake lex.
cv is the \s-1CV\s0 in which to start the search, and seq is the current cop_seq
to match against. If warn is true, print appropriate warnings.  The out_*
vars return values, and so are pointers to where the returned values
should be stored. out_capture, if non-null, requests that the innermost
instance of the lexical is captured; out_name_sv is set to the innermost
matched namesv or fake namesv; out_flags returns the flags normally
associated with the \s-1IVX\s0 field of a fake namesv.
.Sp
Note that \fIpad_findlex()\fR is recursive; it recurses up the chain of CVs,
then comes back down, adding fake entries as it goes. It has to be this way
because fake namesvs in anon protoypes have to store in xlow the index into
the parent pad.
.Sp
.Vb 1
\&        PADOFFSET       pad_findlex(const char *name, const CV* cv, U32 seq, int warn, SV** out_capture, SV** out_name_sv, int *out_flags)
.Ve
.IP "pad_fixup_inner_anons" 8
.IX Xref "pad_fixup_inner_anons"
.IX Item "pad_fixup_inner_anons"
For any anon CVs in the pad, change CvOUTSIDE of that \s-1CV\s0 from
old_cv to new_cv if necessary. Needed when a newly-compiled \s-1CV\s0 has to be
moved to a pre-existing \s-1CV\s0 struct.
.Sp
.Vb 1
\&        void    pad_fixup_inner_anons(PADLIST *padlist, CV *old_cv, CV *new_cv)
.Ve
.IP "pad_free" 8
.IX Xref "pad_free"
.IX Item "pad_free"
Free the \s-1SV\s0 at offset po in the current pad.
.Sp
.Vb 1
\&        void    pad_free(PADOFFSET po)
.Ve
.IP "pad_leavemy" 8
.IX Xref "pad_leavemy"
.IX Item "pad_leavemy"
Cleanup at end of scope during compilation: set the max seq number for
lexicals in this scope and warn of any lexicals that never got introduced.
.Sp
.Vb 1
\&        void    pad_leavemy()
.Ve
.IP "pad_new" 8
.IX Xref "pad_new"
.IX Item "pad_new"
Create a new compiling padlist, saving and updating the various global
vars at the same time as creating the pad itself. The following flags
can be \s-1OR\s0'ed together:
.Sp
.Vb 3
\&    padnew_CLONE        this pad is for a cloned CV
\&    padnew_SAVE         save old globals
\&    padnew_SAVESUB      also save extra stuff for start of sub
\&
\&        PADLIST*        pad_new(int flags)
.Ve
.IP "pad_push" 8
.IX Xref "pad_push"
.IX Item "pad_push"
Push a new pad frame onto the padlist, unless there's already a pad at
this depth, in which case don't bother creating a new one.  Then give
the new pad an \f(CW@_\fR in slot zero.
.Sp
.Vb 1
\&        void    pad_push(PADLIST *padlist, int depth)
.Ve
.IP "pad_reset" 8
.IX Xref "pad_reset"
.IX Item "pad_reset"
Mark all the current temporaries for reuse
.Sp
.Vb 1
\&        void    pad_reset()
.Ve
.IP "pad_setsv" 8
.IX Xref "pad_setsv"
.IX Item "pad_setsv"
Set the entry at offset po in the current pad to sv.
Use the macro \s-1\fIPAD_SETSV\s0()\fR rather than calling this function directly.
.Sp
.Vb 1
\&        void    pad_setsv(PADOFFSET po, SV* sv)
.Ve
.IP "pad_swipe" 8
.IX Xref "pad_swipe"
.IX Item "pad_swipe"
Abandon the tmp in the current pad at offset po and replace with a
new one.
.Sp
.Vb 1
\&        void    pad_swipe(PADOFFSET po, bool refadjust)
.Ve
.IP "pad_tidy" 8
.IX Xref "pad_tidy"
.IX Item "pad_tidy"
Tidy up a pad after we've finished compiling it:
    * remove most stuff from the pads of anonsub prototypes;
    * give it a \f(CW@_\fR;
    * mark tmps as such.
.Sp
.Vb 1
\&        void    pad_tidy(padtidy_type type)
.Ve
.IP "pad_undef" 8
.IX Xref "pad_undef"
.IX Item "pad_undef"
Free the padlist associated with a \s-1CV\s0.
If parts of it happen to be current, we null the relevant
PL_*pad* global vars so that we don't have any dangling references left.
We also repoint the CvOUTSIDE of any about-to-be-orphaned
inner subs to the outer of this cv.
.Sp
(This function should really be called pad_free, but the name was already
taken)
.Sp
.Vb 1
\&        void    pad_undef(CV* cv)
.Ve
.SH "Per-Interpreter Variables"
.IX Header "Per-Interpreter Variables"
.IP "PL_DBsingle" 8
.IX Xref "PL_DBsingle"
.IX Item "PL_DBsingle"
When Perl is run in debugging mode, with the \fB\-d\fR switch, this \s-1SV\s0 is a
boolean which indicates whether subs are being single-stepped.
Single-stepping is automatically turned on after every step.  This is the C
variable which corresponds to Perl's \f(CW$DB::single\fR variable.  See
\&\f(CW\*(C`PL_DBsub\*(C'\fR.
.Sp
.Vb 1
\&        SV *    PL_DBsingle
.Ve
.IP "PL_DBsub" 8
.IX Xref "PL_DBsub"
.IX Item "PL_DBsub"
When Perl is run in debugging mode, with the \fB\-d\fR switch, this \s-1GV\s0 contains
the \s-1SV\s0 which holds the name of the sub being debugged.  This is the C
variable which corresponds to Perl's \f(CW$DB::sub\fR variable.  See
\&\f(CW\*(C`PL_DBsingle\*(C'\fR.
.Sp
.Vb 1
\&        GV *    PL_DBsub
.Ve
.IP "PL_DBtrace" 8
.IX Xref "PL_DBtrace"
.IX Item "PL_DBtrace"
Trace variable used when Perl is run in debugging mode, with the \fB\-d\fR
switch.  This is the C variable which corresponds to Perl's \f(CW$DB::trace\fR
variable.  See \f(CW\*(C`PL_DBsingle\*(C'\fR.
.Sp
.Vb 1
\&        SV *    PL_DBtrace
.Ve
.IP "PL_dowarn" 8
.IX Xref "PL_dowarn"
.IX Item "PL_dowarn"
The C variable which corresponds to Perl's $^W warning variable.
.Sp
.Vb 1
\&        bool    PL_dowarn
.Ve
.IP "PL_last_in_gv" 8
.IX Xref "PL_last_in_gv"
.IX Item "PL_last_in_gv"
The \s-1GV\s0 which was last used for a filehandle input operation. (\f(CW\*(C`<FH>\*(C'\fR)
.Sp
.Vb 1
\&        GV*     PL_last_in_gv
.Ve
.IP "PL_ofsgv" 8
.IX Xref "PL_ofsgv"
.IX Item "PL_ofsgv"
The glob containing the output field separator \- \f(CW\*(C`*,\*(C'\fR in Perl space.
.Sp
.Vb 1
\&        GV*     PL_ofsgv
.Ve
.IP "PL_rs" 8
.IX Xref "PL_rs"
.IX Item "PL_rs"
The input record separator \- \f(CW$/\fR in Perl space.
.Sp
.Vb 1
\&        SV*     PL_rs
.Ve
.SH "Stack Manipulation Macros"
.IX Header "Stack Manipulation Macros"
.IP "djSP" 8
.IX Xref "djSP"
.IX Item "djSP"
Declare Just \f(CW\*(C`SP\*(C'\fR. This is actually identical to \f(CW\*(C`dSP\*(C'\fR, and declares
a local copy of perl's stack pointer, available via the \f(CW\*(C`SP\*(C'\fR macro.
See \f(CW\*(C`SP\*(C'\fR.  (Available for backward source code compatibility with the
old (Perl 5.005) thread model.)
.Sp
.Vb 1
\&                djSP;
.Ve
.IP "\s-1LVRET\s0" 8
.IX Xref "LVRET"
.IX Item "LVRET"
True if this op will be the return value of an lvalue subroutine
.SH "SV Manipulation Functions"
.IX Header "SV Manipulation Functions"
.IP "sv_add_arena" 8
.IX Xref "sv_add_arena"
.IX Item "sv_add_arena"
Given a chunk of memory, link it to the head of the list of arenas,
and split it into a list of free SVs.
.Sp
.Vb 1
\&        void    sv_add_arena(char *const ptr, const U32 size, const U32 flags)
.Ve
.IP "sv_clean_all" 8
.IX Xref "sv_clean_all"
.IX Item "sv_clean_all"
Decrement the refcnt of each remaining \s-1SV\s0, possibly triggering a
cleanup. This function may have to be called multiple times to free
SVs which are in complex self-referential hierarchies.
.Sp
.Vb 1
\&        I32     sv_clean_all()
.Ve
.IP "sv_clean_objs" 8
.IX Xref "sv_clean_objs"
.IX Item "sv_clean_objs"
Attempt to destroy all objects not yet freed
.Sp
.Vb 1
\&        void    sv_clean_objs()
.Ve
.IP "sv_free_arenas" 8
.IX Xref "sv_free_arenas"
.IX Item "sv_free_arenas"
Deallocate the memory used by all arenas. Note that all the individual \s-1SV\s0
heads and bodies within the arenas must already have been freed.
.Sp
.Vb 1
\&        void    sv_free_arenas()
.Ve
.SH "SV-Body Allocation"
.IX Header "SV-Body Allocation"
.IP "sv_2num" 8
.IX Xref "sv_2num"
.IX Item "sv_2num"
Return an \s-1SV\s0 with the numeric value of the source \s-1SV\s0, doing any necessary
reference or overload conversion.  You must use the \f(CW\*(C`SvNUM(sv)\*(C'\fR macro to
access this function.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        SV*     sv_2num(SV *const sv)
.Ve
.SH "Unicode Support"
.IX Header "Unicode Support"
.IP "find_uninit_var" 8
.IX Xref "find_uninit_var"
.IX Item "find_uninit_var"
Find the name of the undefined variable (if any) that caused the operator o
to issue a \*(L"Use of uninitialized value\*(R" warning.
If match is true, only return a name if it's value matches uninit_sv.
So roughly speaking, if a unary operator (such as \s-1OP_COS\s0) generates a
warning, then following the direct child of the op may yield an
\&\s-1OP_PADSV\s0 or \s-1OP_GV\s0 that gives the name of the undefined variable. On the
other hand, with \s-1OP_ADD\s0 there are two branches to follow, so we only print
the variable name if we get an exact match.
.Sp
The name is returned as a mortal \s-1SV\s0.
.Sp
Assumes that PL_op is the op that originally triggered the error, and that
PL_comppad/PL_curpad points to the currently executing pad.
.Sp
\&\s-1NOTE:\s0 this function is experimental and may change or be
removed without notice.
.Sp
.Vb 1
\&        SV*     find_uninit_var(const OP *const obase, const SV *const uninit_sv, bool top)
.Ve
.IP "report_uninit" 8
.IX Xref "report_uninit"
.IX Item "report_uninit"
Print appropriate \*(L"Use of uninitialized variable\*(R" warning
.Sp
.Vb 1
\&        void    report_uninit(const SV *uninit_sv)
.Ve
.SH "Undocumented functions"
.IX Header "Undocumented functions"
These functions are currently undocumented:
.IP "F0convert" 4
.IX Xref "F0convert"
.IX Item "F0convert"
.PD 0
.IP "Slab_to_rw" 4
.IX Xref "Slab_to_rw"
.IX Item "Slab_to_rw"
.IP "add_data" 4
.IX Xref "add_data"
.IX Item "add_data"
.IP "add_utf16_textfilter" 4
.IX Xref "add_utf16_textfilter"
.IX Item "add_utf16_textfilter"
.IP "addmad" 4
.IX Xref "addmad"
.IX Item "addmad"
.IP "allocmy" 4
.IX Xref "allocmy"
.IX Item "allocmy"
.IP "amagic_cmp" 4
.IX Xref "amagic_cmp"
.IX Item "amagic_cmp"
.IP "amagic_cmp_locale" 4
.IX Xref "amagic_cmp_locale"
.IX Item "amagic_cmp_locale"
.IP "amagic_i_ncmp" 4
.IX Xref "amagic_i_ncmp"
.IX Item "amagic_i_ncmp"
.IP "amagic_ncmp" 4
.IX Xref "amagic_ncmp"
.IX Item "amagic_ncmp"
.IP "anonymise_cv" 4
.IX Xref "anonymise_cv"
.IX Item "anonymise_cv"
.IP "ao" 4
.IX Xref "ao"
.IX Item "ao"
.IP "append_elem" 4
.IX Xref "append_elem"
.IX Item "append_elem"
.IP "append_list" 4
.IX Xref "append_list"
.IX Item "append_list"
.IP "append_madprops" 4
.IX Xref "append_madprops"
.IX Item "append_madprops"
.IP "apply" 4
.IX Xref "apply"
.IX Item "apply"
.IP "apply_attrs" 4
.IX Xref "apply_attrs"
.IX Item "apply_attrs"
.IP "apply_attrs_my" 4
.IX Xref "apply_attrs_my"
.IX Item "apply_attrs_my"
.IP "av_reify" 4
.IX Xref "av_reify"
.IX Item "av_reify"
.IP "bad_type" 4
.IX Xref "bad_type"
.IX Item "bad_type"
.IP "bind_match" 4
.IX Xref "bind_match"
.IX Item "bind_match"
.IP "block_end" 4
.IX Xref "block_end"
.IX Item "block_end"
.IP "block_start" 4
.IX Xref "block_start"
.IX Item "block_start"
.IP "boot_core_PerlIO" 4
.IX Xref "boot_core_PerlIO"
.IX Item "boot_core_PerlIO"
.IP "boot_core_UNIVERSAL" 4
.IX Xref "boot_core_UNIVERSAL"
.IX Item "boot_core_UNIVERSAL"
.IP "boot_core_mro" 4
.IX Xref "boot_core_mro"
.IX Item "boot_core_mro"
.IP "bytes_to_uni" 4
.IX Xref "bytes_to_uni"
.IX Item "bytes_to_uni"
.IP "cando" 4
.IX Xref "cando"
.IX Item "cando"
.IP "check_type_and_open" 4
.IX Xref "check_type_and_open"
.IX Item "check_type_and_open"
.IP "check_uni" 4
.IX Xref "check_uni"
.IX Item "check_uni"
.IP "checkcomma" 4
.IX Xref "checkcomma"
.IX Item "checkcomma"
.IP "checkposixcc" 4
.IX Xref "checkposixcc"
.IX Item "checkposixcc"
.IP "ck_anoncode" 4
.IX Xref "ck_anoncode"
.IX Item "ck_anoncode"
.IP "ck_bitop" 4
.IX Xref "ck_bitop"
.IX Item "ck_bitop"
.IP "ck_concat" 4
.IX Xref "ck_concat"
.IX Item "ck_concat"
.IP "ck_defined" 4
.IX Xref "ck_defined"
.IX Item "ck_defined"
.IP "ck_delete" 4
.IX Xref "ck_delete"
.IX Item "ck_delete"
.IP "ck_die" 4
.IX Xref "ck_die"
.IX Item "ck_die"
.IP "ck_each" 4
.IX Xref "ck_each"
.IX Item "ck_each"
.IP "ck_eof" 4
.IX Xref "ck_eof"
.IX Item "ck_eof"
.IP "ck_eval" 4
.IX Xref "ck_eval"
.IX Item "ck_eval"
.IP "ck_exec" 4
.IX Xref "ck_exec"
.IX Item "ck_exec"
.IP "ck_exists" 4
.IX Xref "ck_exists"
.IX Item "ck_exists"
.IP "ck_exit" 4
.IX Xref "ck_exit"
.IX Item "ck_exit"
.IP "ck_ftst" 4
.IX Xref "ck_ftst"
.IX Item "ck_ftst"
.IP "ck_fun" 4
.IX Xref "ck_fun"
.IX Item "ck_fun"
.IP "ck_glob" 4
.IX Xref "ck_glob"
.IX Item "ck_glob"
.IP "ck_grep" 4
.IX Xref "ck_grep"
.IX Item "ck_grep"
.IP "ck_index" 4
.IX Xref "ck_index"
.IX Item "ck_index"
.IP "ck_join" 4
.IX Xref "ck_join"
.IX Item "ck_join"
.IP "ck_lfun" 4
.IX Xref "ck_lfun"
.IX Item "ck_lfun"
.IP "ck_listiob" 4
.IX Xref "ck_listiob"
.IX Item "ck_listiob"
.IP "ck_match" 4
.IX Xref "ck_match"
.IX Item "ck_match"
.IP "ck_method" 4
.IX Xref "ck_method"
.IX Item "ck_method"
.IP "ck_null" 4
.IX Xref "ck_null"
.IX Item "ck_null"
.IP "ck_open" 4
.IX Xref "ck_open"
.IX Item "ck_open"
.IP "ck_readline" 4
.IX Xref "ck_readline"
.IX Item "ck_readline"
.IP "ck_repeat" 4
.IX Xref "ck_repeat"
.IX Item "ck_repeat"
.IP "ck_require" 4
.IX Xref "ck_require"
.IX Item "ck_require"
.IP "ck_return" 4
.IX Xref "ck_return"
.IX Item "ck_return"
.IP "ck_rfun" 4
.IX Xref "ck_rfun"
.IX Item "ck_rfun"
.IP "ck_rvconst" 4
.IX Xref "ck_rvconst"
.IX Item "ck_rvconst"
.IP "ck_sassign" 4
.IX Xref "ck_sassign"
.IX Item "ck_sassign"
.IP "ck_select" 4
.IX Xref "ck_select"
.IX Item "ck_select"
.IP "ck_shift" 4
.IX Xref "ck_shift"
.IX Item "ck_shift"
.IP "ck_sort" 4
.IX Xref "ck_sort"
.IX Item "ck_sort"
.IP "ck_spair" 4
.IX Xref "ck_spair"
.IX Item "ck_spair"
.IP "ck_split" 4
.IX Xref "ck_split"
.IX Item "ck_split"
.IP "ck_subr" 4
.IX Xref "ck_subr"
.IX Item "ck_subr"
.IP "ck_substr" 4
.IX Xref "ck_substr"
.IX Item "ck_substr"
.IP "ck_svconst" 4
.IX Xref "ck_svconst"
.IX Item "ck_svconst"
.IP "ck_trunc" 4
.IX Xref "ck_trunc"
.IX Item "ck_trunc"
.IP "ck_unpack" 4
.IX Xref "ck_unpack"
.IX Item "ck_unpack"
.IP "ckwarn_common" 4
.IX Xref "ckwarn_common"
.IX Item "ckwarn_common"
.IP "cl_and" 4
.IX Xref "cl_and"
.IX Item "cl_and"
.IP "cl_anything" 4
.IX Xref "cl_anything"
.IX Item "cl_anything"
.IP "cl_init" 4
.IX Xref "cl_init"
.IX Item "cl_init"
.IP "cl_init_zero" 4
.IX Xref "cl_init_zero"
.IX Item "cl_init_zero"
.IP "cl_is_anything" 4
.IX Xref "cl_is_anything"
.IX Item "cl_is_anything"
.IP "cl_or" 4
.IX Xref "cl_or"
.IX Item "cl_or"
.IP "clear_placeholders" 4
.IX Xref "clear_placeholders"
.IX Item "clear_placeholders"
.IP "closest_cop" 4
.IX Xref "closest_cop"
.IX Item "closest_cop"
.IP "convert" 4
.IX Xref "convert"
.IX Item "convert"
.IP "cop_free" 4
.IX Xref "cop_free"
.IX Item "cop_free"
.IP "cr_textfilter" 4
.IX Xref "cr_textfilter"
.IX Item "cr_textfilter"
.IP "create_eval_scope" 4
.IX Xref "create_eval_scope"
.IX Item "create_eval_scope"
.IP "curmad" 4
.IX Xref "curmad"
.IX Item "curmad"
.IP "cv_ckproto_len" 4
.IX Xref "cv_ckproto_len"
.IX Item "cv_ckproto_len"
.IP "deb_curcv" 4
.IX Xref "deb_curcv"
.IX Item "deb_curcv"
.IP "deb_stack_all" 4
.IX Xref "deb_stack_all"
.IX Item "deb_stack_all"
.IP "deb_stack_n" 4
.IX Xref "deb_stack_n"
.IX Item "deb_stack_n"
.IP "debprof" 4
.IX Xref "debprof"
.IX Item "debprof"
.IP "debug_start_match" 4
.IX Xref "debug_start_match"
.IX Item "debug_start_match"
.IP "del_sv" 4
.IX Xref "del_sv"
.IX Item "del_sv"
.IP "delete_eval_scope" 4
.IX Xref "delete_eval_scope"
.IX Item "delete_eval_scope"
.IP "deprecate_commaless_var_list" 4
.IX Xref "deprecate_commaless_var_list"
.IX Item "deprecate_commaless_var_list"
.IP "destroy_matcher" 4
.IX Xref "destroy_matcher"
.IX Item "destroy_matcher"
.IP "die_where" 4
.IX Xref "die_where"
.IX Item "die_where"
.IP "div128" 4
.IX Xref "div128"
.IX Item "div128"
.IP "do_aexec" 4
.IX Xref "do_aexec"
.IX Item "do_aexec"
.IP "do_aexec5" 4
.IX Xref "do_aexec5"
.IX Item "do_aexec5"
.IP "do_chomp" 4
.IX Xref "do_chomp"
.IX Item "do_chomp"
.IP "do_chop" 4
.IX Xref "do_chop"
.IX Item "do_chop"
.IP "do_delete_local" 4
.IX Xref "do_delete_local"
.IX Item "do_delete_local"
.IP "do_eof" 4
.IX Xref "do_eof"
.IX Item "do_eof"
.IP "do_exec" 4
.IX Xref "do_exec"
.IX Item "do_exec"
.IP "do_exec3" 4
.IX Xref "do_exec3"
.IX Item "do_exec3"
.IP "do_execfree" 4
.IX Xref "do_execfree"
.IX Item "do_execfree"
.IP "do_ipcctl" 4
.IX Xref "do_ipcctl"
.IX Item "do_ipcctl"
.IP "do_ipcget" 4
.IX Xref "do_ipcget"
.IX Item "do_ipcget"
.IP "do_kv" 4
.IX Xref "do_kv"
.IX Item "do_kv"
.IP "do_msgrcv" 4
.IX Xref "do_msgrcv"
.IX Item "do_msgrcv"
.IP "do_msgsnd" 4
.IX Xref "do_msgsnd"
.IX Item "do_msgsnd"
.IP "do_oddball" 4
.IX Xref "do_oddball"
.IX Item "do_oddball"
.IP "do_op_xmldump" 4
.IX Xref "do_op_xmldump"
.IX Item "do_op_xmldump"
.IP "do_pmop_xmldump" 4
.IX Xref "do_pmop_xmldump"
.IX Item "do_pmop_xmldump"
.IP "do_print" 4
.IX Xref "do_print"
.IX Item "do_print"
.IP "do_readline" 4
.IX Xref "do_readline"
.IX Item "do_readline"
.IP "do_seek" 4
.IX Xref "do_seek"
.IX Item "do_seek"
.IP "do_semop" 4
.IX Xref "do_semop"
.IX Item "do_semop"
.IP "do_shmio" 4
.IX Xref "do_shmio"
.IX Item "do_shmio"
.IP "do_smartmatch" 4
.IX Xref "do_smartmatch"
.IX Item "do_smartmatch"
.IP "do_sysseek" 4
.IX Xref "do_sysseek"
.IX Item "do_sysseek"
.IP "do_tell" 4
.IX Xref "do_tell"
.IX Item "do_tell"
.IP "do_trans" 4
.IX Xref "do_trans"
.IX Item "do_trans"
.IP "do_trans_complex" 4
.IX Xref "do_trans_complex"
.IX Item "do_trans_complex"
.IP "do_trans_complex_utf8" 4
.IX Xref "do_trans_complex_utf8"
.IX Item "do_trans_complex_utf8"
.IP "do_trans_count" 4
.IX Xref "do_trans_count"
.IX Item "do_trans_count"
.IP "do_trans_count_utf8" 4
.IX Xref "do_trans_count_utf8"
.IX Item "do_trans_count_utf8"
.IP "do_trans_simple" 4
.IX Xref "do_trans_simple"
.IX Item "do_trans_simple"
.IP "do_trans_simple_utf8" 4
.IX Xref "do_trans_simple_utf8"
.IX Item "do_trans_simple_utf8"
.IP "do_vecget" 4
.IX Xref "do_vecget"
.IX Item "do_vecget"
.IP "do_vecset" 4
.IX Xref "do_vecset"
.IX Item "do_vecset"
.IP "do_vop" 4
.IX Xref "do_vop"
.IX Item "do_vop"
.IP "doeval" 4
.IX Xref "doeval"
.IX Item "doeval"
.IP "dofile" 4
.IX Xref "dofile"
.IX Item "dofile"
.IP "dofindlabel" 4
.IX Xref "dofindlabel"
.IX Item "dofindlabel"
.IP "doform" 4
.IX Xref "doform"
.IX Item "doform"
.IP "dooneliner" 4
.IX Xref "dooneliner"
.IX Item "dooneliner"
.IP "doopen_pm" 4
.IX Xref "doopen_pm"
.IX Item "doopen_pm"
.IP "doparseform" 4
.IX Xref "doparseform"
.IX Item "doparseform"
.IP "dopoptoeval" 4
.IX Xref "dopoptoeval"
.IX Item "dopoptoeval"
.IP "dopoptogiven" 4
.IX Xref "dopoptogiven"
.IX Item "dopoptogiven"
.IP "dopoptolabel" 4
.IX Xref "dopoptolabel"
.IX Item "dopoptolabel"
.IP "dopoptoloop" 4
.IX Xref "dopoptoloop"
.IX Item "dopoptoloop"
.IP "dopoptosub_at" 4
.IX Xref "dopoptosub_at"
.IX Item "dopoptosub_at"
.IP "dopoptowhen" 4
.IX Xref "dopoptowhen"
.IX Item "dopoptowhen"
.IP "dump_all_perl" 4
.IX Xref "dump_all_perl"
.IX Item "dump_all_perl"
.IP "dump_exec_pos" 4
.IX Xref "dump_exec_pos"
.IX Item "dump_exec_pos"
.IP "dump_packsubs_perl" 4
.IX Xref "dump_packsubs_perl"
.IX Item "dump_packsubs_perl"
.IP "dump_sub_perl" 4
.IX Xref "dump_sub_perl"
.IX Item "dump_sub_perl"
.IP "dump_sv_child" 4
.IX Xref "dump_sv_child"
.IX Item "dump_sv_child"
.IP "dump_trie" 4
.IX Xref "dump_trie"
.IX Item "dump_trie"
.IP "dump_trie_interim_list" 4
.IX Xref "dump_trie_interim_list"
.IX Item "dump_trie_interim_list"
.IP "dump_trie_interim_table" 4
.IX Xref "dump_trie_interim_table"
.IX Item "dump_trie_interim_table"
.IP "dumpuntil" 4
.IX Xref "dumpuntil"
.IX Item "dumpuntil"
.IP "dup_attrlist" 4
.IX Xref "dup_attrlist"
.IX Item "dup_attrlist"
.IP "emulate_cop_io" 4
.IX Xref "emulate_cop_io"
.IX Item "emulate_cop_io"
.IP "exec_failed" 4
.IX Xref "exec_failed"
.IX Item "exec_failed"
.IP "expect_number" 4
.IX Xref "expect_number"
.IX Item "expect_number"
.IP "feature_is_enabled" 4
.IX Xref "feature_is_enabled"
.IX Item "feature_is_enabled"
.IP "filter_gets" 4
.IX Xref "filter_gets"
.IX Item "filter_gets"
.IP "find_and_forget_pmops" 4
.IX Xref "find_and_forget_pmops"
.IX Item "find_and_forget_pmops"
.IP "find_array_subscript" 4
.IX Xref "find_array_subscript"
.IX Item "find_array_subscript"
.IP "find_beginning" 4
.IX Xref "find_beginning"
.IX Item "find_beginning"
.IP "find_byclass" 4
.IX Xref "find_byclass"
.IX Item "find_byclass"
.IP "find_hash_subscript" 4
.IX Xref "find_hash_subscript"
.IX Item "find_hash_subscript"
.IP "find_in_my_stash" 4
.IX Xref "find_in_my_stash"
.IX Item "find_in_my_stash"
.IP "find_script" 4
.IX Xref "find_script"
.IX Item "find_script"
.IP "first_symbol" 4
.IX Xref "first_symbol"
.IX Item "first_symbol"
.IP "fold_constants" 4
.IX Xref "fold_constants"
.IX Item "fold_constants"
.IP "forbid_setid" 4
.IX Xref "forbid_setid"
.IX Item "forbid_setid"
.IP "force_ident" 4
.IX Xref "force_ident"
.IX Item "force_ident"
.IP "force_list" 4
.IX Xref "force_list"
.IX Item "force_list"
.IP "force_next" 4
.IX Xref "force_next"
.IX Item "force_next"
.IP "force_strict_version" 4
.IX Xref "force_strict_version"
.IX Item "force_strict_version"
.IP "force_version" 4
.IX Xref "force_version"
.IX Item "force_version"
.IP "force_word" 4
.IX Xref "force_word"
.IX Item "force_word"
.IP "forget_pmop" 4
.IX Xref "forget_pmop"
.IX Item "forget_pmop"
.IP "free_tied_hv_pool" 4
.IX Xref "free_tied_hv_pool"
.IX Item "free_tied_hv_pool"
.IP "gen_constant_list" 4
.IX Xref "gen_constant_list"
.IX Item "gen_constant_list"
.IP "get_arena" 4
.IX Xref "get_arena"
.IX Item "get_arena"
.IP "get_aux_mg" 4
.IX Xref "get_aux_mg"
.IX Item "get_aux_mg"
.IP "get_db_sub" 4
.IX Xref "get_db_sub"
.IX Item "get_db_sub"
.IP "get_debug_opts" 4
.IX Xref "get_debug_opts"
.IX Item "get_debug_opts"
.IP "get_hash_seed" 4
.IX Xref "get_hash_seed"
.IX Item "get_hash_seed"
.IP "get_isa_hash" 4
.IX Xref "get_isa_hash"
.IX Item "get_isa_hash"
.IP "get_no_modify" 4
.IX Xref "get_no_modify"
.IX Item "get_no_modify"
.IP "get_num" 4
.IX Xref "get_num"
.IX Item "get_num"
.IP "get_opargs" 4
.IX Xref "get_opargs"
.IX Item "get_opargs"
.IP "get_re_arg" 4
.IX Xref "get_re_arg"
.IX Item "get_re_arg"
.IP "getenv_len" 4
.IX Xref "getenv_len"
.IX Item "getenv_len"
.IP "glob_2number" 4
.IX Xref "glob_2number"
.IX Item "glob_2number"
.IP "glob_assign_glob" 4
.IX Xref "glob_assign_glob"
.IX Item "glob_assign_glob"
.IP "glob_assign_ref" 4
.IX Xref "glob_assign_ref"
.IX Item "glob_assign_ref"
.IP "group_end" 4
.IX Xref "group_end"
.IX Item "group_end"
.IP "gv_ename" 4
.IX Xref "gv_ename"
.IX Item "gv_ename"
.IP "gv_get_super_pkg" 4
.IX Xref "gv_get_super_pkg"
.IX Item "gv_get_super_pkg"
.IP "gv_init_sv" 4
.IX Xref "gv_init_sv"
.IX Item "gv_init_sv"
.IP "hfreeentries" 4
.IX Xref "hfreeentries"
.IX Item "hfreeentries"
.IP "hsplit" 4
.IX Xref "hsplit"
.IX Item "hsplit"
.IP "hv_auxinit" 4
.IX Xref "hv_auxinit"
.IX Item "hv_auxinit"
.IP "hv_backreferences_p" 4
.IX Xref "hv_backreferences_p"
.IX Item "hv_backreferences_p"
.IP "hv_copy_hints_hv" 4
.IX Xref "hv_copy_hints_hv"
.IX Item "hv_copy_hints_hv"
.IP "hv_delete_common" 4
.IX Xref "hv_delete_common"
.IX Item "hv_delete_common"
.IP "hv_kill_backrefs" 4
.IX Xref "hv_kill_backrefs"
.IX Item "hv_kill_backrefs"
.IP "hv_magic_check" 4
.IX Xref "hv_magic_check"
.IX Item "hv_magic_check"
.IP "hv_notallowed" 4
.IX Xref "hv_notallowed"
.IX Item "hv_notallowed"
.IP "incline" 4
.IX Xref "incline"
.IX Item "incline"
.IP "incpush" 4
.IX Xref "incpush"
.IX Item "incpush"
.IP "incpush_if_exists" 4
.IX Xref "incpush_if_exists"
.IX Item "incpush_if_exists"
.IP "incpush_use_sep" 4
.IX Xref "incpush_use_sep"
.IX Item "incpush_use_sep"
.IP "ingroup" 4
.IX Xref "ingroup"
.IX Item "ingroup"
.IP "init_argv_symbols" 4
.IX Xref "init_argv_symbols"
.IX Item "init_argv_symbols"
.IP "init_dbargs" 4
.IX Xref "init_dbargs"
.IX Item "init_dbargs"
.IP "init_debugger" 4
.IX Xref "init_debugger"
.IX Item "init_debugger"
.IP "init_ids" 4
.IX Xref "init_ids"
.IX Item "init_ids"
.IP "init_interp" 4
.IX Xref "init_interp"
.IX Item "init_interp"
.IP "init_main_stash" 4
.IX Xref "init_main_stash"
.IX Item "init_main_stash"
.IP "init_perllib" 4
.IX Xref "init_perllib"
.IX Item "init_perllib"
.IP "init_postdump_symbols" 4
.IX Xref "init_postdump_symbols"
.IX Item "init_postdump_symbols"
.IP "init_predump_symbols" 4
.IX Xref "init_predump_symbols"
.IX Item "init_predump_symbols"
.IP "intuit_method" 4
.IX Xref "intuit_method"
.IX Item "intuit_method"
.IP "intuit_more" 4
.IX Xref "intuit_more"
.IX Item "intuit_more"
.IP "invert" 4
.IX Xref "invert"
.IX Item "invert"
.IP "io_close" 4
.IX Xref "io_close"
.IX Item "io_close"
.IP "is_an_int" 4
.IX Xref "is_an_int"
.IX Item "is_an_int"
.IP "is_handle_constructor" 4
.IX Xref "is_handle_constructor"
.IX Item "is_handle_constructor"
.IP "is_inplace_av" 4
.IX Xref "is_inplace_av"
.IX Item "is_inplace_av"
.IP "is_list_assignment" 4
.IX Xref "is_list_assignment"
.IX Item "is_list_assignment"
.IP "is_utf8_X_L" 4
.IX Xref "is_utf8_X_L"
.IX Item "is_utf8_X_L"
.IP "is_utf8_X_LV" 4
.IX Xref "is_utf8_X_LV"
.IX Item "is_utf8_X_LV"
.IP "is_utf8_X_LVT" 4
.IX Xref "is_utf8_X_LVT"
.IX Item "is_utf8_X_LVT"
.IP "is_utf8_X_LV_LVT_V" 4
.IX Xref "is_utf8_X_LV_LVT_V"
.IX Item "is_utf8_X_LV_LVT_V"
.IP "is_utf8_X_T" 4
.IX Xref "is_utf8_X_T"
.IX Item "is_utf8_X_T"
.IP "is_utf8_X_V" 4
.IX Xref "is_utf8_X_V"
.IX Item "is_utf8_X_V"
.IP "is_utf8_X_begin" 4
.IX Xref "is_utf8_X_begin"
.IX Item "is_utf8_X_begin"
.IP "is_utf8_X_extend" 4
.IX Xref "is_utf8_X_extend"
.IX Item "is_utf8_X_extend"
.IP "is_utf8_X_non_hangul" 4
.IX Xref "is_utf8_X_non_hangul"
.IX Item "is_utf8_X_non_hangul"
.IP "is_utf8_X_prepend" 4
.IX Xref "is_utf8_X_prepend"
.IX Item "is_utf8_X_prepend"
.IP "is_utf8_char_slow" 4
.IX Xref "is_utf8_char_slow"
.IX Item "is_utf8_char_slow"
.IP "is_utf8_common" 4
.IX Xref "is_utf8_common"
.IX Item "is_utf8_common"
.IP "isa_lookup" 4
.IX Xref "isa_lookup"
.IX Item "isa_lookup"
.IP "jmaybe" 4
.IX Xref "jmaybe"
.IX Item "jmaybe"
.IP "join_exact" 4
.IX Xref "join_exact"
.IX Item "join_exact"
.IP "keyword" 4
.IX Xref "keyword"
.IX Item "keyword"
.IP "keyword_plugin_standard" 4
.IX Xref "keyword_plugin_standard"
.IX Item "keyword_plugin_standard"
.IP "lex_end" 4
.IX Xref "lex_end"
.IX Item "lex_end"
.IP "lex_start" 4
.IX Xref "lex_start"
.IX Item "lex_start"
.IP "linklist" 4
.IX Xref "linklist"
.IX Item "linklist"
.IP "list" 4
.IX Xref "list"
.IX Item "list"
.IP "listkids" 4
.IX Xref "listkids"
.IX Item "listkids"
.IP "localize" 4
.IX Xref "localize"
.IX Item "localize"
.IP "looks_like_bool" 4
.IX Xref "looks_like_bool"
.IX Item "looks_like_bool"
.IP "lop" 4
.IX Xref "lop"
.IX Item "lop"
.IP "mad_free" 4
.IX Xref "mad_free"
.IX Item "mad_free"
.IP "madlex" 4
.IX Xref "madlex"
.IX Item "madlex"
.IP "madparse" 4
.IX Xref "madparse"
.IX Item "madparse"
.IP "magic_clear_all_env" 4
.IX Xref "magic_clear_all_env"
.IX Item "magic_clear_all_env"
.IP "magic_clearenv" 4
.IX Xref "magic_clearenv"
.IX Item "magic_clearenv"
.IP "magic_clearisa" 4
.IX Xref "magic_clearisa"
.IX Item "magic_clearisa"
.IP "magic_clearpack" 4
.IX Xref "magic_clearpack"
.IX Item "magic_clearpack"
.IP "magic_clearsig" 4
.IX Xref "magic_clearsig"
.IX Item "magic_clearsig"
.IP "magic_existspack" 4
.IX Xref "magic_existspack"
.IX Item "magic_existspack"
.IP "magic_freearylen_p" 4
.IX Xref "magic_freearylen_p"
.IX Item "magic_freearylen_p"
.IP "magic_freeovrld" 4
.IX Xref "magic_freeovrld"
.IX Item "magic_freeovrld"
.IP "magic_get" 4
.IX Xref "magic_get"
.IX Item "magic_get"
.IP "magic_getarylen" 4
.IX Xref "magic_getarylen"
.IX Item "magic_getarylen"
.IP "magic_getdefelem" 4
.IX Xref "magic_getdefelem"
.IX Item "magic_getdefelem"
.IP "magic_getnkeys" 4
.IX Xref "magic_getnkeys"
.IX Item "magic_getnkeys"
.IP "magic_getpack" 4
.IX Xref "magic_getpack"
.IX Item "magic_getpack"
.IP "magic_getpos" 4
.IX Xref "magic_getpos"
.IX Item "magic_getpos"
.IP "magic_getsig" 4
.IX Xref "magic_getsig"
.IX Item "magic_getsig"
.IP "magic_getsubstr" 4
.IX Xref "magic_getsubstr"
.IX Item "magic_getsubstr"
.IP "magic_gettaint" 4
.IX Xref "magic_gettaint"
.IX Item "magic_gettaint"
.IP "magic_getuvar" 4
.IX Xref "magic_getuvar"
.IX Item "magic_getuvar"
.IP "magic_getvec" 4
.IX Xref "magic_getvec"
.IX Item "magic_getvec"
.IP "magic_killbackrefs" 4
.IX Xref "magic_killbackrefs"
.IX Item "magic_killbackrefs"
.IP "magic_len" 4
.IX Xref "magic_len"
.IX Item "magic_len"
.IP "magic_methcall" 4
.IX Xref "magic_methcall"
.IX Item "magic_methcall"
.IP "magic_methpack" 4
.IX Xref "magic_methpack"
.IX Item "magic_methpack"
.IP "magic_nextpack" 4
.IX Xref "magic_nextpack"
.IX Item "magic_nextpack"
.IP "magic_regdata_cnt" 4
.IX Xref "magic_regdata_cnt"
.IX Item "magic_regdata_cnt"
.IP "magic_regdatum_get" 4
.IX Xref "magic_regdatum_get"
.IX Item "magic_regdatum_get"
.IP "magic_regdatum_set" 4
.IX Xref "magic_regdatum_set"
.IX Item "magic_regdatum_set"
.IP "magic_scalarpack" 4
.IX Xref "magic_scalarpack"
.IX Item "magic_scalarpack"
.IP "magic_set" 4
.IX Xref "magic_set"
.IX Item "magic_set"
.IP "magic_set_all_env" 4
.IX Xref "magic_set_all_env"
.IX Item "magic_set_all_env"
.IP "magic_setamagic" 4
.IX Xref "magic_setamagic"
.IX Item "magic_setamagic"
.IP "magic_setarylen" 4
.IX Xref "magic_setarylen"
.IX Item "magic_setarylen"
.IP "magic_setcollxfrm" 4
.IX Xref "magic_setcollxfrm"
.IX Item "magic_setcollxfrm"
.IP "magic_setdbline" 4
.IX Xref "magic_setdbline"
.IX Item "magic_setdbline"
.IP "magic_setdefelem" 4
.IX Xref "magic_setdefelem"
.IX Item "magic_setdefelem"
.IP "magic_setenv" 4
.IX Xref "magic_setenv"
.IX Item "magic_setenv"
.IP "magic_setisa" 4
.IX Xref "magic_setisa"
.IX Item "magic_setisa"
.IP "magic_setmglob" 4
.IX Xref "magic_setmglob"
.IX Item "magic_setmglob"
.IP "magic_setnkeys" 4
.IX Xref "magic_setnkeys"
.IX Item "magic_setnkeys"
.IP "magic_setpack" 4
.IX Xref "magic_setpack"
.IX Item "magic_setpack"
.IP "magic_setpos" 4
.IX Xref "magic_setpos"
.IX Item "magic_setpos"
.IP "magic_setregexp" 4
.IX Xref "magic_setregexp"
.IX Item "magic_setregexp"
.IP "magic_setsig" 4
.IX Xref "magic_setsig"
.IX Item "magic_setsig"
.IP "magic_setsubstr" 4
.IX Xref "magic_setsubstr"
.IX Item "magic_setsubstr"
.IP "magic_settaint" 4
.IX Xref "magic_settaint"
.IX Item "magic_settaint"
.IP "magic_setutf8" 4
.IX Xref "magic_setutf8"
.IX Item "magic_setutf8"
.IP "magic_setuvar" 4
.IX Xref "magic_setuvar"
.IX Item "magic_setuvar"
.IP "magic_setvec" 4
.IX Xref "magic_setvec"
.IX Item "magic_setvec"
.IP "magic_sizepack" 4
.IX Xref "magic_sizepack"
.IX Item "magic_sizepack"
.IP "magic_wipepack" 4
.IX Xref "magic_wipepack"
.IX Item "magic_wipepack"
.IP "make_matcher" 4
.IX Xref "make_matcher"
.IX Item "make_matcher"
.IP "make_trie" 4
.IX Xref "make_trie"
.IX Item "make_trie"
.IP "make_trie_failtable" 4
.IX Xref "make_trie_failtable"
.IX Item "make_trie_failtable"
.IP "malloc_good_size" 4
.IX Xref "malloc_good_size"
.IX Item "malloc_good_size"
.IP "malloced_size" 4
.IX Xref "malloced_size"
.IX Item "malloced_size"
.IP "matcher_matches_sv" 4
.IX Xref "matcher_matches_sv"
.IX Item "matcher_matches_sv"
.IP "measure_struct" 4
.IX Xref "measure_struct"
.IX Item "measure_struct"
.IP "mem_collxfrm" 4
.IX Xref "mem_collxfrm"
.IX Item "mem_collxfrm"
.IP "mem_log_common" 4
.IX Xref "mem_log_common"
.IX Item "mem_log_common"
.IP "mess_alloc" 4
.IX Xref "mess_alloc"
.IX Item "mess_alloc"
.IP "method_common" 4
.IX Xref "method_common"
.IX Item "method_common"
.IP "missingterm" 4
.IX Xref "missingterm"
.IX Item "missingterm"
.IP "mod" 4
.IX Xref "mod"
.IX Item "mod"
.IP "mode_from_discipline" 4
.IX Xref "mode_from_discipline"
.IX Item "mode_from_discipline"
.IP "modkids" 4
.IX Xref "modkids"
.IX Item "modkids"
.IP "more_bodies" 4
.IX Xref "more_bodies"
.IX Item "more_bodies"
.IP "more_sv" 4
.IX Xref "more_sv"
.IX Item "more_sv"
.IP "mro_meta_dup" 4
.IX Xref "mro_meta_dup"
.IX Item "mro_meta_dup"
.IP "mro_meta_init" 4
.IX Xref "mro_meta_init"
.IX Item "mro_meta_init"
.IP "mul128" 4
.IX Xref "mul128"
.IX Item "mul128"
.IP "mulexp10" 4
.IX Xref "mulexp10"
.IX Item "mulexp10"
.IP "my_attrs" 4
.IX Xref "my_attrs"
.IX Item "my_attrs"
.IP "my_betoh16" 4
.IX Xref "my_betoh16"
.IX Item "my_betoh16"
.IP "my_betoh32" 4
.IX Xref "my_betoh32"
.IX Item "my_betoh32"
.IP "my_betoh64" 4
.IX Xref "my_betoh64"
.IX Item "my_betoh64"
.IP "my_betohi" 4
.IX Xref "my_betohi"
.IX Item "my_betohi"
.IP "my_betohl" 4
.IX Xref "my_betohl"
.IX Item "my_betohl"
.IP "my_betohs" 4
.IX Xref "my_betohs"
.IX Item "my_betohs"
.IP "my_clearenv" 4
.IX Xref "my_clearenv"
.IX Item "my_clearenv"
.IP "my_exit_jump" 4
.IX Xref "my_exit_jump"
.IX Item "my_exit_jump"
.IP "my_htobe16" 4
.IX Xref "my_htobe16"
.IX Item "my_htobe16"
.IP "my_htobe32" 4
.IX Xref "my_htobe32"
.IX Item "my_htobe32"
.IP "my_htobe64" 4
.IX Xref "my_htobe64"
.IX Item "my_htobe64"
.IP "my_htobei" 4
.IX Xref "my_htobei"
.IX Item "my_htobei"
.IP "my_htobel" 4
.IX Xref "my_htobel"
.IX Item "my_htobel"
.IP "my_htobes" 4
.IX Xref "my_htobes"
.IX Item "my_htobes"
.IP "my_htole16" 4
.IX Xref "my_htole16"
.IX Item "my_htole16"
.IP "my_htole32" 4
.IX Xref "my_htole32"
.IX Item "my_htole32"
.IP "my_htole64" 4
.IX Xref "my_htole64"
.IX Item "my_htole64"
.IP "my_htolei" 4
.IX Xref "my_htolei"
.IX Item "my_htolei"
.IP "my_htolel" 4
.IX Xref "my_htolel"
.IX Item "my_htolel"
.IP "my_htoles" 4
.IX Xref "my_htoles"
.IX Item "my_htoles"
.IP "my_kid" 4
.IX Xref "my_kid"
.IX Item "my_kid"
.IP "my_letoh16" 4
.IX Xref "my_letoh16"
.IX Item "my_letoh16"
.IP "my_letoh32" 4
.IX Xref "my_letoh32"
.IX Item "my_letoh32"
.IP "my_letoh64" 4
.IX Xref "my_letoh64"
.IX Item "my_letoh64"
.IP "my_letohi" 4
.IX Xref "my_letohi"
.IX Item "my_letohi"
.IP "my_letohl" 4
.IX Xref "my_letohl"
.IX Item "my_letohl"
.IP "my_letohs" 4
.IX Xref "my_letohs"
.IX Item "my_letohs"
.IP "my_swabn" 4
.IX Xref "my_swabn"
.IX Item "my_swabn"
.IP "my_unexec" 4
.IX Xref "my_unexec"
.IX Item "my_unexec"
.IP "need_utf8" 4
.IX Xref "need_utf8"
.IX Item "need_utf8"
.IP "newDEFSVOP" 4
.IX Xref "newDEFSVOP"
.IX Item "newDEFSVOP"
.IP "newGIVWHENOP" 4
.IX Xref "newGIVWHENOP"
.IX Item "newGIVWHENOP"
.IP "newGP" 4
.IX Xref "newGP"
.IX Item "newGP"
.IP "newMADPROP" 4
.IX Xref "newMADPROP"
.IX Item "newMADPROP"
.IP "newMADsv" 4
.IX Xref "newMADsv"
.IX Item "newMADsv"
.IP "newTOKEN" 4
.IX Xref "newTOKEN"
.IX Item "newTOKEN"
.IP "new_constant" 4
.IX Xref "new_constant"
.IX Item "new_constant"
.IP "new_he" 4
.IX Xref "new_he"
.IX Item "new_he"
.IP "new_logop" 4
.IX Xref "new_logop"
.IX Item "new_logop"
.IP "new_warnings_bitfield" 4
.IX Xref "new_warnings_bitfield"
.IX Item "new_warnings_bitfield"
.IP "next_symbol" 4
.IX Xref "next_symbol"
.IX Item "next_symbol"
.IP "nextargv" 4
.IX Xref "nextargv"
.IX Item "nextargv"
.IP "nextchar" 4
.IX Xref "nextchar"
.IX Item "nextchar"
.IP "no_bareword_allowed" 4
.IX Xref "no_bareword_allowed"
.IX Item "no_bareword_allowed"
.IP "no_fh_allowed" 4
.IX Xref "no_fh_allowed"
.IX Item "no_fh_allowed"
.IP "no_op" 4
.IX Xref "no_op"
.IX Item "no_op"
.IP "not_a_number" 4
.IX Xref "not_a_number"
.IX Item "not_a_number"
.IP "nuke_stacks" 4
.IX Xref "nuke_stacks"
.IX Item "nuke_stacks"
.IP "num_overflow" 4
.IX Xref "num_overflow"
.IX Item "num_overflow"
.IP "offer_nice_chunk" 4
.IX Xref "offer_nice_chunk"
.IX Item "offer_nice_chunk"
.IP "oopsAV" 4
.IX Xref "oopsAV"
.IX Item "oopsAV"
.IP "oopsHV" 4
.IX Xref "oopsHV"
.IX Item "oopsHV"
.IP "op_clear" 4
.IX Xref "op_clear"
.IX Item "op_clear"
.IP "op_const_sv" 4
.IX Xref "op_const_sv"
.IX Item "op_const_sv"
.IP "op_getmad" 4
.IX Xref "op_getmad"
.IX Item "op_getmad"
.IP "op_getmad_weak" 4
.IX Xref "op_getmad_weak"
.IX Item "op_getmad_weak"
.IP "op_refcnt_dec" 4
.IX Xref "op_refcnt_dec"
.IX Item "op_refcnt_dec"
.IP "op_refcnt_inc" 4
.IX Xref "op_refcnt_inc"
.IX Item "op_refcnt_inc"
.IP "op_xmldump" 4
.IX Xref "op_xmldump"
.IX Item "op_xmldump"
.IP "open_script" 4
.IX Xref "open_script"
.IX Item "open_script"
.IP "opt_scalarhv" 4
.IX Xref "opt_scalarhv"
.IX Item "opt_scalarhv"
.IP "pack_rec" 4
.IX Xref "pack_rec"
.IX Item "pack_rec"
.IP "package" 4
.IX Xref "package"
.IX Item "package"
.IP "package_version" 4
.IX Xref "package_version"
.IX Item "package_version"
.IP "pad_add_name_sv" 4
.IX Xref "pad_add_name_sv"
.IX Item "pad_add_name_sv"
.IP "pad_compname_type" 4
.IX Xref "pad_compname_type"
.IX Item "pad_compname_type"
.IP "pad_peg" 4
.IX Xref "pad_peg"
.IX Item "pad_peg"
.IP "parse_body" 4
.IX Xref "parse_body"
.IX Item "parse_body"
.IP "parse_unicode_opts" 4
.IX Xref "parse_unicode_opts"
.IX Item "parse_unicode_opts"
.IP "parser_free" 4
.IX Xref "parser_free"
.IX Item "parser_free"
.IP "path_is_absolute" 4
.IX Xref "path_is_absolute"
.IX Item "path_is_absolute"
.IP "peep" 4
.IX Xref "peep"
.IX Item "peep"
.IP "pending_Slabs_to_ro" 4
.IX Xref "pending_Slabs_to_ro"
.IX Item "pending_Slabs_to_ro"
.IP "pidgone" 4
.IX Xref "pidgone"
.IX Item "pidgone"
.IP "pm_description" 4
.IX Xref "pm_description"
.IX Item "pm_description"
.IP "pmflag" 4
.IX Xref "pmflag"
.IX Item "pmflag"
.IP "pmop_xmldump" 4
.IX Xref "pmop_xmldump"
.IX Item "pmop_xmldump"
.IP "pmruntime" 4
.IX Xref "pmruntime"
.IX Item "pmruntime"
.IP "pmtrans" 4
.IX Xref "pmtrans"
.IX Item "pmtrans"
.IP "prepend_elem" 4
.IX Xref "prepend_elem"
.IX Item "prepend_elem"
.IP "prepend_madprops" 4
.IX Xref "prepend_madprops"
.IX Item "prepend_madprops"
.IP "printbuf" 4
.IX Xref "printbuf"
.IX Item "printbuf"
.IP "process_special_blocks" 4
.IX Xref "process_special_blocks"
.IX Item "process_special_blocks"
.IP "ptr_table_find" 4
.IX Xref "ptr_table_find"
.IX Item "ptr_table_find"
.IP "put_byte" 4
.IX Xref "put_byte"
.IX Item "put_byte"
.IP "qerror" 4
.IX Xref "qerror"
.IX Item "qerror"
.IP "qsortsvu" 4
.IX Xref "qsortsvu"
.IX Item "qsortsvu"
.IP "re_croak2" 4
.IX Xref "re_croak2"
.IX Item "re_croak2"
.IP "readpipe_override" 4
.IX Xref "readpipe_override"
.IX Item "readpipe_override"
.IP "ref_array_or_hash" 4
.IX Xref "ref_array_or_hash"
.IX Item "ref_array_or_hash"
.IP "refcounted_he_fetch" 4
.IX Xref "refcounted_he_fetch"
.IX Item "refcounted_he_fetch"
.IP "refcounted_he_new_common" 4
.IX Xref "refcounted_he_new_common"
.IX Item "refcounted_he_new_common"
.IP "refcounted_he_value" 4
.IX Xref "refcounted_he_value"
.IX Item "refcounted_he_value"
.IP "refkids" 4
.IX Xref "refkids"
.IX Item "refkids"
.IP "refto" 4
.IX Xref "refto"
.IX Item "refto"
.IP "reg" 4
.IX Xref "reg"
.IX Item "reg"
.IP "reg_check_named_buff_matched" 4
.IX Xref "reg_check_named_buff_matched"
.IX Item "reg_check_named_buff_matched"
.IP "reg_named_buff" 4
.IX Xref "reg_named_buff"
.IX Item "reg_named_buff"
.IP "reg_named_buff_iter" 4
.IX Xref "reg_named_buff_iter"
.IX Item "reg_named_buff_iter"
.IP "reg_namedseq" 4
.IX Xref "reg_namedseq"
.IX Item "reg_namedseq"
.IP "reg_node" 4
.IX Xref "reg_node"
.IX Item "reg_node"
.IP "reg_numbered_buff_fetch" 4
.IX Xref "reg_numbered_buff_fetch"
.IX Item "reg_numbered_buff_fetch"
.IP "reg_numbered_buff_length" 4
.IX Xref "reg_numbered_buff_length"
.IX Item "reg_numbered_buff_length"
.IP "reg_numbered_buff_store" 4
.IX Xref "reg_numbered_buff_store"
.IX Item "reg_numbered_buff_store"
.IP "reg_qr_package" 4
.IX Xref "reg_qr_package"
.IX Item "reg_qr_package"
.IP "reg_recode" 4
.IX Xref "reg_recode"
.IX Item "reg_recode"
.IP "reg_scan_name" 4
.IX Xref "reg_scan_name"
.IX Item "reg_scan_name"
.IP "reg_skipcomment" 4
.IX Xref "reg_skipcomment"
.IX Item "reg_skipcomment"
.IP "reg_temp_copy" 4
.IX Xref "reg_temp_copy"
.IX Item "reg_temp_copy"
.IP "reganode" 4
.IX Xref "reganode"
.IX Item "reganode"
.IP "regatom" 4
.IX Xref "regatom"
.IX Item "regatom"
.IP "regbranch" 4
.IX Xref "regbranch"
.IX Item "regbranch"
.IP "regclass" 4
.IX Xref "regclass"
.IX Item "regclass"
.IP "regcppop" 4
.IX Xref "regcppop"
.IX Item "regcppop"
.IP "regcppush" 4
.IX Xref "regcppush"
.IX Item "regcppush"
.IP "regcurly" 4
.IX Xref "regcurly"
.IX Item "regcurly"
.IP "regdump_extflags" 4
.IX Xref "regdump_extflags"
.IX Item "regdump_extflags"
.IP "reghop3" 4
.IX Xref "reghop3"
.IX Item "reghop3"
.IP "reghop4" 4
.IX Xref "reghop4"
.IX Item "reghop4"
.IP "reghopmaybe3" 4
.IX Xref "reghopmaybe3"
.IX Item "reghopmaybe3"
.IP "reginclass" 4
.IX Xref "reginclass"
.IX Item "reginclass"
.IP "reginsert" 4
.IX Xref "reginsert"
.IX Item "reginsert"
.IP "regmatch" 4
.IX Xref "regmatch"
.IX Item "regmatch"
.IP "regpiece" 4
.IX Xref "regpiece"
.IX Item "regpiece"
.IP "regpposixcc" 4
.IX Xref "regpposixcc"
.IX Item "regpposixcc"
.IP "regprop" 4
.IX Xref "regprop"
.IX Item "regprop"
.IP "regrepeat" 4
.IX Xref "regrepeat"
.IX Item "regrepeat"
.IP "regtail" 4
.IX Xref "regtail"
.IX Item "regtail"
.IP "regtail_study" 4
.IX Xref "regtail_study"
.IX Item "regtail_study"
.IP "regtry" 4
.IX Xref "regtry"
.IX Item "regtry"
.IP "reguni" 4
.IX Xref "reguni"
.IX Item "reguni"
.IP "regwhite" 4
.IX Xref "regwhite"
.IX Item "regwhite"
.IP "report_evil_fh" 4
.IX Xref "report_evil_fh"
.IX Item "report_evil_fh"
.IP "require_tie_mod" 4
.IX Xref "require_tie_mod"
.IX Item "require_tie_mod"
.IP "restore_magic" 4
.IX Xref "restore_magic"
.IX Item "restore_magic"
.IP "rsignal_restore" 4
.IX Xref "rsignal_restore"
.IX Item "rsignal_restore"
.IP "rsignal_save" 4
.IX Xref "rsignal_save"
.IX Item "rsignal_save"
.IP "run_body" 4
.IX Xref "run_body"
.IX Item "run_body"
.IP "run_user_filter" 4
.IX Xref "run_user_filter"
.IX Item "run_user_filter"
.IP "rxres_free" 4
.IX Xref "rxres_free"
.IX Item "rxres_free"
.IP "rxres_restore" 4
.IX Xref "rxres_restore"
.IX Item "rxres_restore"
.IP "rxres_save" 4
.IX Xref "rxres_save"
.IX Item "rxres_save"
.IP "same_dirent" 4
.IX Xref "same_dirent"
.IX Item "same_dirent"
.IP "save_freeop" 4
.IX Xref "save_freeop"
.IX Item "save_freeop"
.IP "save_hek_flags" 4
.IX Xref "save_hek_flags"
.IX Item "save_hek_flags"
.IP "save_hints" 4
.IX Xref "save_hints"
.IX Item "save_hints"
.IP "save_lines" 4
.IX Xref "save_lines"
.IX Item "save_lines"
.IP "save_magic" 4
.IX Xref "save_magic"
.IX Item "save_magic"
.IP "save_op" 4
.IX Xref "save_op"
.IX Item "save_op"
.IP "save_pushi32ptr" 4
.IX Xref "save_pushi32ptr"
.IX Item "save_pushi32ptr"
.IP "save_pushptri32ptr" 4
.IX Xref "save_pushptri32ptr"
.IX Item "save_pushptri32ptr"
.IP "save_pushptrptr" 4
.IX Xref "save_pushptrptr"
.IX Item "save_pushptrptr"
.IP "save_scalar_at" 4
.IX Xref "save_scalar_at"
.IX Item "save_scalar_at"
.IP "sawparens" 4
.IX Xref "sawparens"
.IX Item "sawparens"
.IP "scalar" 4
.IX Xref "scalar"
.IX Item "scalar"
.IP "scalar_mod_type" 4
.IX Xref "scalar_mod_type"
.IX Item "scalar_mod_type"
.IP "scalarboolean" 4
.IX Xref "scalarboolean"
.IX Item "scalarboolean"
.IP "scalarkids" 4
.IX Xref "scalarkids"
.IX Item "scalarkids"
.IP "scalarseq" 4
.IX Xref "scalarseq"
.IX Item "scalarseq"
.IP "scalarvoid" 4
.IX Xref "scalarvoid"
.IX Item "scalarvoid"
.IP "scan_commit" 4
.IX Xref "scan_commit"
.IX Item "scan_commit"
.IP "scan_const" 4
.IX Xref "scan_const"
.IX Item "scan_const"
.IP "scan_formline" 4
.IX Xref "scan_formline"
.IX Item "scan_formline"
.IP "scan_heredoc" 4
.IX Xref "scan_heredoc"
.IX Item "scan_heredoc"
.IP "scan_ident" 4
.IX Xref "scan_ident"
.IX Item "scan_ident"
.IP "scan_inputsymbol" 4
.IX Xref "scan_inputsymbol"
.IX Item "scan_inputsymbol"
.IP "scan_pat" 4
.IX Xref "scan_pat"
.IX Item "scan_pat"
.IP "scan_str" 4
.IX Xref "scan_str"
.IX Item "scan_str"
.IP "scan_subst" 4
.IX Xref "scan_subst"
.IX Item "scan_subst"
.IP "scan_trans" 4
.IX Xref "scan_trans"
.IX Item "scan_trans"
.IP "scan_word" 4
.IX Xref "scan_word"
.IX Item "scan_word"
.IP "scope" 4
.IX Xref "scope"
.IX Item "scope"
.IP "search_const" 4
.IX Xref "search_const"
.IX Item "search_const"
.IP "sequence" 4
.IX Xref "sequence"
.IX Item "sequence"
.IP "sequence_num" 4
.IX Xref "sequence_num"
.IX Item "sequence_num"
.IP "sequence_tail" 4
.IX Xref "sequence_tail"
.IX Item "sequence_tail"
.IP "share_hek_flags" 4
.IX Xref "share_hek_flags"
.IX Item "share_hek_flags"
.IP "sighandler" 4
.IX Xref "sighandler"
.IX Item "sighandler"
.IP "simplify_sort" 4
.IX Xref "simplify_sort"
.IX Item "simplify_sort"
.IP "skipspace" 4
.IX Xref "skipspace"
.IX Item "skipspace"
.IP "skipspace0" 4
.IX Xref "skipspace0"
.IX Item "skipspace0"
.IP "skipspace1" 4
.IX Xref "skipspace1"
.IX Item "skipspace1"
.IP "skipspace2" 4
.IX Xref "skipspace2"
.IX Item "skipspace2"
.IP "softref2xv" 4
.IX Xref "softref2xv"
.IX Item "softref2xv"
.IP "sortcv" 4
.IX Xref "sortcv"
.IX Item "sortcv"
.IP "sortcv_stacked" 4
.IX Xref "sortcv_stacked"
.IX Item "sortcv_stacked"
.IP "sortcv_xsub" 4
.IX Xref "sortcv_xsub"
.IX Item "sortcv_xsub"
.IP "space_join_names_mortal" 4
.IX Xref "space_join_names_mortal"
.IX Item "space_join_names_mortal"
.IP "start_force" 4
.IX Xref "start_force"
.IX Item "start_force"
.IP "stdize_locale" 4
.IX Xref "stdize_locale"
.IX Item "stdize_locale"
.IP "store_cop_label" 4
.IX Xref "store_cop_label"
.IX Item "store_cop_label"
.IP "strip_return" 4
.IX Xref "strip_return"
.IX Item "strip_return"
.IP "study_chunk" 4
.IX Xref "study_chunk"
.IX Item "study_chunk"
.IP "sub_crush_depth" 4
.IX Xref "sub_crush_depth"
.IX Item "sub_crush_depth"
.IP "sublex_done" 4
.IX Xref "sublex_done"
.IX Item "sublex_done"
.IP "sublex_push" 4
.IX Xref "sublex_push"
.IX Item "sublex_push"
.IP "sublex_start" 4
.IX Xref "sublex_start"
.IX Item "sublex_start"
.IP "sv_2iuv_common" 4
.IX Xref "sv_2iuv_common"
.IX Item "sv_2iuv_common"
.IP "sv_2iuv_non_preserve" 4
.IX Xref "sv_2iuv_non_preserve"
.IX Item "sv_2iuv_non_preserve"
.IP "sv_add_backref" 4
.IX Xref "sv_add_backref"
.IX Item "sv_add_backref"
.IP "sv_catxmlpvn" 4
.IX Xref "sv_catxmlpvn"
.IX Item "sv_catxmlpvn"
.IP "sv_catxmlsv" 4
.IX Xref "sv_catxmlsv"
.IX Item "sv_catxmlsv"
.IP "sv_del_backref" 4
.IX Xref "sv_del_backref"
.IX Item "sv_del_backref"
.IP "sv_dup_inc_multiple" 4
.IX Xref "sv_dup_inc_multiple"
.IX Item "sv_dup_inc_multiple"
.IP "sv_exp_grow" 4
.IX Xref "sv_exp_grow"
.IX Item "sv_exp_grow"
.IP "sv_free2" 4
.IX Xref "sv_free2"
.IX Item "sv_free2"
.IP "sv_i_ncmp" 4
.IX Xref "sv_i_ncmp"
.IX Item "sv_i_ncmp"
.IP "sv_kill_backrefs" 4
.IX Xref "sv_kill_backrefs"
.IX Item "sv_kill_backrefs"
.IP "sv_ncmp" 4
.IX Xref "sv_ncmp"
.IX Item "sv_ncmp"
.IP "sv_pos_b2u_midway" 4
.IX Xref "sv_pos_b2u_midway"
.IX Item "sv_pos_b2u_midway"
.IP "sv_pos_u2b_cached" 4
.IX Xref "sv_pos_u2b_cached"
.IX Item "sv_pos_u2b_cached"
.IP "sv_pos_u2b_forwards" 4
.IX Xref "sv_pos_u2b_forwards"
.IX Item "sv_pos_u2b_forwards"
.IP "sv_pos_u2b_midway" 4
.IX Xref "sv_pos_u2b_midway"
.IX Item "sv_pos_u2b_midway"
.IP "sv_release_COW" 4
.IX Xref "sv_release_COW"
.IX Item "sv_release_COW"
.IP "sv_setsv_cow" 4
.IX Xref "sv_setsv_cow"
.IX Item "sv_setsv_cow"
.IP "sv_unglob" 4
.IX Xref "sv_unglob"
.IX Item "sv_unglob"
.IP "sv_xmlpeek" 4
.IX Xref "sv_xmlpeek"
.IX Item "sv_xmlpeek"
.IP "swallow_bom" 4
.IX Xref "swallow_bom"
.IX Item "swallow_bom"
.IP "swash_get" 4
.IX Xref "swash_get"
.IX Item "swash_get"
.IP "to_byte_substr" 4
.IX Xref "to_byte_substr"
.IX Item "to_byte_substr"
.IP "to_utf8_substr" 4
.IX Xref "to_utf8_substr"
.IX Item "to_utf8_substr"
.IP "token_free" 4
.IX Xref "token_free"
.IX Item "token_free"
.IP "token_getmad" 4
.IX Xref "token_getmad"
.IX Item "token_getmad"
.IP "tokenize_use" 4
.IX Xref "tokenize_use"
.IX Item "tokenize_use"
.IP "tokeq" 4
.IX Xref "tokeq"
.IX Item "tokeq"
.IP "tokereport" 4
.IX Xref "tokereport"
.IX Item "tokereport"
.IP "too_few_arguments" 4
.IX Xref "too_few_arguments"
.IX Item "too_few_arguments"
.IP "too_many_arguments" 4
.IX Xref "too_many_arguments"
.IX Item "too_many_arguments"
.IP "uiv_2buf" 4
.IX Xref "uiv_2buf"
.IX Item "uiv_2buf"
.IP "unpack_rec" 4
.IX Xref "unpack_rec"
.IX Item "unpack_rec"
.IP "unshare_hek" 4
.IX Xref "unshare_hek"
.IX Item "unshare_hek"
.IP "unshare_hek_or_pvn" 4
.IX Xref "unshare_hek_or_pvn"
.IX Item "unshare_hek_or_pvn"
.IP "unwind_handler_stack" 4
.IX Xref "unwind_handler_stack"
.IX Item "unwind_handler_stack"
.IP "update_debugger_info" 4
.IX Xref "update_debugger_info"
.IX Item "update_debugger_info"
.IP "usage" 4
.IX Xref "usage"
.IX Item "usage"
.IP "utf16_textfilter" 4
.IX Xref "utf16_textfilter"
.IX Item "utf16_textfilter"
.IP "utf8_mg_pos_cache_update" 4
.IX Xref "utf8_mg_pos_cache_update"
.IX Item "utf8_mg_pos_cache_update"
.IP "utilize" 4
.IX Xref "utilize"
.IX Item "utilize"
.IP "validate_suid" 4
.IX Xref "validate_suid"
.IX Item "validate_suid"
.IP "varname" 4
.IX Xref "varname"
.IX Item "varname"
.IP "vdie" 4
.IX Xref "vdie"
.IX Item "vdie"
.IP "vdie_common" 4
.IX Xref "vdie_common"
.IX Item "vdie_common"
.IP "vdie_croak_common" 4
.IX Xref "vdie_croak_common"
.IX Item "vdie_croak_common"
.IP "visit" 4
.IX Xref "visit"
.IX Item "visit"
.IP "vivify_defelem" 4
.IX Xref "vivify_defelem"
.IX Item "vivify_defelem"
.IP "vivify_ref" 4
.IX Xref "vivify_ref"
.IX Item "vivify_ref"
.IP "wait4pid" 4
.IX Xref "wait4pid"
.IX Item "wait4pid"
.IP "watch" 4
.IX Xref "watch"
.IX Item "watch"
.IP "write_no_mem" 4
.IX Xref "write_no_mem"
.IX Item "write_no_mem"
.IP "write_to_stderr" 4
.IX Xref "write_to_stderr"
.IX Item "write_to_stderr"
.IP "xmldump_all" 4
.IX Xref "xmldump_all"
.IX Item "xmldump_all"
.IP "xmldump_all_perl" 4
.IX Xref "xmldump_all_perl"
.IX Item "xmldump_all_perl"
.IP "xmldump_attr" 4
.IX Xref "xmldump_attr"
.IX Item "xmldump_attr"
.IP "xmldump_eval" 4
.IX Xref "xmldump_eval"
.IX Item "xmldump_eval"
.IP "xmldump_form" 4
.IX Xref "xmldump_form"
.IX Item "xmldump_form"
.IP "xmldump_indent" 4
.IX Xref "xmldump_indent"
.IX Item "xmldump_indent"
.IP "xmldump_packsubs" 4
.IX Xref "xmldump_packsubs"
.IX Item "xmldump_packsubs"
.IP "xmldump_packsubs_perl" 4
.IX Xref "xmldump_packsubs_perl"
.IX Item "xmldump_packsubs_perl"
.IP "xmldump_sub" 4
.IX Xref "xmldump_sub"
.IX Item "xmldump_sub"
.IP "xmldump_sub_perl" 4
.IX Xref "xmldump_sub_perl"
.IX Item "xmldump_sub_perl"
.IP "xmldump_vindent" 4
.IX Xref "xmldump_vindent"
.IX Item "xmldump_vindent"
.IP "yyerror" 4
.IX Xref "yyerror"
.IX Item "yyerror"
.IP "yylex" 4
.IX Xref "yylex"
.IX Item "yylex"
.IP "yyparse" 4
.IX Xref "yyparse"
.IX Item "yyparse"
.IP "yywarn" 4
.IX Xref "yywarn"
.IX Item "yywarn"
.PD
.SH "AUTHORS"
.IX Header "AUTHORS"
The autodocumentation system was originally added to the Perl core by
Benjamin Stuhl. Documentation is by whoever was kind enough to
document their functions.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlguts, perlapi
