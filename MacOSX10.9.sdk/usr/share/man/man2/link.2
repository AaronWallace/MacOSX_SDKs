.\"	$NetBSD: link.2,v 1.7 1995/02/27 12:34:01 cgd Exp $
.\"
.\" Copyright (c) 1980, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)link.2	8.3 (Berkeley) 1/12/94
.\"
.Dd October 29, 2008
.Dt LINK 2
.Os BSD 4
.Sh NAME
.Nm link
.Nd make a hard file link
.Sh SYNOPSIS
.Fd #include <unistd.h>
.Ft int
.Fo link
.Fa "const char *path1"
.Fa "const char *path2"
.Fc
.Sh DESCRIPTION
The
.Fn link
function call
atomically creates the specified directory entry (hard link)
.Fa path2
with the attributes of the underlying object pointed at by
.Fa path1 .
If the link is successful,
the link count of the underlying object is incremented;
.Fa path1
and
.Fa path2
share equal access and rights
to the
underlying object.
.Pp
If
.Fa path1
is removed, the file
.Fa path2
is not deleted and the link count of the
underlying object is
decremented.
.Pp
In order for the system call to succeed,
.Fa path1
must exist and both
.Fa path1
and
.Fa path2
must be in the same file system.
As mandated by POSIX.1,
.Fa path1
may not be a directory.
.Pp
.Fn link
will resolve and follow symbolic links contained within both
.Fa path1
and
.Fa path2 .
If the last component of
.Fa path1
is a symbolic link,
.Fn link
will point the hard link, 
.Fa path2 ,
to the underlying object pointed to by
.Fa path1 ,
not to the symbolic link itself.
.Sh RETURN VALUES
Upon successful completion, a value of 0 is returned.  Otherwise,
a value of -1 is returned and
.Va errno
is set to indicate the error.
.Sh ERRORS
.Fn Link
will fail and no link will be created if:
.Bl -tag -width Er
.\" ==========
.It Bq Er EACCES
A component of either path prefix denies search permission.
.\" ==========
.It Bq Er EACCES
The requested link requires writing in a directory with a mode
that denies write permission.
.\" ==========
.It Bq Er EACCES
The current process cannot access the existing file.
.\" ==========
.It Bq Er EDQUOT
The directory in which the entry for the new link
is being placed cannot be extended because the
user's quota of disk blocks on the file system
containing the directory has been exhausted.
.\" ==========
.It Bq Er EEXIST
The link named by
.Fa path2
already exists.
.\" ==========
.It Bq Er EFAULT
One of the pathnames specified
is outside the process's allocated address space.
.\" ==========
.It Bq Er EIO
An I/O error occurs while reading from or writing to 
the file system to make the directory entry.
.\" ==========
.It Bq Er ELOOP
Too many symbolic links are encountered in translating one of the pathnames.
This is taken to be indicative of a looping symbolic link.
.\" ==========
.It Bq Er EMLINK
The file already has {LINK_MAX} links.
.\" ==========
.It Bq Er ENAMETOOLONG
A component of a pathname exceeds 
.Dv {NAME_MAX}
characters, or an entire path name exceeded 
.Dv {PATH_MAX}
characters.
.\" ==========
.It Bq Er ENOENT
A component of either path prefix does not exist, or is a dangling symbolic link.
.\" ==========
.It Bq Er ENOENT
The file named by
.Fa path1
does not exist, or is a dangling symbolic link.
.\" ==========
.It Bq Er ENOSPC
The directory in which the entry for the new link is being placed
cannot be extended because there is no space left on the file
system containing the directory.
.\" ==========
.It Bq Er ENOTDIR
A component of either path prefix is not a directory.
.\" ==========
.It Bq Er EPERM
The file named by
.Fa path1
is a directory.
.\" ==========
.It Bq Er EROFS
The requested link requires writing in a directory
on a read-only file system.
.\" ==========
.It Bq Er EXDEV
The link named by
.Fa path2
and the file named by
.Fa path1
are on different file systems.
.El
.Sh SEE ALSO
.Xr symlink 2 ,
.Xr unlink 2
.Sh STANDARDS
The
.Fn link
function is expected to conform to 
.St -p1003.1-88 .
