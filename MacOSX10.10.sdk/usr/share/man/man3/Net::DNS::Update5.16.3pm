.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::DNS::Update 3"
.TH Net::DNS::Update 3 "2012-01-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Net::DNS::Update \- Create a DNS update packet
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Net::DNS::Update;
\&
\&    $update = Net::DNS::Update\->new;
\&    $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq, \*(AqIN\*(Aq);
\&
\&    $update\->push(prerequisite => nxrrset(\*(Aqfoo.example.com. A\*(Aq));
\&    $update\->push(update => rr_add(\*(Aqfoo.example.com. 86400 A 192.168.1.2\*(Aq));
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Net::DNS::Update\*(C'\fR is a subclass of \f(CW\*(C`Net::DNS::Packet\*(C'\fR, to be
used for making \s-1DNS\s0 dynamic updates.  Programmers should refer
to \s-1RFC\s0 2136 for the semantics of dynamic updates.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 3
\&    $update = Net::DNS::Update\->new;
\&    $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq, \*(AqHS\*(Aq);
.Ve
.PP
Returns a \f(CW\*(C`Net::DNS::Update\*(C'\fR object used to perform a \s-1DNS\s0 dynamic
update operation.  Specifically, it creates a packet with the header
opcode set to \s-1UPDATE\s0 and zone qtype to \s-1SOA\s0 (per \s-1RFC\s0 2136, 2.3).
.PP
Programs must use the \f(CW\*(C`push\*(C'\fR method to add RRs to the prerequisite,
update, and additional sections before performing the update.
.PP
Arguments are the zone name and the class.  If the zone is omitted,
the default domain will be taken from the resolver configuration.
If the class is omitted, it defaults to \s-1IN\s0.
.PP
Future versions of \f(CW\*(C`Net::DNS\*(C'\fR may provide a simpler interface
for making dynamic updates.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The first example below shows a complete program; subsequent examples
show only the creation of the update packet.
.SS "Add a new host"
.IX Subsection "Add a new host"
.Vb 1
\&    #!/usr/bin/perl \-w
\&
\&    use strict;
\&    use Net::DNS;
\&
\&    # Create the update packet.
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&
\&    # Prerequisite is that no A records exist for the name.
\&    $update\->push(prerequisite => nxrrset(\*(Aqfoo.example.com. A\*(Aq));
\&
\&    # Add two A records for the name.
\&    $update\->push(update => rr_add(\*(Aqfoo.example.com. 86400 A 192.168.1.2\*(Aq));
\&    $update\->push(update => rr_add(\*(Aqfoo.example.com. 86400 A 172.16.3.4\*(Aq));
\&
\&    # Send the update to the zone\*(Aqs primary master.
\&    my $res = Net::DNS::Resolver\->new;
\&    $res\->nameservers(\*(Aqprimary\-master.example.com\*(Aq);
\&
\&    my $reply = $res\->send($update);
\&
\&    # Did it work?
\&    if ($reply) {
\&        my $rcode = $reply\->header\->rcode;
\&        print \*(AqUpdate \*(Aq, $rcode eq \*(AqNOERROR\*(Aq ? "succeeded\en" : "failed: $rcode\en";
\&    } else {
\&        print \*(AqUpdate failed: \*(Aq, $res\->errorstring, "\en";
\&    }
.Ve
.SS "Add an \s-1MX\s0 record for a name that already exists"
.IX Subsection "Add an MX record for a name that already exists"
.Vb 3
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(prerequisite => yxdomain(\*(Aqexample.com\*(Aq));
\&    $update\->push(update       => rr_add(\*(Aqexample.com MX 10 mailhost.example.com\*(Aq));
.Ve
.SS "Add a \s-1TXT\s0 record for a name that doesn't exist"
.IX Subsection "Add a TXT record for a name that doesn't exist"
.Vb 3
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(prerequisite => nxdomain(\*(Aqinfo.example.com\*(Aq));
\&    $update\->push(update       => rr_add(\*(Aqinfo.example.com TXT "yabba dabba doo"\*(Aq));
.Ve
.SS "Delete all A records for a name"
.IX Subsection "Delete all A records for a name"
.Vb 3
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(prerequisite => yxrrset(\*(Aqfoo.example.com A\*(Aq));
\&    $update\->push(update       => rr_del(\*(Aqfoo.example.com A\*(Aq));
.Ve
.SS "Delete all RRs for a name"
.IX Subsection "Delete all RRs for a name"
.Vb 3
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(prerequisite => yxdomain(\*(Aqbyebye.example.com\*(Aq));
\&    $update\->push(update       => rr_del(\*(Aqbyebye.example.com\*(Aq));
.Ve
.SS "Perform a signed update"
.IX Subsection "Perform a signed update"
.Vb 2
\&    my $key_name = \*(Aqtsig\-key\*(Aq;
\&    my $key_data = \*(AqawwLOtRfpGE+rRKF2+DEiw==\*(Aq;
\&
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(update => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq));
\&    $update\->push(update => rr_add(\*(Aqbar.example.com A 10.4.5.6\*(Aq));
\&    $update\->sign_tsig($key_name, $key_data);
.Ve
.SS "Another way to perform a signed update"
.IX Subsection "Another way to perform a signed update"
.Vb 2
\&    my $key_name = \*(Aqtsig\-key\*(Aq;
\&    my $key_data = \*(AqawwLOtRfpGE+rRKF2+DEiw==\*(Aq;
\&
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(update     => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq));
\&    $update\->push(update     => rr_add(\*(Aqbar.example.com A 10.4.5.6\*(Aq));
\&    $update\->push(additional => Net::DNS::RR\->new("$key_name TSIG $key_data"));
.Ve
.SS "Perform a signed update with a customized \s-1TSIG\s0 record"
.IX Subsection "Perform a signed update with a customized TSIG record"
.Vb 2
\&    my $key_name = \*(Aqtsig\-key\*(Aq;
\&    my $key_data = \*(AqawwLOtRfpGE+rRKF2+DEiw==\*(Aq;
\&
\&    my $tsig = Net::DNS::RR\->new("$key_name TSIG $key_data");
\&    $tsig\->fudge(60);
\&
\&    my $update = Net::DNS::Update\->new(\*(Aqexample.com\*(Aq);
\&    $update\->push(update     => rr_add(\*(Aqfoo.example.com A 10.1.2.3\*(Aq));
\&    $update\->push(update     => rr_add(\*(Aqbar.example.com A 10.4.5.6\*(Aq));
\&    $update\->push(additional => $tsig);
.Ve
.SH "BUGS"
.IX Header "BUGS"
\&\s-1WARNING:\s0  This code is still under development.
Please use with caution on production nameservers.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c)1997\-2002 Michael Fuhr.
.PP
Portions Copyright (c)2002\-2004 Chris Reinhardt.
.PP
All rights reserved.
.PP
This program is free software; you may redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl, Net::DNS, Net::DNS::Resolver, Net::DNS::Header,
Net::DNS::Packet, Net::DNS::Question, Net::DNS::RR, \s-1RFC\s0 2136,
\&\s-1RFC\s0 2845
