.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class 3"
.TH DBIx::Class 3 "2012-10-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class \- Extensible and flexible object <\-> relational mapper.
.SH "GETTING HELP/SUPPORT"
.IX Header "GETTING HELP/SUPPORT"
The community can be found via:
.IP "\(bu" 4
Web Site: http://www.dbix\-class.org/ <http://www.dbix-class.org/>
.IP "\(bu" 4
\&\s-1IRC:\s0 irc.perl.org#dbix\-class
.IP "\(bu" 4
Mailing list: http://lists.scsys.co.uk/mailman/listinfo/dbix\-class <http://lists.scsys.co.uk/mailman/listinfo/dbix-class>
.IP "\(bu" 4
\&\s-1RT\s0 Bug Tracker: https://rt.cpan.org/Dist/Display.html?Queue=DBIx\-Class <https://rt.cpan.org/Dist/Display.html?Queue=DBIx-Class>
.IP "\(bu" 4
gitweb: http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx\-Class.git <http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx-Class.git>
.IP "\(bu" 4
git: git://git.shadowcat.co.uk/dbsrgits/DBIx\-Class.git <git://git.shadowcat.co.uk/dbsrgits/DBIx-Class.git>
.IP "\(bu" 4
twitter <http://www.twitter.com/dbix_class>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Create a schema class called MyApp/Schema.pm:
.PP
.Vb 2
\&  package MyApp::Schema;
\&  use base qw/DBIx::Class::Schema/;
\&
\&  _\|_PACKAGE_\|_\->load_namespaces();
\&
\&  1;
.Ve
.PP
Create a result class to represent artists, who have many CDs, in
MyApp/Schema/Result/Artist.pm:
.PP
See DBIx::Class::ResultSource for docs on defining result classes.
.PP
.Vb 2
\&  package MyApp::Schema::Result::Artist;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->table(\*(Aqartist\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ artistid name /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqartistid\*(Aq);
\&  _\|_PACKAGE_\|_\->has_many(cds => \*(AqMyApp::Schema::Result::CD\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.PP
A result class to represent a \s-1CD\s0, which belongs to an artist, in
MyApp/Schema/Result/CD.pm:
.PP
.Vb 2
\&  package MyApp::Schema::Result::CD;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->load_components(qw/InflateColumn::DateTime/);
\&  _\|_PACKAGE_\|_\->table(\*(Aqcd\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ cdid artistid title year /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqcdid\*(Aq);
\&  _\|_PACKAGE_\|_\->belongs_to(artist => \*(AqMyApp::Schema::Result::Artist\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.PP
Then you can use these classes in your application's code:
.PP
.Vb 3
\&  # Connect to your database.
\&  use MyApp::Schema;
\&  my $schema = MyApp::Schema\->connect($dbi_dsn, $user, $pass, \e%dbi_params);
\&
\&  # Query for all artists and put them in an array,
\&  # or retrieve them as a result set object.
\&  # $schema\->resultset returns a DBIx::Class::ResultSet
\&  my @all_artists = $schema\->resultset(\*(AqArtist\*(Aq)\->all;
\&  my $all_artists_rs = $schema\->resultset(\*(AqArtist\*(Aq);
\&
\&  # Output all artists names
\&  # $artist here is a DBIx::Class::Row, which has accessors
\&  # for all its columns. Rows are also subclasses of your Result class.
\&  foreach $artist (@all_artists) {
\&    print $artist\->name, "\en";
\&  }
\&
\&  # Create a result set to search for artists.
\&  # This does not query the DB.
\&  my $johns_rs = $schema\->resultset(\*(AqArtist\*(Aq)\->search(
\&    # Build your WHERE using an SQL::Abstract structure:
\&    { name => { like => \*(AqJohn%\*(Aq } }
\&  );
\&
\&  # Execute a joined query to get the cds.
\&  my @all_john_cds = $johns_rs\->search_related(\*(Aqcds\*(Aq)\->all;
\&
\&  # Fetch the next available row.
\&  my $first_john = $johns_rs\->next;
\&
\&  # Specify ORDER BY on the query.
\&  my $first_john_cds_by_title_rs = $first_john\->cds(
\&    undef,
\&    { order_by => \*(Aqtitle\*(Aq }
\&  );
\&
\&  # Create a result set that will fetch the artist data
\&  # at the same time as it fetches CDs, using only one query.
\&  my $millennium_cds_rs = $schema\->resultset(\*(AqCD\*(Aq)\->search(
\&    { year => 2000 },
\&    { prefetch => \*(Aqartist\*(Aq }
\&  );
\&
\&  my $cd = $millennium_cds_rs\->next; # SELECT ... FROM cds JOIN artists ...
\&  my $cd_artist_name = $cd\->artist\->name; # Already has the data so no 2nd query
\&
\&  # new() makes a DBIx::Class::Row object but doesnt insert it into the DB.
\&  # create() is the same as new() then insert().
\&  my $new_cd = $schema\->resultset(\*(AqCD\*(Aq)\->new({ title => \*(AqSpoon\*(Aq });
\&  $new_cd\->artist($cd\->artist);
\&  $new_cd\->insert; # Auto\-increment primary key filled in after INSERT
\&  $new_cd\->title(\*(AqFork\*(Aq);
\&
\&  $schema\->txn_do(sub { $new_cd\->update }); # Runs the update in a transaction
\&
\&  # change the year of all the millennium CDs at once
\&  $millennium_cds_rs\->update({ year => 2002 });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an \s-1SQL\s0 to \s-1OO\s0 mapper with an object \s-1API\s0 inspired by Class::DBI
(with a compatibility layer as a springboard for porting) and a resultset \s-1API\s0
that allows abstract encapsulation of database operations. It aims to make
representing queries in your code as perl-ish as possible while still
providing access to as many of the capabilities of the database as possible,
including retrieving related records from multiple tables in a single query,
\&\s-1JOIN\s0, \s-1LEFT\s0 \s-1JOIN\s0, \s-1COUNT\s0, \s-1DISTINCT\s0, \s-1GROUP\s0 \s-1BY\s0, \s-1ORDER\s0 \s-1BY\s0 and \s-1HAVING\s0 support.
.PP
DBIx::Class can handle multi-column primary and foreign keys, complex
queries and database-level paging, and does its best to only query the
database in order to return something you've directly asked for. If a
resultset is used as an iterator it only fetches rows off the statement
handle as requested in order to minimise memory usage. It has auto-increment
support for SQLite, MySQL, PostgreSQL, Oracle, \s-1SQL\s0 Server and \s-1DB2\s0 and is
known to be used in production on at least the first four, and is fork\-
and thread-safe out of the box (although
your \s-1DBD\s0 may not be).
.PP
This project is still under rapid development, so large new features may be
marked \s-1EXPERIMENTAL\s0 \- such APIs are still usable but may have edge bugs.
Failing test cases are *always* welcome and point releases are put out rapidly
as bugs are found and fixed.
.PP
We do our best to maintain full backwards compatibility for published
APIs, since DBIx::Class is used in production in many organisations,
and even backwards incompatible changes to non-published APIs will be fixed
if they're reported and doing so doesn't cost the codebase anything.
.PP
The test suite is quite substantial, and several developer releases
are generally made to \s-1CPAN\s0 before the branch for the next release is
merged back to trunk for a major release.
.SH "WHERE TO GO NEXT"
.IX Header "WHERE TO GO NEXT"
DBIx::Class::Manual::DocMap lists each task you might want help on, and
the modules where you will find documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
mst: Matt S. Trout <mst@shadowcatsystems.co.uk>
.PP
(I mostly consider myself \*(L"project founder\*(R" these days but the \s-1AUTHOR\s0 heading
is traditional :)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
abraxxa: Alexander Hartmaier <abraxxa@cpan.org>
.PP
acca: Alexander Kuznetsov <acca@cpan.org>
.PP
aherzog: Adam Herzog <adam@herzogdesigns.com>
.PP
Alexander Keusch <cpan@keusch.at>
.PP
alnewkirk: Al Newkirk <we@ana.im>
.PP
amiri: Amiri Barksdale <amiri@metalabel.com>
.PP
amoore: Andrew Moore <amoore@cpan.org>
.PP
andyg: Andy Grundman <andy@hybridized.org>
.PP
ank: Andres Kievsky
.PP
arc: Aaron Crane <arc@cpan.org>
.PP
arcanez: Justin Hunter <justin.d.hunter@gmail.com>
.PP
ash: Ash Berlin <ash@cpan.org>
.PP
bert: Norbert Csongradi <bert@cpan.org>
.PP
blblack: Brandon L. Black <blblack@gmail.com>
.PP
bluefeet: Aran Deltac <bluefeet@cpan.org>
.PP
bphillips: Brian Phillips <bphillips@cpan.org>
.PP
boghead: Bryan Beeley <cpan@beeley.org>
.PP
brd: Brad Davis <brd@FreeBSD.org>
.PP
bricas: Brian Cassidy <bricas@cpan.org>
.PP
brunov: Bruno Vecchi <vecchi.b@gmail.com>
.PP
caelum: Rafael Kitover <rkitover@cpan.org>
.PP
caldrin: Maik Hentsche <maik.hentsche@amd.com>
.PP
castaway: Jess Robinson
.PP
claco: Christopher H. Laco
.PP
clkao: \s-1CL\s0 Kao
.PP
da5id: David Jack Olrik <djo@cpan.org>
.PP
debolaz: Anders Nor Berle <berle@cpan.org>
.PP
dew: Dan Thomas <dan@godders.org>
.PP
dkubb: Dan Kubb <dan.kubb\-cpan@onautopilot.com>
.PP
dnm: Justin Wheeler <jwheeler@datademons.com>
.PP
dpetrov: Dimitar Petrov <mitakaa@gmail.com>
.PP
dwc: Daniel Westermann-Clark <danieltwc@cpan.org>
.PP
dyfrgi: Michael Leuchtenburg <michael@slashhome.org>
.PP
edenc: Eden Cardim <edencardim@gmail.com>
.PP
felliott: Fitz Elliott <fitz.elliott@gmail.com>
.PP
freetime: Bill Moseley <moseley@hank.org>
.PP
frew: Arthur Axel \*(L"fREW\*(R" Schmidt <frioux@gmail.com>
.PP
goraxe: Gordon Irving <goraxe@cpan.org>
.PP
gphat: Cory G Watson <gphat@cpan.org>
.PP
Grant Street Group <http://www.grantstreet.com/>
.PP
groditi: Guillermo Roditi <groditi@cpan.org>
.PP
Haarg: Graham Knop <haarg@haarg.org>
.PP
hobbs: Andrew Rodland <arodland@cpan.org>
.PP
ilmari: Dagfinn Ilmari Mannsa\*oker <ilmari@ilmari.org>
.PP
initself: Mike Baas <mike@initselftech.com>
.PP
ironcamel: Naveed Massjouni <naveedm9@gmail.com>
.PP
jawnsy: Jonathan Yu <jawnsy@cpan.org>
.PP
jasonmay: Jason May <jason.a.may@gmail.com>
.PP
jesper: Jesper Krogh
.PP
jgoulah: John Goulah <jgoulah@cpan.org>
.PP
jguenther: Justin Guenther <jguenther@cpan.org>
.PP
jhannah: Jay Hannah <jay@jays.net>
.PP
jnapiorkowski: John Napiorkowski <jjn1056@yahoo.com>
.PP
jon: Jon Schutz <jjschutz@cpan.org>
.PP
jshirley: J. Shirley <jshirley@gmail.com>
.PP
kaare: Kaare Rasmussen
.PP
konobi: Scott McWhirter
.PP
littlesavage: Alexey Illarionov <littlesavage@orionet.ru>
.PP
lukes: Luke Saunders <luke.saunders@gmail.com>
.PP
marcus: Marcus Ramberg <mramberg@cpan.org>
.PP
mattlaw: Matt Lawrence
.PP
mattp: Matt Phillips <mattp@cpan.org>
.PP
michaelr: Michael Reddick <michael.reddick@gmail.com>
.PP
milki: Jonathan Chu <milki@rescomp.berkeley.edu>
.PP
mstratman: Mark A. Stratman <stratman@gmail.com>
.PP
ned: Neil de Carteret
.PP
nigel: Nigel Metheringham <nigelm@cpan.org>
.PP
ningu: David Kamholz <dkamholz@cpan.org>
.PP
Nniuq: Ron \*(L"Quinn\*(R" Straight" <quinnfazigu@gmail.org>
.PP
norbi: Norbert Buchmuller <norbi@nix.hu>
.PP
nuba: Nuba Princigalli <nuba@cpan.org>
.PP
Numa: Dan Sully <daniel@cpan.org>
.PP
ovid: Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.PP
oyse: O\*/ystein Torget <oystein.torget@dnv.com>
.PP
paulm: Paul Makepeace
.PP
penguin: K J Cheetham
.PP
perigrin: Chris Prather <chris@prather.org>
.PP
peter: Peter Collingbourne <peter@pcc.me.uk>
.PP
Peter Valdemar Mo\*/rch <peter@morch.com>
.PP
phaylon: Robert Sedlacek <phaylon@dunkelheit.at>
.PP
plu: Johannes Plunien <plu@cpan.org>
.PP
Possum: Daniel LeWarne <possum@cpan.org>
.PP
quicksilver: Jules Bean
.PP
rafl: Florian Ragwitz <rafl@debian.org>
.PP
rainboxx: Matthias Dietrich <perl@rb.ly>
.PP
rbo: Robert Bohne <rbo@cpan.org>
.PP
rbuels: Robert Buels <rmb32@cornell.edu>
.PP
rdj: Ryan D Johnson <ryan@innerfence.com>
.PP
ribasushi: Peter Rabbitson <ribasushi@cpan.org>
.PP
rjbs: Ricardo Signes <rjbs@cpan.org>
.PP
robkinyon: Rob Kinyon <rkinyon@cpan.org>
.PP
Robert Olson <bob@rdolson.org>
.PP
Roman: Roman Filippov <romanf@cpan.org>
.PP
Sadrak: Felix Antonius Wilhelm Ostmann <sadrak@cpan.org>
.PP
sc_: Just Another Perl Hacker
.PP
scotty: Scotty Allen <scotty@scottyallen.com>
.PP
semifor: Marc Mims <marc@questright.com>
.PP
SineSwiper: Brendan Byrd <bbyrd@cpan.org>
.PP
solomon: Jared Johnson <jaredj@nmgi.com>
.PP
spb: Stephen Bennett <stephen@freenode.net>
.PP
Squeeks <squeek@cpan.org>
.PP
sszabo: Stephan Szabo <sszabo@bigpanda.com>
.PP
talexb: Alex Beamish <talexb@gmail.com>
.PP
tamias: Ronald J Kimball <rjk@tamias.net>
.PP
teejay : Aaron Trevena <teejay@cpan.org>
.PP
Todd Lipcon
.PP
Tom Hukins
.PP
tonvoon: Ton Voon <tonvoon@cpan.org>
.PP
triode: Pete Gamache <gamache@cpan.org>
.PP
typester: Daisuke Murase <typester@cpan.org>
.PP
victori: Victor Igumnov <victori@cpan.org>
.PP
wdh: Will Hawes
.PP
wesm: Wes Malone <wes@mitsi.com>
.PP
willert: Sebastian Willert <willert@cpan.org>
.PP
wreis: Wallace Reis <wreis@cpan.org>
.PP
xenoterracide: Caleb Cushing <xenoterracide@gmail.com>
.PP
yrlnry: Mark Jason Dominus <mjd@plover.com>
.PP
zamolxes: Bogdan Lucaciu <bogdan@wiz.ro>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 \- 2011 the DBIx::Class \*(L"\s-1AUTHOR\s0\*(R" and \*(L"\s-1CONTRIBUTORS\s0\*(R"
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
