.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Any 3"
.TH Config::Any 3 "2011-07-13" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Config::Any \- Load configuration from different file formats, transparently
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Config::Any;
\&
\&    my $cfg = Config::Any\->load_stems({stems => \e@filepath_stems, ... });
\&    # or
\&    my $cfg = Config::Any\->load_files({files => \e@filepaths, ... });
\&
\&    for (@$cfg) {
\&        my ($filename, $config) = %$_;
\&        $class\->config($config);
\&        warn "loaded config from file: $filename";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Config::Any provides a facility for Perl applications and libraries
to load configuration data from multiple different file formats. It supports \s-1XML\s0, \s-1YAML\s0,
\&\s-1JSON\s0, Apache-style configuration, Windows \s-1INI\s0 files, and even Perl code.
.PP
The rationale for this module is as follows: Perl programs are deployed on many different
platforms and integrated with many different systems. Systems administrators and end 
users may prefer different configuration formats than the developers. The flexibility
inherent in a multiple format configuration loader allows different users to make 
different choices, without generating extra work for the developers. As a developer
you only need to learn a single interface to be able to use the power of different
configuration formats.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "load_files( \e%args )"
.IX Subsection "load_files( %args )"
.Vb 4
\&    Config::Any\->load_files( { files => \e@files } );
\&    Config::Any\->load_files( { files => \e@files, filter  => \e&filter } );
\&    Config::Any\->load_files( { files => \e@files, use_ext => 1 } );
\&    Config::Any\->load_files( { files => \e@files, flatten_to_hash => 1 } );
.Ve
.PP
\&\f(CW\*(C`load_files()\*(C'\fR attempts to load configuration from the list of files passed in
the \f(CW\*(C`files\*(C'\fR parameter, if the file exists.
.PP
If the \f(CW\*(C`filter\*(C'\fR parameter is set, it is used as a callback to modify the configuration 
data before it is returned. It will be passed a single hash-reference parameter which 
it should modify in-place.
.PP
If the \f(CW\*(C`use_ext\*(C'\fR parameter is defined, the loader will attempt to parse the file
extension from each filename and will skip the file unless it matches a standard
extension for the loading plugins. Only plugins whose standard extensions match the
file extension will be used. For efficiency reasons, its use is encouraged, but
be aware that you will lose flexibility \*(-- for example, a file called \f(CW\*(C`myapp.cfg\*(C'\fR 
containing \s-1YAML\s0 data will not be offered to the \s-1YAML\s0 plugin, whereas \f(CW\*(C`myapp.yml\*(C'\fR
or \f(CW\*(C`myapp.yaml\*(C'\fR would be.
.PP
When the \f(CW\*(C`flatten_to_hash\*(C'\fR parameter is defined, the loader will return a hash
keyed on the file names, as opposed to the usual list of single-key hashes.
.PP
\&\f(CW\*(C`load_files()\*(C'\fR also supports a 'force_plugins' parameter, whose value should be an
arrayref of plugin names like \f(CW\*(C`Config::Any::INI\*(C'\fR. Its intended use is to allow the use 
of a non-standard file extension while forcing it to be offered to a particular parser.
It is not compatible with 'use_ext'.
.PP
You can supply a \f(CW\*(C`driver_args\*(C'\fR hashref to pass special options to a particular
parser object. Example:
.PP
.Vb 3
\&    Config::Any\->load_files( { files => \e@files, driver_args => {
\&        General => { \-LowerCaseNames => 1 }
\&    } )
.Ve
.SS "load_stems( \e%args )"
.IX Subsection "load_stems( %args )"
.Vb 4
\&    Config::Any\->load_stems( { stems => \e@stems } );
\&    Config::Any\->load_stems( { stems => \e@stems, filter  => \e&filter } );
\&    Config::Any\->load_stems( { stems => \e@stems, use_ext => 1 } );
\&    Config::Any\->load_stems( { stems => \e@stems, flatten_to_hash => 1 } );
.Ve
.PP
\&\f(CW\*(C`load_stems()\*(C'\fR attempts to load configuration from a list of files which it generates
by combining the filename stems list passed in the \f(CW\*(C`stems\*(C'\fR parameter with the 
potential filename extensions from each loader, which you can check with the
\&\f(CW\*(C`extensions()\*(C'\fR classmethod described below. Once this list of possible filenames is
built it is treated exactly as in \f(CW\*(C`load_files()\*(C'\fR above, as which it takes the same
parameters. Please read the \f(CW\*(C`load_files()\*(C'\fR documentation before using this method.
.SS "finder( )"
.IX Subsection "finder( )"
The \f(CW\*(C`finder()\*(C'\fR classmethod returns the 
Module::Pluggable::Object
object which is used to load the plugins. See the documentation for that module for
more information.
.SS "plugins( )"
.IX Subsection "plugins( )"
The \f(CW\*(C`plugins()\*(C'\fR classmethod returns the names of configuration loading plugins as 
found by Module::Pluggable::Object.
.SS "extensions( )"
.IX Subsection "extensions( )"
The \f(CW\*(C`extensions()\*(C'\fR classmethod returns the possible file extensions which can be loaded
by \f(CW\*(C`load_stems()\*(C'\fR and \f(CW\*(C`load_files()\*(C'\fR. This may be useful if you set the \f(CW\*(C`use_ext\*(C'\fR
parameter to those methods.
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
.ie n .IP """No files specified!"" or ""No stems specified!""" 4
.el .IP "\f(CWNo files specified!\fR or \f(CWNo stems specified!\fR" 4
.IX Item "No files specified! or No stems specified!"
The \f(CW\*(C`load_files()\*(C'\fR and \f(CW\*(C`load_stems()\*(C'\fR methods will issue this warning if
called with an empty list of files/stems to load.
.ie n .IP """_load requires a arrayref of file paths""" 4
.el .IP "\f(CW_load requires a arrayref of file paths\fR" 4
.IX Item "_load requires a arrayref of file paths"
This fatal error will be thrown by the internal \f(CW\*(C`_load\*(C'\fR method. It should not occur
but is specified here for completeness. If your code dies with this error, please
email a failing test case to the authors below.
.SH "CONFIGURATION AND ENVIRONMENT"
.IX Header "CONFIGURATION AND ENVIRONMENT"
Config::Any requires no configuration files or environment variables.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
Module::Pluggable
.PP
And at least one of the following:
Config::General
Config::Tiny
\&\s-1JSON\s0
\&\s-1YAML\s0
JSON::Syck
YAML::Syck
XML::Simple
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
No bugs have been reported.
.PP
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-config\-any@rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org>.
.SH "AUTHOR"
.IX Header "AUTHOR"
Joel Bernstein <rataxis@cpan.org>
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
This module was based on the original 
Catalyst::Plugin::ConfigLoader
module by Brian Cassidy \f(CW\*(C`<bricas@cpan.org>\*(C'\fR.
.PP
With ideas and support from Matt S Trout \f(CW\*(C`<mst@shadowcatsystems.co.uk>\*(C'\fR.
.PP
Further enhancements suggested by Evan Kaufman \f(CW\*(C`<evank@cpan.org>\*(C'\fR.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006, Portugal Telecom \f(CW\*(C`http://www.sapo.pt/\*(C'\fR. All rights reserved.
Portions copyright 2007, Joel Bernstein \f(CW\*(C`<rataxis@cpan.org>\*(C'\fR.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE\s0 \s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1LICENSED\s0 \s-1FREE\s0 \s-1OF\s0 \s-1CHARGE\s0, \s-1THERE\s0 \s-1IS\s0 \s-1NO\s0 \s-1WARRANTY\s0
\&\s-1FOR\s0 \s-1THE\s0 \s-1SOFTWARE\s0, \s-1TO\s0 \s-1THE\s0 \s-1EXTENT\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0. \s-1EXCEPT\s0 \s-1WHEN\s0
\&\s-1OTHERWISE\s0 \s-1STATED\s0 \s-1IN\s0 \s-1WRITING\s0 \s-1THE\s0 \s-1COPYRIGHT\s0 \s-1HOLDERS\s0 \s-1AND/OR\s0 \s-1OTHER\s0 \s-1PARTIES\s0
\&\s-1PROVIDE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \*(L"\s-1AS\s0 \s-1IS\s0\*(R" \s-1WITHOUT\s0 \s-1WARRANTY\s0 \s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0, \s-1EITHER\s0
\&\s-1EXPRESSED\s0 \s-1OR\s0 \s-1IMPLIED\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0 \s-1OF\s0 \s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. \s-1THE\s0
\&\s-1ENTIRE\s0 \s-1RISK\s0 \s-1AS\s0 \s-1TO\s0 \s-1THE\s0 \s-1QUALITY\s0 \s-1AND\s0 \s-1PERFORMANCE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1WITH\s0
\&\s-1YOU\s0. \s-1SHOULD\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1PROVE\s0 \s-1DEFECTIVE\s0, \s-1YOU\s0 \s-1ASSUME\s0 \s-1THE\s0 \s-1COST\s0 \s-1OF\s0 \s-1ALL\s0
\&\s-1NECESSARY\s0 \s-1SERVICING\s0, \s-1REPAIR\s0, \s-1OR\s0 \s-1CORRECTION\s0.
.PP
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1UNLESS\s0 \s-1REQUIRED\s0 \s-1BY\s0 \s-1APPLICABLE\s0 \s-1LAW\s0 \s-1OR\s0 \s-1AGREED\s0 \s-1TO\s0 \s-1IN\s0 \s-1WRITING\s0
\&\s-1WILL\s0 \s-1ANY\s0 \s-1COPYRIGHT\s0 \s-1HOLDER\s0, \s-1OR\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1WHO\s0 \s-1MAY\s0 \s-1MODIFY\s0 \s-1AND/OR\s0
\&\s-1REDISTRIBUTE\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1AS\s0 \s-1PERMITTED\s0 \s-1BY\s0 \s-1THE\s0 \s-1ABOVE\s0 \s-1LICENCE\s0, \s-1BE\s0
\&\s-1LIABLE\s0 \s-1TO\s0 \s-1YOU\s0 \s-1FOR\s0 \s-1DAMAGES\s0, \s-1INCLUDING\s0 \s-1ANY\s0 \s-1GENERAL\s0, \s-1SPECIAL\s0, \s-1INCIDENTAL\s0,
\&\s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 \s-1ARISING\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0 \s-1USE\s0 \s-1OR\s0 \s-1INABILITY\s0 \s-1TO\s0 \s-1USE\s0
\&\s-1THE\s0 \s-1SOFTWARE\s0 (\s-1INCLUDING\s0 \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0 \s-1LOSS\s0 \s-1OF\s0 \s-1DATA\s0 \s-1OR\s0 \s-1DATA\s0 \s-1BEING\s0
\&\s-1RENDERED\s0 \s-1INACCURATE\s0 \s-1OR\s0 \s-1LOSSES\s0 \s-1SUSTAINED\s0 \s-1BY\s0 \s-1YOU\s0 \s-1OR\s0 \s-1THIRD\s0 \s-1PARTIES\s0 \s-1OR\s0 A
\&\s-1FAILURE\s0 \s-1OF\s0 \s-1THE\s0 \s-1SOFTWARE\s0 \s-1TO\s0 \s-1OPERATE\s0 \s-1WITH\s0 \s-1ANY\s0 \s-1OTHER\s0 \s-1SOFTWARE\s0), \s-1EVEN\s0 \s-1IF\s0
\&\s-1SUCH\s0 \s-1HOLDER\s0 \s-1OR\s0 \s-1OTHER\s0 \s-1PARTY\s0 \s-1HAS\s0 \s-1BEEN\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0
\&\s-1SUCH\s0 \s-1DAMAGES\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Catalyst::Plugin::ConfigLoader 
\&\*(-- now a wrapper around this module.
