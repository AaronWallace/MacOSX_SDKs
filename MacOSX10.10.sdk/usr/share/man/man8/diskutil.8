.\"
.\" Copyright (c) 1998-2014 Apple Inc. All rights reserved.
.\"
.\" This file contains Original Code and/or Modifications of Original Code
.\" as defined in and that are subject to the Apple Public Source License
.\" Version 2.0 (the 'License'). You may not use this file except in
.\" compliance with the License. Please obtain a copy of the License at
.\" http://www.opensource.apple.com/apsl/ and read it before using this
.\" file.
.\" 
.\" The Original Code and all software distributed under the License are
.\" distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
.\" EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
.\" INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
.\" Please see the License for the specific language governing rights and
.\" limitations under the License.
.\"
.Dd 2 June 2014
.Os "Mac OS X"
.Dt DISKUTIL 8
.Pp
.Sh NAME
.Nm diskutil
.Nd modify, verify and repair local disks
.\"
.\"
.\"
.Sh SYNOPSIS
.Nm
.Op Nm quiet
.Ar verb
.Op Ar options
.\"
.\"
.\"
.Sh DESCRIPTION
.Nm
manipulates the structure of local disks.  It provides information about, and allows the administration of,
the partitioning schemes, layouts, and formats of disks. This includes hard disks, solid state disks, optical discs,
CoreStorage volumes, and AppleRAID sets.
It generally manipulates whole volumes instead of individual files and directories.
.\"
.\"
.\"
.Sh VERBS
Each verb is listed with its description and individual arguments.
.\"
.\" List-Begin-Verbs
.Bl -hang -width "imageinfo"
.\"             -- list --
.It Sy list Op Nm -plist
.Op Ar device 
.br
List disks.  If no argument is given, then all disks and all of their partitions are listed.
.Pp
If
.Sy -plist
is specified, then a property list will be emitted instead of the normal user-readable
output.
If a
.Ar device
is specified, then instead of listing all families of whole disks and their partitions, only one such
family is listed.  In that case, specifying either the whole disk or any of its slices will work.
.Pp
A script could interpret the results of the
.Sy diskutil
.Sy list
.Sy -plist
output and use
.Sy diskutil
.Sy info
.Sy -plist
as well as
.Sy diskutil
.Sy listFilesystems
.Sy -plist
for more detailed information.
.Pp
See the
.Sy DEVICES
section below for the various forms that the
.Ar device
specification may take for this and all of the other
.Nm
verbs.
.Pp
The top-to-bottom appearance of partitions in
.Sy diskutil
.Sy list
always indicates the on-disk ordering.
BSD disk identifiers may, in certain circumstances, not appear in slice-numerical order
when viewed this way.  This is normal and is likely the result of a recent partition map
editing operation in which volumes were kept mounted.
.\"
.\"             -- info --
.It Sy info | information
.Op Nm -plist
.Ar device
.br
Get detailed information about a specific whole disk or partition.
If
.Sy -plist
is specified, then a property list instead of the normal user-readable output will be emitted.
.\"
.\"             -- activity --
.It Sy activity
.br
Continuously display system-wide disk manipulation activity as reported by the Disk
Arbitration framework until interrupted with a signal (e.g. by typing
Control-C).
.Pp
This can be useful to watch system-wide activity of disks coming on-line or being ejected,
volumes on disks being mounted or unmounted, volumes being renamed, etc.
However, this output must never be parsed; programs should become Disk Arbitration clients
instead.
.Pp
For debugging
information, such as the monitoring of applications dissenting (attempting to deny) activities
for disks
for which they have registered an interest, you must use the logging features of the
.Sy diskarbitrationd
daemon. Programs needing this information must become Disk Arbitration clients.
.\"
.\"             -- listFilesystems --
.It Sy listFilesystems
.Op Nm -plist
.br
Show the file system personalities available for formatting in
.Sy diskutil
when using the erasing and partitioning verbs.
This is a subset of the complete set of
personalities exported by the various file system bundles that may be installed in the system.
Also shown are some shortcut aliases for common personalities.
See the
.Sy FORMAT
section below for more details.
If
.Sy -plist
is specified, then a property list instead of the normal user-readable output will be emitted.
.\"
.\"             -- unmount --
.It Sy unmount | umount
.Op Nm force 
.Ar device
.br
Unmount a single volume.
.Sy Force
will force-unmount the volume (less kind to any open files; see also
.Sy umount
(8)).
.\"
.\"             -- unmountDisk --
.It Sy unmountDisk | umountDisk
.Op Nm force 
.Ar device
.br
Unmount an entire disk (all volumes).
.Sy Force
will force-unmount the volumes (less kind to any open files; see also
.Sy umount
(8)).
You should specify a whole disk, but all volumes of the whole disk are attempted to be unmounted even if you specify a partition.
.\"
.\"             -- eject --
.It Sy eject Ar device
.br
Eject a disk.  Media will become offline for the purposes of being a data store for file systems or
being a member of constructs such as software RAID or direct data.  Additionally, removable media will
become eligible for safe manual removal; automatically-removable media will begin its
physical (motorized) eject sequence.
.\"
.\"             -- mount --
.It Sy mount Op Nm readOnly
.Op Nm -mountPoint Ar path
.Ar device
.br
Mount a single volume.
If
.Sy readOnly
is specified, then the file system is mounted read-only, even if the
volume's underlying file system and/or device and/or media
supports writing; even the super-user may not write to it; this is the same as the
.Sy rdonly
option to
.Sy mount
(8).
If a
.Sy -mountPoint
is specified, then that path, rather than the standard path of /Volumes/VolumeName, will
be used as the view into the volume file content; a directory at that path must already exist.
.\"
.\"             -- mountDisk --
.It Sy mountDisk Ar device
.br
Mount an entire disk (all mountable volumes).
You should specify a whole disk, but all volumes of the whole disk are attempted to be mounted even if you specify a partition.
.\"
.\"             -- rename --
.It Sy rename | renameVolume Ar device Ar name
.br
Rename a volume.
Volume names are subject to file system-specific alphabet and length restrictions.
.\"
.\"             -- enableJournal --
.It Sy enableJournal Ar device
.br
Enable journaling on an HFS+ volume.  This works whether or not the volume is currently mounted
(the volume is temporarily mounted if necessary).
Ownership of the affected disk is required.
.\"
.\"             -- disableJournal --
.It Sy disableJournal
.Op Nm force
.Ar device
.br
Disable journaling on an HFS+ volume.  This normally works whether or not the volume is currently
mounted (the volume is temporarily mounted if necessary).  If the
.Sy force
option is specified, then journaling is disabled directly on disk; in this case, the volume
must not be mounted.
Ownership of the affected disk is required.
.\"
.\"             -- moveJournal external --
.It Sy moveJournal
.Sy external
.Ar journalDevice
.Ar device
.br
Create a 512MB Apple_Journal partition using the
.Ar journalDevice
partition to serve as a journal for the volume
.Ar device.
For best results,
.Ar journalDevice
should be a partition on a different whole-disk than the volume itself.
.Pp
The journal for
.Ar device
will be moved externally onto the newly created Apple_Journal partition.
.Pp
Since the
.Ar journalDevice
you specify will invariably be larger than 512MB, a new HFS+ partition will be created
following the Apple_Journal partition to fill the remaining space.
.Pp
Moving the journal works whether or not the volume is mounted, provided
journaling is enabled on that volume. No errors are currently supported to flag attempts to
move journals on volumes that do not have journaling enabled.
If you have multiple volumes for which you want external journals, each must have its own
external Apple_Journal partition.
Ownership of the affected disks is required.
.\"
.\"             -- moveJournal internal --
.It Sy moveJournal
.Sy internal
.Ar device
.br
Move the journal for
.Ar device
back locally (onto that same device).
Ownership of the affected disk is required.
.\"
.\"             -- enableOwnership --
.It Sy enableOwnership Ar device
.br
Enable ownership of a volume.  The on-root-disk Volume Database at /var/db/volinfo.database is manipulated such that
the User and Group ID settings of files, directories, and links (file system objects, or "FSOs") on the target volume
are taken into account.
.Pp
This setting for a particular volume is persistent across ejects and injects of that volume as seen
by the current OS, even across reboots of that OS, because of the entries in this OS's Volume Database.  Note thus
that the setting is not kept on the target disk, nor is it in-memory.
.Pp
For some locations of devices (e.g. internal hard disks), consideration of ownership settings on FSOs is the default.
For others (e.g. plug-in USB disks), it is not.
.Pp
When ownership is disabled, Owner and Group ID settings on FSOs appear to the user and programs as the current user and group instead
of their actual on-disk settings, in order to
make it easy to use a plug-in disk of which the user has physical possession.
.Pp
When ownership is enabled, the Owner and Group ID settings that exist on the disk are taken into account for determining
access, and exact settings are written to the disk as FSOs are created.  A common reason for
having to enable ownership is when a disk is to contain FSOs whose User and Group ID settings, and thus permissions
behavior overall, is critically important, such as when the plug-in disk contains system files to be changed or added to.
.Pp
See also the
.Xr vsdbutil 8
command.  Running as root is required.
.\"
.\"             -- disableOwnership --
.It Sy disableOwnership Ar device
.br
Disable ownership of a volume.  See
.Sy enableOwnership
above.
Running as root is required.
.\"
.\"             -- verifyVolume --
.It Sy verifyVolume Ar device
.br
Verify the file system data structures of a volume.  The appropriate fsck program is executed and
the volume is left mounted or unmounted at it was before the command.
Ownership of the disk to be verified is required.
.\"
.\"             -- repairVolume --
.It Sy repairVolume Ar device
.br
Repair the file system data structures of a volume.  The appropriate fsck program is executed and
the volume is left mounted or unmounted at it was before the command.
Ownership of the affected disk is required.
.\"
.\"             -- verifyDisk --
.It Sy verifyDisk Ar device
.br
Verify the partition map layout of a whole disk intended for booting or data use on a Macintosh.
The checks further include, but are not limited to, the integrity of the EFI System Partition,
the integrity of any Core Storage Physical Volume partitions,
and provisioning of space for boot loaders.
Ownership of the disk to be verified is required; it must be a whole disk and must have a partition map.
.\"
.\"             -- repairDisk --
.It Sy repairDisk Ar device
.br
Repair the partition map layout of a whole disk intended for booting or data use on a Macintosh.
The repairs further include, but are not limited to, the repair or creation of an EFI System Partition,
the integrity of any Core Storage Physical Volume partitions,
and the provisioning of space for boot loaders.
Ownership of the affected disk is required; it must be a whole disk and must have a partition map.
.\"
.\"             -- verifyPermissions --
.It Sy verifyPermissions
.Op Nm -plist
.Ar device
.br
Verify the permissions of a Mac OS X boot volume.  The data that guides the permissions
verification is written during the installation process.
Ownership of the disk to be verified is required.
.\"
.\"             -- repairPermissions --
.It Sy repairPermissions
.Op Nm -plist
.Ar device
.br
Repair the permissions of a Mac OS X boot volume.  The data that guides the permissions
repair is written during the installation process.
Ownership of the affected disk is required.
.\"
.\"             -- eraseDisk --
.It Sy eraseDisk Ar format Ar name 
.Op Nm APM[Format] | MBR[Format] | GPT[Format]
.Ar device
.br
Erase an existing disk, removing all volumes and writing out a new partitioning scheme
containing one new empty file system volume.  If the partitioning scheme is not
specified, then an appropriate one for the current machine is chosen.
.Ar Format
is discussed below in the section for the
.Sy partitionDisk
verb.
Ownership of the affected disk is required.
.\"
.\"             -- eraseVolume --
.It Sy eraseVolume 
.Ar format
.Ar name
.Ar device
.br
Erase an existing volume or write out a new empty file system if there was none.
.Ar Format
is discussed below in the section for the
.Sy partitionDisk
verb.
Ownership of the affected disk is required.
.\"
.\"             -- reformat --
.It Sy reformat Ar device
.br
Erase an existing volume by writing out a new empty file system of the same personality (type) and with the
same volume name.
Ownership of the affected disk is required.
.\"
.\"             -- eraseOptical --
.It Sy eraseOptical 
.Op Nm quick 
.Ar device
.br
Erase optical media (CD/RW, DVD/RW, etc.).
.Sy Quick
specifies whether the disc recording system software should do a full erase or a quick erase.
Ownership of the affected disk is required.
.\"
.\"             -- zeroDisk --
.It Sy zeroDisk Op Nm force
.Ar device
.br
Erase a device, writing zeros to the media.  The device can be a whole-disk or a partition.
In either case, in order to be useful again, zero'd whole-disks
will need to be (re)partitioned, or
zero'd partitions will need to be (re)formatted with a file system, e.g. by using the
.Sy partitionDisk,
.Sy eraseDisk,
or
.Sy eraseVolume
verbs.
If you desire a more sophisticated erase algorithm or if you need
to erase only free space not in use for files, use the
.Sy secureErase
verb.
The
.Sy force
parameter causes best-effort, non-error-terminating, forced unmounts and shared-mode writes to be attempted;
however, this is still no guarantee against drivers which claim the disk exclusively. In such cases, you
may have to first unmount all overlying logical volumes (e.g. CoreStorage or AppleRAID), or, if a disk is partially
damaged in just the wrong way, even un-install a kext or erase the disk elsewhere.
Ownership of the affected disk is required.
.\"
.\"             -- randomDisk --
.It Sy randomDisk 
.Op Ar times
.Ar device
.br
Erase a whole disk, writing random data to the media.
.Ar Times
is the optional (defaults to 1) number of times to write random information.
The device can be a whole-disk or a partition.
In either case, in order to be useful again, randomized whole-disks
will need to be (re)partitioned, or
randomized partitions will need to be (re)formatted with a file system, e.g. by using the
.Sy partitionDisk
or
.Sy eraseDisk
verbs.
If you desire a more sophisticated erase algorithm or if you need
to erase only free space not in use for files, use the
.Sy secureErase
verb.
Ownership of the affected disk is required.
.\"
.\"             -- secureErase --
.It Sy secureErase
.Op Nm freespace
.Ar level
.Ar device
.br
Erase, using a secure method,
either a whole-disk (including any and all partitions), or,
only the free space (not in use for files) on a currently-mounted volume.
Erasing a whole-disk will leave it useless until it is partitioned again.
Erasing freespace on a volume will leave it exactly as it was from an end-user perspective,
with the exception that it will not be possible to recover deleted files
or data using utility software.
If you need to erase all contents of a partition but not its hosting
whole-disk, use the
.Sy zeroDisk
or
.Sy randomDisk
verbs.
Ownership of the affected disk is required.
.Pp
.Ar Level
should be one of the following:
.\" List-Begin-SecureEraseOptions
.Bl -bullet -offset indent
.It
0 - Single-pass zero-fill erase.
.It
1 - Single-pass random-fill erase.
.It
2 - US DoD 7-pass secure erase.
.It
3 - Gutmann algorithm 35-pass secure erase.
.It
4 - US DoE algorithm 3-pass secure erase.
.\" List-End-SecureEraseOptions
.El
.\"
.\"             -- partitionDisk --
.It Sy partitionDisk Ar device
.Op Ar numberOfPartitions
.Op Nm APM[Format] | MBR[Format] | GPT[Format]
.Op Ar part1Format Ar part1Name Ar part1Size Ar part2Format Ar part2Name Ar part2Size Ar part3Format part3Name part3Size Ar ...
.br
.Pp
(re)Partition a disk, removing all volumes.  All volumes on this disk will be destroyed.
The
.Ar device
parameter specifies which whole disk is to be partitioned.
The optional
.Ar numberOfPartitions
parameter specifies the number of partitions to create; if given then the number of
parameter triplets (see below) is expected to match; else, the number of triplets alone
given will determine the number of partitions created.
.Pp
The optional partitioning scheme parameter forces a particular partitioning scheme; if not specified, a
suitable default is chosen.  They are:
.\" List-Begin-PartitioningSchemes
.Bl -bullet -offset indent
.It
.Sy APM[Format]
specifies that an Apple Partition Map scheme should be used.
This is the traditional Apple partitioning scheme
used to start up a PowerPC-based Macintosh computer, to use the disk as a non-startup disk with any Mac,
or to create a multiplatform compatible startup disk.
.It
.Sy MBR[Format]
specifies that a Master Boot Record scheme should be used.
This is the DOS/Windows-compatible partitioning scheme.
.It
.Sy GPT[Format]
specifies that a GUID Partitioning Table scheme should be used.
This is the partitioning scheme
used to start up an Intel-based Macintosh computer.
.\" List-End-PartitioningSchemes
.El
.br
.Pp
For each partition, a triplet of the desired file system format, volume name, and size must be specified.
Several other
.Sy diskutil
verbs allow these triplets as well (and for them, the
.Ar numberOfPartitions
parameter is also optional).  The triplets must be as follows:
.\" List-Begin-PartitionRequestTriplets
.Bl -bullet -offset indent
.It
.Ar Format
names are of the form HFS+, MS-DOS, etc.; a list of formattable file systems (more precisely, personalities exported by
the installed file system bundles)
and common aliases is available from the
.Sy listFilesystems
verb.
.Ar Format
guides
.Sy diskutil
both in what partition type to set for the partitions (slices) as well as what file system structures to lay down therein,
using the file system bundle's plist's FormatExecutable setting which usually points to the appropriate formatter program such as
.Xr newfs_hfs 8
or you can also specify a
.Ar format
of
.Sy Free Space
to skip an area of the disk.  Additionally, you can specify the partition (personality) type manually and directly with a
.Ar format
of %<human-readable partition type>%
such as
.Sy %Apple_HFS%
or %<GPT partition type UUID constant>%
such as
.Sy %48465300-0000-11AA-AA11-00306543ECAC%;
these imply a
.Ar name
of
.Sy %noformat%
(below).  Human-readable types must be known to the system but UUID types (GPT scheme only) can be arbitrary.
.It
.Ar Names
are the initial volume names; they must conform to file system specific restrictions.
If a name of
.Sy %noformat%
is specified, then the partition is left blank such that the partition space is carved out, the partition type is set
according to the file system format name, the partition space is partially erased, but a file system structure
is not laid down with any file system's formatter program (e.g.
.Ns Xr newfs_hfs 8 ; this is useful for setting up partitions that will
contain user-defined (not necessarily file system) data.
For a triplet whose
.Ar format
is
.Sy Free Space
or a directly-specified partition type, its
.Ar name
is ignored but a dummy name must be present.
.It
.Ar Sizes
are floating point numbers followed by a letter or percent sign as described in the
.Sy SIZES
section at the end of this page (e.g. 165536000B, 55.3T, 678M, 75%, R).
.\" List-End-PartitionRequestTriplets
.El
.Pp
The last partition may be lengthened to the end of the disk.
You can specify an exact size for your last partition by specifying it as the penultimate
triplet and specifying an additional (last) triplet as
.Sy "Free Space".
.Pp
Ownership of the affected disk is required.
.\"
.\"             -- resizeVolume --
.It Sy resizeVolume Ar device [
.Sy limits
|
.Sy R
|
.Ar size 
.Op Ar numberOfPartitions
.Op Ar part1Format Ar part1Name Ar part1Size Ar part2Format Ar part2Name Ar part2Size Ar part3Format part3Name part3Size Ar ...
]
.br
.Pp
Non-destructively resize a volume. You may increase or decrease its size.
.Pp
A
.Ar size
of
.Sy limits
will print the range of valid values for the target partition, taking into account current file system and partition map conditions
such as files in use and other (immovable) partitions following the target.
.Pp
You can grow a volume (back) to its maximum size possible, provided no new partitions have been created that are in the way, by specifying
.Sy R
for the new volume size. You should use
.Sy R
instead of attempting an absolute value such as
.Sy 100%
because the latter cannot count partition map overhead.
.Pp
When decreasing the size, new partitions may optionally be created to fill the newly-freed space.
To do this, specify the
.Ar numberOfPartitions,
.Ar format,
.Ar name,
and
.Ar size
parameters in the same manner as the triplet description for the
.Sy partitionDisk
verb.
.Pp
Resizing a volume that is currently set as the computer's startup disk will invalidate that setting; use the 
.Sy Startup
.Sy Disk
System Preferences panel or
.Sy bless
(8) to reset the resized volume as the startup disk.
.Pp
.Ar Device
refers to a volume; the volume's file system must be journaled HFS+.
Valid
.Sy sizes
are a number followed by a capital letter multiplier or percent sign suffix as described in the
.Sy SIZES
section at the end of this page (e.g. 1.5T, 128M, 50%).
Ownership of the affected disk is required.
.\"
.\"             -- splitpartition --
.It Sy splitPartition Ar device
.Op Ar numberOfPartitions 
.Op Ar part1Format Ar part1Name Ar part1Size Ar part2Format Ar part2Name Ar part2Size Ar part3Format part3Name part3Size Ar ...
.br
.Pp
Destructively split a volume into multiple partitions.  You must supply a list of new partitions to create
in the space of the old partition; specify these with the
.Ar numberOfPartitions,
.Ar format,
.Ar name,
and
.Ar size
parameters in the same manner as the triplet description for the
.Sy partitionDisk
verb.
.Pp
.Ar Device
refers to a volume.
Ownership of the affected disk is required.
.\"
.\"             -- mergepartitions --
.It Sy mergePartitions
.Op Nm force
.Ar format Ar name Ar fromDevice Ar toDevice
.br
Merge two or more partitions on a disk.  All data on merged partitions other than the first will be lost.
Data on the first partition will be lost as well if the
.Sy force
argument is given.
.Pp
If
.Sy force
is not given, and the first partition has a resizable file system
(e.g. JHFS+), the file system will be preserved and grown in a data-preserving manner; your
.Ar format
and
.Ar name
parameters are ignored in this case. If
.Sy force
is not given, and the first partition is not resizable, you are prompted if you want to format.
You will also be prompted to format if the first partition has an (HFS) Allocation Block Size
which is too small to support the required growth of the first partition; see the
.Sy -b
option for
.Sy newfs_hfs
(8).
.Pp
If
.Sy force
is given, the final resulting partition is always (re)formatted. You should do this if you wish to (re)format to a new file system type.
You will be prompted to confirm.
.Pp
.Ar Format
and
.Ar name
must always be given, but they have an effect only when
.Sy force
is given.
.Pp
Merged partitions are required to be ordered sequentially on disk (see
.Sy diskutil
.Sy list
for the actual on-disk ordering).
All partitions in the range, except for the first one, must be unmountable.
Ownership of the affected disk is required.
.\"
.\"             -- appleRAID --
.It Sy appleRAID | ar Ar raidVerb Op ...
.br
AppleRAID verbs can be used to create, manipulate and destroy AppleRAID volumes (Software RAID).
AppleRAID supports three basic types of RAID sets:
.\" List-Begin-AppleRAIDSetTypes
.Bl -bullet -offset indent
.It
"stripe" - Striped Volume (RAID 0)
.It
"mirror" - Mirrored Volume (RAID 1) 
.It
"concat" - Concatenated Volume (Spanning)
.\" List-End-AppleRAIDSetTypes
.El
.Pp
Of these three basic types, only the "mirror" type increases fault-tolerance.
Mirrors may have more than two disks to further increase their fault-tolerance.
Striped and concatentated volumes are, in fact, more vulnerable to faults than single disk volumes.
.Pp
From these basic types, "stacked" or "nested" RAID volumes can be created.
Stacked RAID sets that make use of mirrored RAID sets are fault-tolerant.
For example, these are some of the more common combinations of stacked RAID sets:
.\" List-Begin-StackedRAIDLevels
.Bl -bullet -offset indent
.It
RAID 50 - A striped RAID set of hardware RAID 5 disks.
.It
RAID 10 - A striped RAID set of mirrored RAID sets.
.It
RAID 0+1 - A mirrored RAID set of striped RAID sets.
.It
Concatenated Mirror - A concatenation of mirrored RAID sets.
.\" List-End-StackedRAIDLevels
.El
.Pp
When creating new RAID sets or adding disks, if possible, it is better to specify the entire disk instead of a partition on that disk.
This allows the software to reformat the entire disk using the most current partition layouts.
When using whole disks, the type of partitioning used is selected based on the platform type (PPC = APMFormat, Intel = GPTFormat).
GPT and APM partition formats cannot be mixed in the same RAID set.
.Pp
In addition to whole disk and partition device names, AppleRAID uses UUIDs to refer to existing RAID sets and their members.
Existing RAID sets may also be specified by mount point (e.g.
.Pa /Volume/raidset Ns ).
In many cases, using the UUID for the device argument is preferred because disk device names may 
change over time when disks are added, disks are removed or when the system is rebooted.
If RAID members have been physically disconnected from the system or are no longer responding, 
you must use the member's UUID as the command argument.
Messages in the system log will refer to RAID sets and their member disks by UUID.
For more information on specifying device arguments see the "DEVICES" section below.
.Pp
AppleRAID is not a replacement for backing up your data.
Backups should be always be performed on a regular basis and before modifying any RAID set using these commands.
.Pp
The following is a list of
.Sy appleRAID
sub-verbs with their descriptions and individual arguments.
.br
.\"
.\" List-Begin-AppleRAIDVerbs
.Bl -hang -width "imageinfo"
.\"
.\"             -- appleRAID > list --
.It Sy list Op Nm -plist | Ar UUID
.br
Display AppleRAID volumes with current status and associated member disks.
If
.Ar UUID
is specified, only list the RAID set with that AppleRAID Set UUID.
If
.Sy -plist
is specified, then a property list will be emitted instead of user-formatted output.
The
.Sy -plist
and
.Ar UUID
arguments may not both be specified.
.Sy diskutil
.Sy listRAID
and
.Sy diskutil
.Sy checkRAID
are deprecated synonyms for
.Sy diskutil
.Sy appleRAID
.Sy list.
.\"
.\"             -- appleRAID > create  --
.It Sy create Nm mirror | stripe | concat
.Ar setName
.Ar format
.Ar devices Ar ...
.br
Create a new RAID set consisting of multiple disks and/or RAID sets.
.Ar setName
is used for both the name of the created RAID volume and the RAID
set itself (as displayed in
.Sy list Ns ).
e.g. 'diskutil createRAID stripe MyArray JHFS+ disk1 disk2 disk3 disk4'.
Ownership of the affected disks is required.
.Sy diskutil
.Sy createRAID
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy create.
.\"
.\"             -- appleRAID > delete  --
.It Sy delete Ar raidVolume
.br
Destroy an existing RAID set.
If the RAID set is a mirror with a resizable file system,
.Sy delete
will attempt to convert
each of the member partitions back into a non-RAID volume while
retaining the contained file system.
For concatenated RAID sets with a resizable file system,
.Sy delete
will attempt to shrink the
file system to fit on the first member partition and convert that
to a non-RAID volume.
Ownership of the affected disks is required.
.Sy diskutil
.Sy destroyRAID
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy delete.
.\"
.\"             -- appleRAID > repairMirror --
.It Sy repairMirror Ar raidVolume Ar newDevice
.br
Repair a degraded mirror by adding a "new" disk given as
.Ar newDevice
to the RAID mirror set whose exported disk device or set UUID is given as
.Ar raidVolume.
The new disk must be the same size or larger than the existing disks in the RAID set.
After running this command, you should manually remove the old (orphaned, failed) member(s) with
.Sy diskutil
.Sy appleRAID
.Sy remove.
Ownership of the affected disk is required.
.Sy diskutil
.Sy repairMirror
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy repairMirror.
.\"
.\"             -- appleRAID > add --
.It Sy add Ar type Ar newDevice Ar raidVolume
.br
Add a new member or hot spare to an existing RAID set.
.Ar Type
can be either
.Ar member
or
.Ar spare .
New disks are added live, the RAID volume does not need to be unmounted.
Mirrored volumes support adding both members and hot spares, concatenated volumes only support adding members.
When adding to a mirrored RAID set, the new disk must be the same size or larger than the existing disks in the RAID set.
Adding a hot spare to a mirror will enable autorebuilding for that mirror.
Adding a new member to a concatenated RAID set appends the member and expands the RAID volume.
Ownership of the affected disk is required.
.Sy diskutil
.Sy addToRAID
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy add.
.\"
.\"             -- appleRAID > remove --
.It Sy remove Ar oldDevice Ar raidVolume
.br
Remove a member or spare from an existing RAID set.
Old disks are removed live; the RAID volume does not need to be unmounted.
For missing devices,
.Ar oldDevice
must be the device's UUID.
Online mirror members with a resizable file system will be converted to non-RAID volumes, spare and offline members will be marked free.
For concatenated RAID sets, only the last member can be removed.
For resizable file systems
.Sy remove
will first attempt to shrink the concatenated RAID set so that the file system fits on the remaining disks.
Ownership of the affected disk is required.
.Sy diskutil
.Sy removeFromRAID
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy remove.
.\"
.\"             -- appleRAID > enable --
.It Sy enable Nm mirror | concat
.Ar device
.br
Convert a non-RAID disk partition containing a resizable file system
(such as JHFS+) into an unpaired mirror or single disk concatenated
RAID set.
Disks that were originally partitioned on Mac OS X 10.2 Jaguar or earlier 
or were partitioned to be Mac OS 9 compatible may not be resizable.
Ownership of the affected disk is required.
.Sy diskutil
.Sy enableRAID
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy enable.
.\"
.\"             -- appleRAID > update --
.It Sy update Ar key Ar value Ar raidVolume
.br
Update the
.Ar key value
parameters of an existing RAID set.
Valid keys are:
.\" List-Begin-AppleRAIDKeys
.Bl -bullet -offset indent
.It
.Sy AutoRebuild
- If true, the system attempts to rebuild degraded mirrored volumes automatically.
When looking for devices for rebuild, AppleRAID first looks for hot spares and then degraded members.
Use a
.Ar value
of "1" for true and "0" for false.
.It
.Sy SetTimeout
- Controls how long the system waits (in seconds) for a missing device before degrading a mirrored raid set.
Also controls the amount of time you have to disconnect all devices from an unmounted mirror without degrading it.
.\" List-End-AppleRAIDKeys
.El
.Pp
Ownership of the affected disk is required.
.Sy diskutil
.Sy updateRAID
is a deprecated synonym for
.Sy diskutil
.Sy appleRAID
.Sy update.
.\"
.\" List-End-AppleRAIDVerbs
.El
.\"
.\"             -- coreStorage --
.It Sy coreStorage | cs Ar coreStorageVerb Op ...
.br
CoreStorage verbs can be used to create, manipulate and destroy CoreStorage volumes.
.Pp
CoreStorage maintains a world of virtual disks, somewhat like RAID, in which one can easily add or remove imported
backing store disks, as well as exported usable volumes, to or from a pool (or several pools). This provides the user
with flexibility in allocating their hardware; user or operating system data can span multiple physical disks seamlessly,
for example.
.Pp
Apple CoreStorage defines four types of objects, instances of which are uniquely represented by a UUID:
.\" List-Begin-CoreStorageObjects
.Bl -bullet -offset indent
.It
Logical Volume Group (LVG)
.It
Physical Volume (PV)
.It
Logical Volume Family (LVF)
.It
Logical Volume (LV)
.\" List-End-CoreStorageObjects
.El
.Pp
The Logical Volume Group (LVG) is the top or "pool" level; zero or more may exist during any OS boot time session.
.Pp
An LVG imports one or more Physical Volumes (PVs). A PV represents a device that feeds the LVG storage space;
a PV is normally real media but it can be a disk image or even an AppleRAID Set. A disk offered to be a PV must be a
partition and the encompassing scheme must be GPT.
.Pp
An LVG exports zero or more Logical Volume Families (LVFs). An LVF contains properties which govern and bind
together all of its descendant Logical Volumes (LVs). These properties provide settings for Full Disk Encryption (FDE)
(such as whether the LVG is encrypted, which users have access, etc) and other services.
.Pp
A Logical Volume Family (LVF) exports one or more Logical Volumes (LVs).
.Pp
A Logical Volume (LV) exports a dev node, upon which a file system (such as Journaled HFS+) resides.
.Pp
For more information on specifying device arguments, see the
.Sy DEVICES
section below.
.Pp
CoreStorage is not a replacement for backing up your data.
Backups should be always be performed on a regular basis and before modifying any CoreStorage volumes using these commands.
.Pp
The following is a list of
.Sy coreStorage
sub-verbs with their descriptions and individual arguments.
.br
.\"
.\" List-Begin-CoreStorageVerbs
.Bl -hang -width "imageinfo"
.\"
.\"             -- coreStorage > list --
.It Sy list Op Nm -plist | Ar UUID
.br
Display a tree view of the CoreStorage world for all current logical volume groups (LVGs) with
member disks (PVs) and exported volumes (LVFs and LVs), with properties and status for each level.
If
.Sy -plist
is specified then a property list will be emitted instead of the formatted tree output; the UUIDs can be
used with the
.Sy diskutil
.Sy coreStorage
.Sy information
verb to get properties for the object represented by that UUID.
If
.Ar UUID
is specified then an attempt is made to list only that UUID (whatever type of CoreStorage object it may represent).
The
.Sy -plist
and
.Ar UUID
arguments may not both be specified.
.\"
.\"             -- coreStorage > information --
.It Sy info | information
.Op Nm -plist
.Ar UUID | device
.br
Display properties of the CoreStorage object (LVG, PV, LVF, or LV) associated with the given CoreStorage
UUID or disk.
.\"
.\"             -- coreStorage > convert  --
.It Sy convert Ar device
.Op Nm -stdinpassphrase | -passphrase Op Ar passphrase
.br
Convert a regular Journaled HFS+ or Case-sensitive Journaled HFS+ volume
(must be on a partition and within a GPT partitioning scheme)
into a CoreStorage logical volume.
.Pp
If
.Sy -passphrase
is specified, the on-disk bytes will be encrypted. You will be prompted for a new passphrase
interactively, or you can specify the
.Ar passphrase
on the command line. Alternatively, if you specify
.Sy -stdinpassphrase
the standard input is read for the passphrase so that a program could execute
.Sy diskutil
and send the passphrase through a pipe without having to expose it as a command-line parameter.
.Pp
The volume must be resizable (the above types are) and also mounted. Conversion is done live and in-place;
targeting the boot volume is supported; as much of the conversion as possible is done before an eject or
reboot is necessary.
.Pp
After slightly shrinking the source volume to make room for CoreStorage data structures at the end, its partition
type is changed to Apple_CoreStorage and it becomes a CoreStorage Physical Volume.
A new CoreStorage Logical Volume Group is then created with this Physical Volume as the backing store,
followed by the creation of a Logical Volume Family and Logical Volume pair.
.Pp
At this point, the new CoreStorage PV/LVG/LVF/LV stack is ready for use, although the
"old" mountpoint must first be unmounted; yet it might not be unmountable. This will occur if the target
(now the PV) is the current boot volume.
.Pp
Just before exiting,
.Sy diskutil
.Sy coreStorage
.Sy convert
will try to unmount the target disk (which is now the "old" mount point and the new PV). If successful
(target is not the boot disk), the volume now becomes mounted from the LV. If unsuccessful (target is the boot disk),
a reboot is necessary.
.Pp
At this point, if no encryption was specified, all is done. Otherwise, the bytes-on-disk will begin to be
encrypted in-place by CoreStorage automatically "in the background" while the PV/LVG/LVF/LV stack continues
to be usable. Encryption progress may be monitored with
.Sy diskutil
.Sy coreStorage
.Sy list.
.Pp
When encryption is finished, a passphrase will be required the next time the LV is ejected and re-attached.
If the LV is hosting the boot volume, this passphrase requirement will thus occur at the next reboot.
.Pp
Note that all on-disk data is not secured immediately; it is a deliberate
process of encrypting all on-disk bytes while the CoreStorage driver keeps publishing the (usable) LVG/LV.
.Pp
Ownership of the affected disk is required.
.\"
.\"             -- coreStorage > revert --
.It Sy revert Ar device | lvUUID
.Op Nm -stdinpassphrase
|
.Op Nm -passphrase Ar passphrase
|
.Op Nm -recoverykeychain Ar file
.br
Convert a CoreStorage logical volume back to its native type.
The volume must have been created by means of conversion, e.g. with
.Sy diskutil
.Sy coreStorage
.Sy convert.
.Pp
If the volume was not created with a passphrase, then simple ownership of the affected disk is required;
otherwise, a passphrase must be supplied, either interactively or via one of the parameters or a keychain
file in the same manner as
.Sy diskutil
.Sy coreStorage
.Sy unlockVolume.
.\"
.\"             -- coreStorage > create --
.It Sy create | createLVG Ar lvgName Ar devices ...
.br
Create a CoreStorage logical volume group. The disks specified will become
the (initial) set of physical volumes; more than one may be specified. You can specify partitions (which will be re-typed to be
Apple_CoreStorage) or whole-disks (which will be partitioned as GPT and will contain an Apple_CoreStorage partition).
The resulting LVG UUID can then be used with createVolume below.
All existing data on the drive(s) will be lost.
Ownership of the affected disk is required.
.\"
.\"             -- coreStorage > delete --
.It Sy delete | deleteLVG Ar lvgUUID | lvgName
.br
Delete a CoreStorage logical volume group. All logical volume families with their logical volumes are removed, the
logical volume group is destroyed, and the now-orphaned physical volumes are erased and partition-typed as Journaled HFS+.
.\"
.\"             -- coreStorage > rename --
.It Sy rename | renameLVG Ar lvgUUID | lvgName Ar newName
.br
Rename a CoreStorage logical volume group. Do not confuse this name with the LV name or the volume name of the
fiesystem volume on the LV.
.\"
.\"             -- coreStorage > createVolume --
.It Sy createVolume | createLV Ar lvgUUID | lvgName Ar type Ar name Ar size
.Op Nm -stdinpassphrase | -passphrase Op Ar passphrase
.br
Export a new logical volume family, with a new logical volume under it, out of a CoreStorage logical volume
group.
.Ar Type
is the file system personality to initialize on the new logical volume. Valid types
are Journaled HFS+ or Case-sensitive Journaled HFS+ or their aliases.
.Ar Size
is the amount of space to allocate from the parent LVG. It is given in the same manner as the
triplet description for the
.Sy partitionDisk
verb, and you can also specify with
.Sy %
a percentage of the currently remaining unallocated space in the LVG.
.Pp
If
.Sy -passphrase
or
.Sy -stdinpassphrase
is specified, in the same manner as with
.Sy diskutil
.Sy coreStorage
.Sy convert
above, on-disk data will be stored in an encrypted form as the Logical Volume is filled; otherwise, the data
will remain plain.
.\"
.\"             -- coreStorage > deleteVolume --
.It Sy deleteVolume | deleteLV Ar lvUUID | device
.br
Remove an exported logical volume (and its logical volume family as appropriate) from a CoreStorage logical volume
group. Any data on that logical volume will be lost.
This operation will thus result in an increase in free space in the logical volume group.
.Pp
It is assumed that the logical volume is used as a backing store for a file system; therefore, an unmount attempt
is made which must suceeed before the removal of the logical volume is done.
.\"
.\"             -- coreStorage > encryptVolume --
.It Sy encryptVolume | encryptLV
.Ar lvUUID | device
.Op Nm -stdinpassphrase
|
.Op Nm -passphrase Ar passphrase
.br
Begin a live background process of encrypting the on-disk backing bytes of an existing plain
CoreStorage logical volume (LV).
.Pp
That is, the on-disk bytes that are backing the user data are all visited,
read, and re-written in an encrypted form; this process can take a long time (minutes to hours). This process
continues seamlessly across reboots. The logical volume remains usable at all times.
When this command returns, the operation will be ongoing; you can check progress with
.Sy diskutil
.Sy coreStorage
.Sy list.
.Pp
The entire logical volume family (LVF) is affected since all LVs in an LVF share the same encryption settings.
.Pp
Any new user data written while this background operation is in progress will be in encrypted form.
.Pp
Specifying
.Sy -passphrase
or
.Sy -stdinpassphrase
or interactively entering a passphrase is mandatory; you do so in the same manner as with
.Sy diskutil
.Sy coreStorage
.Sy convert
above.
.\"
.\"             -- coreStorage > decryptVolume --
.It Sy decryptVolume | decryptLV
.Ar lvUUID | device
.Op Nm -stdinpassphrase
|
.Op Nm -passphrase Ar passphrase
.br
Begin a live background process of decrypting the on-disk backing bytes of an existing encrypted
CoreStorage logical volume (LV). Bytes are read, decrypted, and written back to disk in plain form.
The LV must be unlocked before beginning this operation.
.Pp
Like as in
.Sy diskutil
.Sy coreStorage
.Sy encryptVolume
above, all on-disk bytes are visited and converted, the process is seamless across reboots, the
logical volume remains usable at all times, the entire logical volume family (LVF) is affected,
any new user data written will be in plain form, and the operation will be ongoing when this
command returns.
.Pp
Credentials must be supplied; you can use
.Sy -passphrase
or
.Sy -stdinpassphrase
or specify that a recovery keychain file be used, in the same manner as
.Sy diskutil
.Sy coreStorage
.Sy unlockVolume.
.\"
.\"             -- coreStorage > unlockVolume --
.It Sy unlockVolume | unlockLV Ar lvUUID
.Op Nm -stdinpassphrase
|
.Op Nm -passphrase Ar passphrase
|
.Op Nm -recoverykeychain Ar file
.br
Unlock a logical volume and file system, causing it to be attached and mounted.
.Pp
Data is now accessible in plain form to the file system and applications;
the on-physical-disk backing bytes remain in encrypted form.
.Pp
The locked state means that the CoreStorage driver has not been given authentication
information (a passphrase) to interpret the encrypted bytes on disk and thus export a dev node.
This verb unlocks a logical volume family (LVF) and its logical volumes (LVs) by providing that
authentication; as the LVs thus appear as dev nodes,
any file systems upon them are automatically mounted.
.Pp
To "re-lock" the volume, make it offline again by ejecting it, e.g. with
.Sy diskutil
.Sy eject.
.Pp
Credentials must be supplied. You must either enter a passphrase interactively, specify one of the
.Sy -passphrase
or
.Sy -stdinpassphrase
parameters in the same manner as with
.Sy diskutil
.Sy coreStorage
.Sy convert
above, or specify that a recovery keychain file be used.
.Pp
You can specify
.Sy -recoverykeychain
with a path to a keychain file.
The keychain must be unlocked; see
.Ns Xr security 1 
for more information.
.\"
.\"             -- coreStorage > changeVolumePassphrase --
.It Sy changeVolumePassphrase | passwd Ar lvUUID
.Op Nm -recoverykeychain Ar file
.Op Nm -oldpassphrase Ar oldpassphrase
.Op Nm -newpassphrase Ar newpassphrase
.Op Nm -stdinpassphrase
.br
Change the passphrase of an existing encrypted volume. It need not be unlocked nor mounted. The parameters, while variously optional,
must be given in the above order.
.Pp
You must authenticate either via the
.Sy -oldpassphrase
parameter, via the
.Sy -stdinpassphrase
parameter (with newline or eof-terminated data given to stdin), or via an interactive prompt (if no parameters are given),
in the same manner as
.Sy diskutil
.Sy coreStorage
.Sy convert
above.
Alternatively, you can authenticate by specifying
.Sy -recoverykeychain
with a path to a keychain file.
.Pp
A new passphrase must be supplied, again via one of the three methods above (interactive,
.Sy -newpassphrase,
or
.Sy -stdinpassphrase).
.Pp
If you are supplying both the old and new passphrases via stdin, they must be separated with a newline character.
.\"
.\" List-End-CoreStorageVerbs
.El
.\" List-End-Verbs
.El
.\"
.\"
.\"
.Sh DEVICES
A device parameter to any of the above commands (except where explicitly required otherwise) is usually
any of the following:
.\" List-Begin-DeviceSpecifiers
.Bl -bullet -offset indent
.It
The
.Sy disk identifier
(see below).
Any entry of the form of
.Pa disk* ,
e.g.
.Pa disk1s9 .
.It
The device node entry containing the
.Sy disk identifier .
Any entry of the form of
.Pa /dev/disk* ,
e.g.
.Pa /dev/disk2 .
.It
The volume mount point.  Any entry of the form of
.Pa /Volumes/* , 
e.g.
.Pa /Volumes/Untitled .
.It
The Universally Unique Identifier or UUID.  Any entry of the form of
e.g.
.Pa 11111111-2222-3333-4444-555555555555 .
.\" List-End-DeviceSpecifiers
.El
.\"
.\"
.\"
.Sh DISK IDENTIFIER
The
.Sy disk identifier
string variously identifies a device unit, a session upon that device, or a partition (slice) upon that session.
It may take the form of
.Pa diskU,
.Pa diskUsS,
.Pa diskUsQ,
or
.Pa diskUsQsS,
where U, S, and Q
are positive decimal integers (possibly multi-digit), and where:
.\" List-Begin-BSDComponents
.Bl -bullet -offset indent
.It
.Pa U
is the device unit.  It may refer to hardware (e.g. a hard drive, optical drive, or memory card) or a "drive"
constructed by software (e.g. an AppleRAID set or a disk image).
.It
.Pa Q
is the session and is only included for optical media; it refers to the number of times recording has taken
place on the currently-inserted medium (disc).
.It
.Pa S
is the slice; it refers to a partition.  Upon this partition, the raw data that underlies a user-visible file system is
usually present, but it may also contain specialized data for certain 3rd-party database programs, or data required for
the system software (e.g. EFI or booter partitions, or APM partition map data).
.\" List-End-BSDComponents
.El
.Pp
Some units (e.g. floppy disks, RAID sets) contain file system data upon their "whole" device instead of containing
a partitioning scheme with partitions.
.Pp
Note that the forms
.Pa diskUsQ
and
.Pa diskUsS
appear the same and must be distinguished by context.  For non-optical media, this two-part form identifies a slice upon
which (file system) data is stored.  For optical media, it identifies a session upon which a partitioning scheme (with its
slices with file systems) is stored.
.\"
.\"
.\"
.Pp
.Sh SIZES
Wherever a size is supplied as an output, it is always presented as a base-ten approximation with one decimal
digit and a base-ten SI multiplier, often accompanied by a precise count in bytes. Scripts should refrain from parsing the
normal output and use the
.Sy -plist
option instead.
.Pp
Wherever a
.Sy size
is to be supplied as an input, you can provide values in several different ways, some absolute and some context-sensitive.
All suffixes described below are interpreted in a case-insensitive manner. The "B" is mandatory by itself but optional
when combined with an SI or IEC multiplier.
.Pp
The most common way is to specify absolute values as a decimal number, possibly followed by a period and a
decimal fraction, followed without whitespace with a suffix as follows:
.\" List-Begin-SizeSuffixes-1
.Bl -bullet -offset indent
.It
.Sy B
is
.Sy bytes
(not blocks) where the multiplier is 1.
.It
.Sy K[B]
is power of ten
.Sy kilobytes
where the multiplier is 1000 (1 x 10^3).
.It
.Sy M[B]
is power of ten
.Sy megabytes
where the multiplier is 1000000 (1 x 10^6).
.It
.Sy G[B]
is power of ten
.Sy gigabytes
where the multiplier is 1000000000 (1 x 10^9).
.It
.Sy T[B]
is power of ten
.Sy terabytes
where the multiplier is 1000000000000 (1 x 10^12).
.It
.Sy P[B]
is power of ten
.Sy petabytes
where the multiplier is 1000000000000000 (1 x 10^15).
.It
.Sy E[B]
is power of ten
.Sy exabytes
where the multiplier is 1000000000000000000 (1 x 10^18).
.\" List-End-SizeSuffixes-1
.El
.Pp
You can also use the following suffixes:
.\" List-Begin-SizeSuffixes-2
.Bl -bullet -offset indent
.It
.Sy S | UAM
("sectors") is
.Sy 512-byte
.Sy units
(device-independent) where the multiplier is always 512.
.It
.Sy DBS
("device block size") is the
.Sy device-dependent
native block size of the encompassing whole disk, if applicable,
where the multiplier is often 512, but not always; indeed it might not be a power of two.
.It
.Sy Ki[B]
is power of two
.Sy kibibytes
where the multiplier is 1024 (1 x 2^10).
.It
.Sy Mi[B]
is power of two
.Sy mebibytes
where the multiplier is 1048576 (1 x 2^20).
.It
.Sy Gi[B]
is power of two
.Sy gibibytes
where the multiplier is 1073741824 (1 x 2^30).
.It
.Sy Ti[B]
is power of two
.Sy tebibytes
where the multiplier is 1099511627776 (1 x 2^40).
.It
.Sy Pi[B]
is power of two
.Sy pebibytes
where the multiplier is 1125899906842624 (1 x 2^50).
.It
.Sy Ei[B]
is power of two
.Sy exbibytes
where the multiplier is 1152921504606846976 (1 x 2^60).
.\" List-End-SizeSuffixes-2
.El
.Pp
In certain contexts (such as when specifying partition triplets) you can provide a relative value as follows:
.\" List-Begin-SizeSuffixes-3
.Bl -bullet -offset indent
.It
.Sy %
(with a preceding number) is a
.Sy percentage
of the whole-disk size.
.It
.Sy R
(with no preceding number) specifies the
.Sy remainder
of the whole-disk size after all other triplets in the group are taken into account.
It need not be in the last triplet.  It must only appear in at most one triplet among all triplets.
.\" List-End-SizeSuffixes-3
.El
.Pp
Note again that
.Sy B
refers to bytes and
.Sy S
and
.Sy UAM
refer to a constant multiplier of 512; the latter are useful when working with tools such as
.Sy gpt
(8) or
.Sy df
(1).  Note also that this multiplier is not a "block" size as actually implemented by the
underlying device driver and/or hardware, nor is it an "allocation block", which is a
file system's minimum unit of backing store usage, often formatting-option-dependent.
.Pp
Examples: 10G (10 gigabytes), 4.23tb (4.23 terabytes), 5M (5 megabytes), 4GiB (exactly 2^32 bytes), 25.4% (25.4 percent of whole disk size).
.Sh FORMAT
The
.Sy format
parameter for the erasing and partitioning verbs is the file system personality name.
You can determine this name by looking in a file system bundle's
.Pa /System/Library/Filesystems/<fs>.fs/Contents/Info.plist
or by using the
.Sy listFilesystems
verb, which also lists shortcut aliases for common
personalities (these shortcuts are defined by
.Sy diskutil
for use with it only).
.Pp
Common examples include JHFS+, MS-DOS, etc.
.Pp
.Sh EXAMPLES
Erase a disk 
.br
diskutil eraseDisk JHFS+ Untitled disk3
.Pp
Erase a volume 
.br
diskutil eraseVolume HFS+ UntitledHFS /Volumes/SomeDisk
.Pp
Partition a disk with three partitions
.br
diskutil partitionDisk disk3 3 HFSX Name1 10G JHFS+ Name2 10G MS-DOS NAME3 10G
.Pp
Partition a disk with the APM partitioning scheme
.br
diskutil partitionDisk disk3 APM HFS+ vol1 25% Journaled\\ HFS+ vol2 25% Journaled\\ HFS+ vol3 50% Free\\ Space volX 0%
.Pp
Partition a disk with the GPT partitioning scheme
.br
diskutil partitionDisk disk3 GPT HFS+ vol1 25% MS-DOS VOL2 25% HFS+ vol3 50% Free\\ Space volX 0% 
.Pp
Resize a volume and create a volume after it, using all remaining space
.br
diskutil resizeVolume /Volumes/SomeDisk 50g MS-DOS DOS 0b
.Pp
Resize a volume and leave all remaining space as unused
.br
diskutil resizeVolume /Volumes/SomeDisk 12g
.Pp
Merge two partitions into a new partition
.br
diskutil mergePartitions JHFS+ not disk1s3 disk1s5
.Pp
Split a partition into three new ones
.br
diskutil splitPartition /Volumes/SomeDisk JHFS+ vol1 12g MS-DOS VOL2 8g JHFS+ vol3 0b
.Pp
Create a RAID 
.br
diskutil createRAID mirror MirroredVolume JHFS+ disk1 disk2
.Pp
Destroy a RAID 
.br
diskutil destroyRAID /Volumes/MirroredVolume
.Pp
Repair a damaged RAID 
.br
diskutil repairMirror /Volumes/MirroredVolume disk3
.Pp
Convert volume into RAID volume
.br
diskutil enableRAID mirror /Volumes/ExistingVolume
.\"
.\"
.\"
.Pp
.Sh SEE ALSO
.Ns Xr authopen 1 ,
.Ns Xr hdid 8 ,
.Ns Xr hdiutil 1 ,
.Ns Xr ufs.util 8 ,
.Ns Xr msdos.util 8 ,
.Ns Xr hfs.util 8 ,
.Ns Xr drutil 1 ,
.Ns Xr diskarbitrationd 8 ,
.Ns Xr mount 8 ,
.Ns Xr umount 8 ,
.Ns Xr newfs_hfs 8 ,
.Ns Xr vsdbutil 8 ,
.Ns Xr fsck 8
.\"
.\"
.\"
.Pp
.Sh ERRORS
.Sy diskutil
will exit with status 0 if successful or 1 if it cannot complete the requested operation;
this includes cases in which usage text is printed.
Before
.Sy diskutil
returns with status 1, it prints a message which might include
an explanation local to diskutil,
an error string from the DiskManagement or MediaKit frameworks,
an underlying POSIX error, or some combination.
.\"
.\"
.\"
.Pp
.Sh HISTORY
The eraseDisk and partitionDisk verbs had an option to add Mac OS 9 drivers (in partitions designated for that purpose);
there was also a repairOS9Permissions verb.  These have been removed.
.Pp
Starting with Mac OS X 10.6, the input and output notation of disk and partition sizes use power-of-10 suffixes.
In the past this has been power-of-2, regardless of the suffix (e.g. G, Gi, GiB) used for display or accepted as input.
