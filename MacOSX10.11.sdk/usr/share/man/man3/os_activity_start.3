.\" Copyright (c) 2014 Apple Inc
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 4. Neither the name of Apple Computer nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"
.Dd 03/03/14
.Dt os_activity_initiate 3
.Os Darwin
.Sh NAME
.Nm os_activity_initiate ,
.Nm os_activity_initiate_f ,
.Nm os_activity_start ,
.Nm os_activity_end
.Nd activity related routines
.Sh SYNOPSIS
.In os/activity.h
.Ft void
.Fn os_activity_initiate "const char *description" "uint32_t flags" "void (^activity_block)(void)"
.Ft void
.Fn os_activity_initiate_f "const char *description" "uint32_t flags" "void *ctx" "void function(void *ctx)"
.Ft os_activity_t
.Fn os_activity_start "const char *description" "uint32_t flags"
.Ft void
.Fn os_activity_end "os_activity_t activity"
.Sh DESCRIPTION
An activity is essentially an identifier that is created by the system. The identifier is transported with work via GCD, XPC and other mechanisms. Activities also have a ring buffer associated with them to log all related
.Xr os_trace 3
messages. This technique makes debugging a programs easier since it correlates the log messages to the area in question. Although an activity appears to have a start/end, it is only finished when no other work related to it is enqueued to be processed. Activity functions only allow static strings for performance and privacy, similar to
.Xr os_trace 3 .
.Pp
Supported Activity Name:
.Bd -literal -offset indent
os_activity_initiate("indexing database", OS_ACTIVITY_FLAG_DEFAULT, ^(void) {
	[self indexDatabase];
});
.Ed
.Pp
Unsupported Activity Name:
.Bd -literal -offset indent
snprintf(buffer, "indexing database for %s", username);
os_activity_initiate(buffer, OS_ACTIVITY_FLAG_DEFAULT, ^(void) {
	[self indexDatabase];
});
.Ed
.Pp
.Nm
and
.Nm os_activity_initiate_f
wraps a new activity begin and end in a simple call. Useful if caller does not care about identifier.
.Pp
.Nm os_activity_start
and
.Nm os_activity_end
can be used for situations where a context is involved or work is handled asynchronously. Calling
.Nm os_activity_end
with the result from
.Nm os_activity_start
only signifies that control returned to the caller.  An activity is not "complete" until all enqueued work is finished.
.Sh EXAMPLES
Example use of activity with a message.
.Pp
.Bd -literal -offset indent
#include <os/trace.h>
#include <os/activity.h>

- (IBOutlet) indexDatabase:(id) sender {
	os_activity_initiate("index database", OS_ACTIVITY_FLAG_DEFAULT, ^{
		os_trace("re-indexing database for %d", self.uid);
		
		[self reIndex: self.uid];
	});
}
.Ed
.Sh SEE ALSO
.Xr ostraceutil 1 ,
.Xr os_trace 3
