.\" DO NOT EDIT THIS FILE, IT IS NOT THE MASTER!
.\" IT IS GENERATED AUTOMATICALLY FROM sudoers.mdoc.in
.\"
.\" Copyright (c) 1994-1996, 1998-2005, 2007-2014
.\" Todd C. Miller <Todd.Miller@courtesan.com>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\" ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.\"
.\" Sponsored in part by the Defense Advanced Research Projects
.\" Agency (DARPA) and Air Force Research Laboratory, Air Force
.\" Materiel Command, USAF, under agreement number F39502-99-1-0512.
.\"
.TH "SUDOERS" "5" "February 9, 2015" "Sudo 1.7.10p9" "File Formats Manual"
.nh
.if n .ad l
.SH "NAME"
\fBsudoers\fR
\- list of which users may execute what
.SH "DESCRIPTION"
The
\fIsudoers\fR
file is composed of two types of entries: aliases
(basically variables) and user specifications (which specify who
may run what).
.PP
When multiple entries match for a user, they are applied in order.
Where there are multiple matches, the last match is used (which is
not necessarily the most specific match).
.PP
The
\fIsudoers\fR
grammar will be described below in Extended Backus-Naur
Form (EBNF).
Don't despair if you are unfamiliar with EBNF; it is fairly simple,
and the definitions below are annotated.
.SS "Quick guide to EBNF"
EBNF is a concise and exact way of describing the grammar of a language.
Each EBNF definition is made up of
\fIproduction rules\fR.
E.g.,
.PP
\fRsymbol ::= definition\fR | \fRalternate1\fR | \fRalternate2 ...\fR
.PP
Each
\fIproduction rule\fR
references others and thus makes up a
grammar for the language.
EBNF also contains the following
operators, which many readers will recognize from regular
expressions.
Do not, however, confuse them with
\(lqwildcard\(rq
characters, which have different meanings.
.TP 6n
\fR\&?\fR
Means that the preceding symbol (or group of symbols) is optional.
That is, it may appear once or not at all.
.TP 6n
\fR*\fR
Means that the preceding symbol (or group of symbols) may appear
zero or more times.
.TP 6n
\fR+\fR
Means that the preceding symbol (or group of symbols) may appear
one or more times.
.PP
Parentheses may be used to group symbols together.
For clarity,
we will use single quotes
('')
to designate what is a verbatim character string (as opposed to a symbol name).
.SS "Aliases"
There are four kinds of aliases:
\fRUser_Alias\fR,
\fRRunas_Alias\fR,
\fRHost_Alias\fR
and
\fRCmnd_Alias\fR.
.nf
.sp
.RS 0n
Alias ::= 'User_Alias'  User_Alias (':' User_Alias)* |
          'Runas_Alias' Runas_Alias (':' Runas_Alias)* |
          'Host_Alias'  Host_Alias (':' Host_Alias)* |
          'Cmnd_Alias'  Cmnd_Alias (':' Cmnd_Alias)*

User_Alias ::= NAME '=' User_List

Runas_Alias ::= NAME '=' Runas_List

Host_Alias ::= NAME '=' Host_List

Cmnd_Alias ::= NAME '=' Cmnd_List

NAME ::= [A-Z]([A-Z][0-9]_)*
.RE
.fi
.PP
Each
\fIalias\fR
definition is of the form
.nf
.sp
.RS 0n
Alias_Type NAME = item1, item2, ...
.RE
.fi
.PP
where
\fIAlias_Type\fR
is one of
\fRUser_Alias\fR,
\fRRunas_Alias\fR,
\fRHost_Alias\fR,
or
\fRCmnd_Alias\fR.
A
\fRNAME\fR
is a string of uppercase letters, numbers,
and underscore characters
(\(oq_\(cq).
A
\fRNAME\fR
\fBmust\fR
start with an
uppercase letter.
It is possible to put several alias definitions
of the same type on a single line, joined by a colon
(\(oq:\&\(cq).
E.g.,
.nf
.sp
.RS 0n
Alias_Type NAME = item1, item2, item3 : NAME = item4, item5
.RE
.fi
.PP
The definitions of what constitutes a valid
\fIalias\fR
member follow.
.nf
.sp
.RS 0n
User_List ::= User |
              User ',' User_List

User ::= '!'* user name |
         '!'* #uid |
         '!'* %group |
         '!'* %#gid |
         '!'* +netgroup |
         '!'* %:nonunix_group |
         '!'* %:#nonunix_gid |
         '!'* User_Alias
.RE
.fi
.PP
A
\fRUser_List\fR
is made up of one or more user names, user ids
(prefixed with
\(oq#\(cq),
system group names and ids (prefixed with
\(oq%\(cq
and
\(oq%#\(cq
respectively), netgroups (prefixed with
\(oq+\(cq),
non-Unix group names and IDs (prefixed with
\(oq%:\(cq
and
\(oq%:#\(cq
respectively) and
\fRUser_Alias\fRes.
Each list item may be prefixed with zero or more
\(oq\&!\(cq
operators.
An odd number of
\(oq\&!\(cq
operators negate the value of
the item; an even number just cancel each other out.
.PP
A
\fRuser name\fR,
\fRuid\fR,
\fRgroup\fR,
\fRgid\fR,
\fRnetgroup\fR,
\fRnonunix_group\fR
or
\fRnonunix_gid\fR
may be enclosed in double quotes to avoid the
need for escaping special characters.
Alternately, special characters
may be specified in escaped hex mode, e.g.\& \ex20 for space.
When
using double quotes, any prefix characters must be included inside
the quotes.
.PP
The actual
\fRnonunix_group\fR
and
\fRnonunix_gid\fR
syntax depends on
the underlying implementation.
For instance, the QAS AD backend supports the following formats:
.TP 6n
\fB\(bu\fR
Group in the same domain: "%:Group Name"
.TP 6n
\fB\(bu\fR
Group in any domain: "%:Group Name@FULLY.QUALIFIED.DOMAIN"
.TP 6n
\fB\(bu\fR
Group SID: "%:S-1-2-34-5678901234-5678901234-5678901234-567"
.PP
Note that quotes around group names are optional.
Unquoted strings must use a backslash
(\(oq\e\(cq)
to escape spaces and special characters.
See
\fIOther special characters and reserved words\fR
for a list of
characters that need to be escaped.
.nf
.sp
.RS 0n
Runas_List ::= Runas_Member |
               Runas_Member ',' Runas_List

Runas_Member ::= '!'* user name |
                 '!'* #uid |
                 '!'* %group |
                 '!'* %#gid |
                 '!'* %:nonunix_group |
                 '!'* %:#nonunix_gid |
                 '!'* +netgroup |
                 '!'* Runas_Alias
.RE
.fi
.PP
A
\fRRunas_List\fR
is similar to a
\fRUser_List\fR
except that instead
of
\fRUser_Alias\fRes
it can contain
\fRRunas_Alias\fRes.
Note that
user names and groups are matched as strings.
In other words, two
users (groups) with the same uid (gid) are considered to be distinct.
If you wish to match all user names with the same uid (e.g.\&
root and toor), you can use a uid instead (#0 in the example given).
.nf
.sp
.RS 0n
Host_List ::= Host |
              Host ',' Host_List

Host ::= '!'* host name |
         '!'* ip_addr |
         '!'* network(/netmask)? |
         '!'* +netgroup |
         '!'* Host_Alias
.RE
.fi
.PP
A
\fRHost_List\fR
is made up of one or more host names, IP addresses,
network numbers, netgroups (prefixed with
\(oq+\(cq)
and other aliases.
Again, the value of an item may be negated with the
\(oq\&!\(cq
operator.
If you do not specify a netmask along with the network number,
\fBsudo\fR
will query each of the local host's network interfaces and,
if the network number corresponds to one of the hosts's network
interfaces, the corresponding netmask will be used.
The netmask
may be specified either in standard IP address notation
(e.g.\& 255.255.255.0 or ffff:ffff:ffff:ffff::),
or CIDR notation (number of bits, e.g.\& 24 or 64).
A host name may include shell-style wildcards (see the
\fIWildcards\fR
section below),
but unless the
\fRhost name\fR
command on your machine returns the fully
qualified host name, you'll need to use the
\fIfqdn\fR
option for wildcards to be useful.
Note that
\fBsudo\fR
only inspects actual network interfaces; this means that IP address
127.0.0.1 (localhost) will never match.
Also, the host name
\(lqlocalhost\(rq
will only match if that is the actual host name, which is usually
only the case for non-networked systems.
.nf
.sp
.RS 0n
Cmnd_List ::= Cmnd |
              Cmnd ',' Cmnd_List

command name ::= file name |
                 file name args |
                 file name '""'

Cmnd ::= '!'* command name |
         '!'* directory |
         '!'* "sudoedit" |
         '!'* Cmnd_Alias
.RE
.fi
.PP
A
\fRCmnd_List\fR
is a list of one or more command names, directories, and other aliases.
A command name is a fully qualified file name which may include
shell-style wildcards (see the
\fIWildcards\fR
section below).
A simple file name allows the user to run the command with any
arguments he/she wishes.
However, you may also specify command line arguments (including
wildcards).
Alternately, you can specify
\fR\&""\fR
to indicate that the command
may only be run
\fBwithout\fR
command line arguments.
A directory is a
fully qualified path name ending in a
\(oq/\(cq.
When you specify a directory in a
\fRCmnd_List\fR,
the user will be able to run any file within that directory
(but not in any sub-directories therein).
.PP
If a
\fRCmnd\fR
has associated command line arguments, then the arguments
in the
\fRCmnd\fR
must match exactly those given by the user on the command line
(or match the wildcards if there are any).
Note that the following characters must be escaped with a
\(oq\e\(cq
if they are used in command arguments:
\(oq,\&\(cq,
\(oq:\&\(cq,
\(oq=\&\(cq,
\(oq\e\(cq.
The special command
\(lq\fRsudoedit\fR\(rq
is used to permit a user to run
\fBsudo\fR
with the
\fB\-e\fR
option (or as
\fBsudoedit\fR).
It may take command line arguments just as a normal command does.
.SS "Defaults"
Certain configuration options may be changed from their default
values at run-time via one or more
\fRDefault_Entry\fR
lines.
These may affect all users on any host, all users on a specific host, a
specific user, a specific command, or commands being run as a specific user.
Note that per-command entries may not include command line arguments.
If you need to specify arguments, define a
\fRCmnd_Alias\fR
and reference
that instead.
.nf
.sp
.RS 0n
Default_Type ::= 'Defaults' |
                 'Defaults' '@' Host_List |
                 'Defaults' ':' User_List |
                 'Defaults' '!' Cmnd_List |
                 'Defaults' '>' Runas_List

Default_Entry ::= Default_Type Parameter_List

Parameter_List ::= Parameter |
                   Parameter ',' Parameter_List

Parameter ::= Parameter '=' Value |
              Parameter '+=' Value |
              Parameter '-=' Value |
              '!'* Parameter
.RE
.fi
.PP
Parameters may be
\fBflags\fR,
\fBinteger\fR
values,
\fBstrings\fR,
or
\fBlists\fR.
Flags are implicitly boolean and can be turned off via the
\(oq\&!\(cq
operator.
Some integer, string and list parameters may also be
used in a boolean context to disable them.
Values may be enclosed
in double quotes
(\&"")
when they contain multiple words.
Special characters may be escaped with a backslash
(\(oq\e\(cq).
.PP
Lists have two additional assignment operators,
\fR+=\fR
and
\fR-=\fR.
These operators are used to add to and delete from a list respectively.
It is not an error to use the
\fR-=\fR
operator to remove an element
that does not exist in a list.
.PP
Defaults entries are parsed in the following order: generic, host
and user Defaults first, then runas Defaults and finally command
defaults.
.PP
See
\fISUDOERS OPTIONS\fR
for a list of supported Defaults parameters.
.SS "User specification"
.nf
.RS 0n
User_Spec ::= User_List Host_List '=' Cmnd_Spec_List \e
              (':' Host_List '=' Cmnd_Spec_List)*

Cmnd_Spec_List ::= Cmnd_Spec |
                   Cmnd_Spec ',' Cmnd_Spec_List

Cmnd_Spec ::= Runas_Spec? Tag_Spec* Cmnd

Runas_Spec ::= '(' Runas_List? (':' Runas_List)? ')'

Tag_Spec ::= ('NOPASSWD:' | 'PASSWD:' | 'NOEXEC:' | 'EXEC:' |
              'SETENV:' | 'NOSETENV:' | 'LOG_INPUT:' | 'NOLOG_INPUT:' |
              'LOG_OUTPUT:' | 'NOLOG_OUTPUT:')
.RE
.fi
.PP
A
\fBuser specification\fR
determines which commands a user may run
(and as what user) on specified hosts.
By default, commands are
run as
\fBroot\fR,
but this can be changed on a per-command basis.
.PP
The basic structure of a user specification is
\(lqwho where = (as_whom) what\(rq.
Let's break that down into its constituent parts:
.SS "Runas_Spec"
A
\fRRunas_Spec\fR
determines the user and/or the group that a command
may be run as.
A fully-specified
\fRRunas_Spec\fR
consists of two
\fRRunas_List\fRs
(as defined above) separated by a colon
(\(oq:\&\(cq)
and enclosed in a set of parentheses.
The first
\fRRunas_List\fR
indicates
which users the command may be run as via
\fBsudo\fR's
\fB\-u\fR
option.
The second defines a list of groups that can be specified via
\fBsudo\fR's
\fB\-g\fR
option.
If both
\fRRunas_List\fRs
are specified, the command may be run with any combination of users
and groups listed in their respective
\fRRunas_List\fRs.
If only the first is specified, the command may be run as any user
in the list but no
\fB\-g\fR
option
may be specified.
If the first
\fRRunas_List\fR
is empty but the
second is specified, the command may be run as the invoking user
with the group set to any listed in the
\fRRunas_List\fR.
If no
\fRRunas_Spec\fR
is specified the command may be run as
\fBroot\fR
and
no group may be specified.
.PP
A
\fRRunas_Spec\fR
sets the default for the commands that follow it.
What this means is that for the entry:
.nf
.sp
.RS 0n
dgb	boulder = (operator) /bin/ls, /bin/kill, /usr/bin/lprm
.RE
.fi
.PP
The user
\fBdgb\fR
may run
\fI/bin/ls\fR,
\fI/bin/kill\fR,
and
\fI/usr/bin/lprm\fR\(embut
only as
\fBoperator\fR.
E.g.,
.nf
.sp
.RS 0n
$ sudo -u operator /bin/ls
.RE
.fi
.PP
It is also possible to override a
\fRRunas_Spec\fR
later on in an entry.
If we modify the entry like so:
.nf
.sp
.RS 0n
dgb	boulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm
.RE
.fi
.PP
Then user
\fBdgb\fR
is now allowed to run
\fI/bin/ls\fR
as
\fBoperator\fR,
but
\fI/bin/kill\fR
and
\fI/usr/bin/lprm\fR
as
\fBroot\fR.
.PP
We can extend this to allow
\fBdgb\fR
to run
\fR/bin/ls\fR
with either
the user or group set to
\fBoperator\fR:
.nf
.sp
.RS 0n
dgb	boulder = (operator : operator) /bin/ls, (root) /bin/kill,\e
	/usr/bin/lprm
.RE
.fi
.PP
Note that while the group portion of the
\fRRunas_Spec\fR
permits the
user to run as command with that group, it does not force the user
to do so.
If no group is specified on the command line, the command
will run with the group listed in the target user's password database
entry.
The following would all be permitted by the sudoers entry above:
.nf
.sp
.RS 0n
$ sudo -u operator /bin/ls
$ sudo -u operator -g operator /bin/ls
$ sudo -g operator /bin/ls
.RE
.fi
.PP
In the following example, user
\fBtcm\fR
may run commands that access
a modem device file with the dialer group.
.nf
.sp
.RS 0n
tcm	boulder = (:dialer) /usr/bin/tip, /usr/bin/cu,\e
	/usr/local/bin/minicom
.RE
.fi
.PP
Note that in this example only the group will be set, the command
still runs as user
\fBtcm\fR.
E.g.\&
.nf
.sp
.RS 0n
$ sudo -g dialer /usr/bin/cu
.RE
.fi
.PP
Multiple users and groups may be present in a
\fRRunas_Spec\fR,
in which case the user may select any combination of users and groups via the
\fB\-u\fR
and
\fB\-g\fR
options.
In this example:
.nf
.sp
.RS 0n
alan	ALL = (root, bin : operator, system) ALL
.RE
.fi
.PP
user
\fBalan\fR
may run any command as either user root or bin,
optionally setting the group to operator or system.
.SS "Tag_Spec"
A command may have zero or more tags associated with it.
There are
ten possible tag values:
\fRNOPASSWD\fR,
\fRPASSWD\fR,
\fRNOEXEC\fR,
\fREXEC\fR,
\fRSETENV\fR,
\fRNOSETENV\fR,
\fRLOG_INPUT\fR,
\fRNOLOG_INPUT\fR,
\fRLOG_OUTPUT\fR
and
\fRNOLOG_OUTPUT\fR.
Once a tag is set on a
\fRCmnd\fR,
subsequent
\fRCmnd\fRs
in the
\fRCmnd_Spec_List\fR,
inherit the tag unless it is overridden by the opposite tag (in other words,
\fRPASSWD\fR
overrides
\fRNOPASSWD\fR
and
\fRNOEXEC\fR
overrides
\fREXEC\fR).
.PP
\fINOPASSWD and PASSWD\fR
.PP
By default,
\fBsudo\fR
requires that a user authenticate him or herself
before running a command.
This behavior can be modified via the
\fRNOPASSWD\fR
tag.
Like a
\fRRunas_Spec\fR,
the
\fRNOPASSWD\fR
tag sets
a default for the commands that follow it in the
\fRCmnd_Spec_List\fR.
Conversely, the
\fRPASSWD\fR
tag can be used to reverse things.
For example:
.nf
.sp
.RS 0n
ray	rushmore = NOPASSWD: /bin/kill, /bin/ls, /usr/bin/lprm
.RE
.fi
.PP
would allow the user
\fBray\fR
to run
\fI/bin/kill\fR,
\fI/bin/ls\fR,
and
\fI/usr/bin/lprm\fR
as
\fBroot\fR
on the machine rushmore without authenticating himself.
If we only want
\fBray\fR
to be able to
run
\fI/bin/kill\fR
without a password the entry would be:
.nf
.sp
.RS 0n
ray	rushmore = NOPASSWD: /bin/kill, PASSWD: /bin/ls, /usr/bin/lprm
.RE
.fi
.PP
Note, however, that the
\fRPASSWD\fR
tag has no effect on users who are in the group specified by the
\fIexempt_group\fR
option.
.PP
By default, if the
\fRNOPASSWD\fR
tag is applied to any of the entries for a user on the current host,
he or she will be able to run
\(lq\fRsudo -l\fR\(rq
without a password.
Additionally, a user may only run
\(lq\fRsudo -v\fR\(rq
without a password if the
\fRNOPASSWD\fR
tag is present for all a user's entries that pertain to the current host.
This behavior may be overridden via the
\fIverifypw\fR
and
\fIlistpw\fR
options.
.PP
\fINOEXEC and EXEC\fR
.PP
If
\fBsudo\fR
has been compiled with
\fInoexec\fR
support and the underlying operating system supports it, the
\fRNOEXEC\fR
tag can be used to prevent a dynamically-linked executable from
running further commands itself.
.PP
In the following example, user
\fBaaron\fR
may run
\fI/usr/bin/more\fR
and
\fI/usr/bin/vi\fR
but shell escapes will be disabled.
.nf
.sp
.RS 0n
aaron	shanty = NOEXEC: /usr/bin/more, /usr/bin/vi
.RE
.fi
.PP
See the
\fIPreventing shell escapes\fR
section below for more details on how
\fRNOEXEC\fR
works and whether or not it will work on your system.
.PP
\fISETENV and NOSETENV\fR
.PP
These tags override the value of the
\fIsetenv\fR
option on a per-command basis.
Note that if
\fRSETENV\fR
has been set for a command, the user may disable the
\fIenv_reset\fR
option from the command line via the
\fB\-E\fR
option.
Additionally, environment variables set on the command
line are not subject to the restrictions imposed by
\fIenv_check\fR,
\fIenv_delete\fR,
or
\fIenv_keep\fR.
As such, only trusted users should be allowed to set variables in this manner.
If the command matched is
\fBALL\fR,
the
\fRSETENV\fR
tag is implied for that command; this default may be overridden by use of the
\fRNOSETENV\fR
tag.
.PP
\fILOG_INPUT and NOLOG_INPUT\fR
.PP
These tags override the value of the
\fIlog_input\fR
option on a per-command basis.
For more information, see the description of
\fIlog_input\fR
in the
\fISUDOERS OPTIONS\fR
section below.
.PP
\fILOG_OUTPUT and NOLOG_OUTPUT\fR
.PP
These tags override the value of the
\fIlog_output\fR
option on a per-command basis.
For more information, see the description of
\fIlog_output\fR
in the
\fISUDOERS OPTIONS\fR
section below.
.SS "Wildcards"
\fBsudo\fR
allows shell-style
\fIwildcards\fR
(aka meta or glob characters)
to be used in host names, path names and command line arguments in the
\fIsudoers\fR
file.
Wildcard matching is done via the
\fBPOSIX\fR
glob(3)
and
fnmatch(3)
routines.
Note that these are
\fInot\fR
regular expressions.
.TP 10n
\fR*\fR
Matches any set of zero or more characters.
.TP 10n
\fR\&?\fR
Matches any single character.
.TP 10n
\fR[...]\fR
Matches any character in the specified range.
.TP 10n
\fR[!...]\fR
Matches any character
\fBnot\fR
in the specified range.
.TP 10n
\fR\ex\fR
For any character
\(oqx\(cq,
evaluates to
\(oqx\(cq.
This is used to escape special characters such as:
\(oq*\(cq,
\(oq\&?\(cq,
\(oq[\&\(cq,
and
\(oq]\&\(cq.
.PP
POSIX character classes may also be used if your system's
glob(3)
and
fnmatch(3)
functions support them.
However, because the
\(oq:\&\(cq
character has special meaning in
\fIsudoers\fR,
it must be
escaped.
For example:
.nf
.sp
.RS 4n
/bin/ls [[:\&alpha:\&]]*
.RE
.fi
.PP
Would match any file name beginning with a letter.
.PP
Note that a forward slash
(\(oq/\(cq)
will
\fBnot\fR
be matched by
wildcards used in the path name.
This is to make a path like:
.nf
.sp
.RS 4n
/usr/bin/*
.RE
.fi
.PP
match
\fI/usr/bin/who\fR
but not
\fI/usr/bin/X11/xterm\fR.
.PP
When matching the command line arguments, however, a slash
\fBdoes\fR
get matched by wildcards since command line arguments may contain
arbitrary strings and not just path names.
.PP
Wildcards in command line arguments should be used with care.
Because command line arguments are matched as a single, concatenated
string, a wildcard such as
\(oq\&?\(cq
or
\(oq*\(cq
can match multiple words.
For example, while a sudoers entry like:
.nf
.sp
.RS 4n
%operator ALL = /bin/cat /var/log/messages*
.RE
.fi
.PP
will allow command like:
.nf
.sp
.RS 4n
$ sudo cat /var/log/messages.1
.RE
.fi
.PP
It will also allow:
.nf
.sp
.RS 4n
$ sudo cat /var/log/messages /etc/shadow
.RE
.fi
.PP
which is probably not what was intended.
.SS "Exceptions to wildcard rules"
The following exceptions apply to the above rules:
.TP 10n
\fR\&""\fR
If the empty string
\fR\&""\fR
is the only command line argument in the
\fIsudoers\fR
entry it means that command is not allowed to be run with
\fBany\fR
arguments.
.TP 10n
sudoedit
Command line arguments to the
\fIsudoedit\fR
built-in command should always be path names, so a forward slash
(\(oq/\(cq)
will not be matched by a wildcard.
.SS "Including other files from within sudoers"
It is possible to include other
\fIsudoers\fR
files from within the
\fIsudoers\fR
file currently being parsed using the
\fR#include\fR
and
\fR#includedir\fR
directives.
.PP
This can be used, for example, to keep a site-wide
\fIsudoers\fR
file in addition to a local, per-machine file.
For the sake of this example the site-wide
\fIsudoers\fR
will be
\fI/etc/sudoers\fR
and the per-machine one will be
\fI/etc/sudoers.local\fR.
To include
\fI/etc/sudoers.local\fR
from within
\fI/etc/sudoers\fR
we would use the
following line in
\fI/etc/sudoers\fR:
.nf
.sp
.RS 4n
#include /etc/sudoers.local
.RE
.fi
.PP
When
\fBsudo\fR
reaches this line it will suspend processing of the current file
(\fI/etc/sudoers\fR)
and switch to
\fI/etc/sudoers.local\fR.
Upon reaching the end of
\fI/etc/sudoers.local\fR,
the rest of
\fI/etc/sudoers\fR
will be processed.
Files that are included may themselves include other files.
A hard limit of 128 nested include files is enforced to prevent include
file loops.
.PP
If the path to the include file is not fully-qualified (does not
begin with a
\(oq/\(cq,
it must be located in the same directory as the sudoers file it was
included from.
For example, if
\fI/etc/sudoers\fR
contains the line:
.nf
.sp
.RS 4n
\fR#include sudoers.local\fR
.RE
.fi
.PP
the file that will be included is
\fI/etc/sudoers.local\fR.
.PP
The file name may also include the
\fR%h\fR
escape, signifying the short form of the host name.
In other words, if the machine's host name is
\(lqxerxes\(rq,
then
.nf
.sp
.RS 4n
#include /etc/sudoers.%h
.RE
.fi
.PP
will cause
\fBsudo\fR
to include the file
\fI/etc/sudoers.xerxes\fR.
.PP
The
\fR#includedir\fR
directive can be used to create a
\fIsudo.d\fR
directory that the system package manager can drop
\fIsudoers\fR
rules
into as part of package installation.
For example, given:
.nf
.sp
.RS 4n
#includedir /etc/sudoers.d
.RE
.fi
.PP
\fBsudo\fR
will read each file in
\fI/etc/sudoers.d\fR,
skipping file names that end in
\(oq~\(cq
or contain a
\(oq.\&\(cq
character to avoid causing problems with package manager or editor
temporary/backup files.
Files are parsed in sorted lexical order.
That is,
\fI/etc/sudoers.d/01_first\fR
will be parsed before
\fI/etc/sudoers.d/10_second\fR.
Be aware that because the sorting is lexical, not numeric,
\fI/etc/sudoers.d/1_whoops\fR
would be loaded
\fBafter\fR
\fI/etc/sudoers.d/10_second\fR.
Using a consistent number of leading zeroes in the file names can be used
to avoid such problems.
.PP
Note that unlike files included via
\fR#include\fR,
\fBvisudo\fR
will not edit the files in a
\fR#includedir\fR
directory unless one of them contains a syntax error.
It is still possible to run
\fBvisudo\fR
with the
\fB\-f\fR
flag to edit the files directly.
.SS "Other special characters and reserved words"
The pound sign
(\(oq#\(cq)
is used to indicate a comment (unless it is part of a #include
directive or unless it occurs in the context of a user name and is
followed by one or more digits, in which case it is treated as a
uid).
Both the comment character and any text after it, up to the end of
the line, are ignored.
.PP
The reserved word
\fBALL\fR
is a built-in
\fIalias\fR
that always causes a match to succeed.
It can be used wherever one might otherwise use a
\fRCmnd_Alias\fR,
\fRUser_Alias\fR,
\fRRunas_Alias\fR,
or
\fRHost_Alias\fR.
You should not try to define your own
\fIalias\fR
called
\fBALL\fR
as the built-in alias will be used in preference to your own.
Please note that using
\fBALL\fR
can be dangerous since in a command context, it allows the user to run
\fBany\fR
command on the system.
.PP
An exclamation point
(\(oq\&!\(cq)
can be used as a logical
\fInot\fR
operator both in an
\fIalias\fR
and in front of a
\fRCmnd\fR.
This allows one to exclude certain values.
Note, however, that using a
\(oq\&!\(cq
in conjunction with the built-in
\fBALL\fR
alias to allow a user to run
\(lqall but a few\(rq
commands rarely works as intended (see
\fISECURITY NOTES\fR
below).
.PP
Long lines can be continued with a backslash
(\(oq\e\(cq)
as the last character on the line.
.PP
White space between elements in a list as well as special syntactic
characters in a
\fIUser Specification\fR
(\(oq=\&\(cq,
\(oq:\&\(cq,
\(oq(\&\(cq,
\(oq)\&\(cq)
is optional.
.PP
The following characters must be escaped with a backslash
(\(oq\e\(cq)
when used as part of a word (e.g.\& a user name or host name):
\(oq\&!\(cq,
\(oq=\&\(cq,
\(oq:\&\(cq,
\(oq,\&\(cq,
\(oq(\&\(cq,
\(oq)\&\(cq,
\(oq\e\(cq.
.SH "SUDOERS OPTIONS"
\fBsudo\fR's
behavior can be modified by
\fRDefault_Entry\fR
lines, as explained earlier.
A list of all supported Defaults parameters, grouped by type, are listed below.
.PP
\fBBoolean Flags\fR:
.TP 18n
always_set_home
If enabled,
\fBsudo\fR
will set the
\fRHOME\fR
environment variable to the home directory of the target user
(which is root unless the
\fB\-u\fR
option is used).
This effectively means that the
\fB\-H\fR
option is always implied.
Note that
\fRHOME\fR
is already set when the the
\fIenv_reset\fR
option is enabled, so
\fIalways_set_home\fR
is only effective for configurations where either
\fIenv_reset\fR
is disabled or
\fRHOME\fR
is present in the
\fIenv_keep\fR
list.
This flag is
\fIoff\fR
by default.
.TP 18n
authenticate
If set, users must authenticate themselves via a password (or other
means of authentication) before they may run commands.
This default may be overridden via the
\fRPASSWD\fR
and
\fRNOPASSWD\fR
tags.
This flag is
\fIon\fR
by default.
.TP 18n
closefrom_override
If set, the user may use
\fBsudo\fR's
\fB\-C\fR
option which overrides the default starting point at which
\fBsudo\fR
begins closing open file descriptors.
This flag is
\fIoff\fR
by default.
.TP 18n
compress_io
If set, and
\fBsudo\fR
is configured to log a command's input or output,
the I/O logs will be compressed using
\fBzlib\fR.
This flag is
\fIon\fR
by default when
\fBsudo\fR
is compiled with
\fBzlib\fR
support.
.TP 18n
env_editor
If set,
\fBvisudo\fR
will use the value of the
\fREDITOR\fR
or
\fRVISUAL\fR
environment variables before falling back on the default editor list.
Note that this may create a security hole as it allows the user to
run any arbitrary command as root without logging.
A safer alternative is to place a colon-separated list of editors
in the
\fReditor\fR
variable.
\fBvisudo\fR
will then only use the
\fREDITOR\fR
or
\fRVISUAL\fR
if they match a value specified in
\fReditor\fR.
This flag is
\fIon\fR
by
default.
.TP 18n
env_reset
If set,
\fBsudo\fR
will run the command in a minimal environment containing the
\fRTERM\fR,
\fRPATH\fR,
\fRHOME\fR,
\fRMAIL\fR,
\fRSHELL\fR,
\fRLOGNAME\fR,
\fRUSER\fR,
\fRUSERNAME\fR
and
\fRSUDO_*\fR
variables.
Any
variables in the caller's environment that match the
\fRenv_keep\fR
and
\fRenv_check\fR
lists are then added, followed by any variables present in the file
specified by the
\fIenv_file\fR
option (if any).
The default contents of the
\fRenv_keep\fR
and
\fRenv_check\fR
lists are displayed when
\fBsudo\fR
is run by root with the
\fB\-V\fR
option.
If the
\fIsecure_path\fR
option is set, its value will be used for the
\fRPATH\fR
environment variable.
This flag is
\fIon\fR
by default.
.TP 18n
fast_glob
Normally,
\fBsudo\fR
uses the
glob(3)
function to do shell-style globbing when matching path names.
However, since it accesses the file system,
glob(3)
can take a long time to complete for some patterns, especially
when the pattern references a network file system that is mounted
on demand (auto mounted).
The
\fIfast_glob\fR
option causes
\fBsudo\fR
to use the
fnmatch(3)
function, which does not access the file system to do its matching.
The disadvantage of
\fIfast_glob\fR
is that it is unable to match relative path names such as
\fI./ls\fR
or
\fI../bin/ls\fR.
This has security implications when path names that include globbing
characters are used with the negation operator,
\(oq!\&\(cq,
as such rules can be trivially bypassed.
As such, this option should not be used when
\fIsudoers\fR
contains rules that contain negated path names which include globbing
characters.
This flag is
\fIoff\fR
by default.
.TP 18n
fqdn
Set this flag if you want to put fully qualified host names in the
\fIsudoers\fR
file when the local host name (as returned by the
\fRhostname\fR
command) does not contain the domain name.
In other words, instead of myhost you would use myhost.mydomain.edu.
You may still use the short form if you wish (and even mix the two).
This option is only effective when the
\(lqcanonical\(rq
host name, as returned by the
\fBgetaddrinfo\fR()
or
\fBgethostbyname\fR()
function, is a fully-qualified domain name.
This is usually the case when the system is configured to use DNS
for host name resolution.
.sp
If the system is configured to use the
\fI/etc/hosts\fR
file in preference to DNS, the
\(lqcanonical\(rq
host name may not be fully-qualified.
The order that sources are queried for host name resolution
is usually specified in the
\fI/etc/nsswitch.conf\fR,
\fI/etc/netsvc.conf\fR,
\fI/etc/host.conf\fR,
or, in some cases,
\fI/etc/resolv.conf\fR
file.
In the
\fI/etc/hosts\fR
file, the first host name of the entry is considered to be the
\(lqcanonical\(rq
name; subsequent names are aliases that are not used by
\fBsudoers\fR.
For example, the following hosts file line for the machine
\(lqxyzzy\(rq
has the fully-qualified domain name as the
\(lqcanonical\(rq
host name, and the short version as an alias.
.sp
.RS 24n
192.168.1.1	xyzzy.sudo.ws xyzzy
.RE
.RS 18n
.sp
If the machine's hosts file entry is not formatted properly, the
\fIfqdn\fR
option will not be effective if it is queried before DNS.
.sp
Beware that when using DNS for host name resolution, turning on
\fIfqdn\fR
requires
\fBsudoers\fR
to make DNS lookups which renders
\fBsudo\fR
unusable if DNS stops working (for example if the machine is disconnected
from the network).
Also note that just like with the hosts file, you must use the
\(lqcanonical\(rq
name as DNS knows it.
That is, you may not use a host alias
(\fRCNAME\fR
entry)
due to performance issues and the fact that there is no way to get all
aliases from DNS.
.sp
This flag is
\fIoff\fR
by default.
.RE
.TP 18n
ignore_dot
If set,
\fBsudo\fR
will ignore "." or "" (both denoting current directory) in the
\fRPATH\fR
environment variable; the
\fRPATH\fR
itself is not modified.
This flag is
\fIoff\fR
by default.
.TP 18n
ignore_local_sudoers
If set via LDAP, parsing of
\fI/private/etc/sudoers\fR
will be skipped.
This is intended for Enterprises that wish to prevent the usage of local
sudoers files so that only LDAP is used.
This thwarts the efforts of rogue operators who would attempt to add roles to
\fI/private/etc/sudoers\fR.
When this option is present,
\fI/private/etc/sudoers\fR
does not even need to exist.
Since this option tells
\fBsudo\fR
how to behave when no specific LDAP entries have been matched, this
sudoOption is only meaningful for the
\fRcn=defaults\fR
section.
This flag is
\fIoff\fR
by default.
.TP 18n
insults
If set,
\fBsudo\fR
will insult users when they enter an incorrect password.
This flag is
\fIoff\fR
by default.
.TP 18n
log_host
If set, the host name will be logged in the (non-syslog)
\fBsudo\fR
log file.
This flag is
\fIoff\fR
by default.
.TP 18n
log_input
If set,
\fBsudo\fR
will run the command in a
\fIpseudo tty\fR
and log all user input.
If the standard input is not connected to the user's tty, due to
I/O redirection or because the command is part of a pipeline, that
input is also captured and stored in a separate log file.
.sp
Input is logged to the directory specified by the
\fIiolog_dir\fR
option
(\fI/var/log/sudo-io\fR
by default)
using a unique session ID that is included in the normal
\fBsudo\fR
log line, prefixed with
\(lq\fRTSID=\fR\(rq.
.sp
Note that user input may contain sensitive information such as
passwords (even if they are not echoed to the screen), which will
be stored in the log file unencrypted.
In most cases, logging the command output via
\fIlog_output\fR
is all that is required.
.TP 18n
log_output
If set,
\fBsudo\fR
will run the command in a
\fIpseudo tty\fR
and log all output that is sent to the screen, similar to the
script(1)
command.
If the standard output or standard error is not connected to the
user's tty, due to I/O redirection or because the command is part
of a pipeline, that output is also captured and stored in separate
log files.
.sp
Output is logged to the directory specified by the
\fIiolog_dir\fR
option
(\fI/var/log/sudo-io\fR
by default)
using a unique session ID that is included in the normal
\fBsudo\fR
log line, prefixed with
\(lq\fRTSID=\fR\(rq.
.sp
Output logs may be viewed with the
sudoreplay(8)
utility, which can also be used to list or search the available logs.
.TP 18n
log_year
If set, the four-digit year will be logged in the (non-syslog)
\fBsudo\fR
log file.
This flag is
\fIoff\fR
by default.
.TP 18n
long_otp_prompt
When validating with a One Time Password (OTP) scheme such as
\fBS/Key\fR
or
\fBOPIE\fR,
a two-line prompt is used to make it easier
to cut and paste the challenge to a local window.
It's not as pretty as the default but some people find it more convenient.
This flag is
\fIoff\fR
by default.
.TP 18n
mail_always
Send mail to the
\fImailto\fR
user every time a users runs
\fBsudo\fR.
This flag is
\fIoff\fR
by default.
.TP 18n
mail_badpass
Send mail to the
\fImailto\fR
user if the user running
\fBsudo\fR
does not enter the correct password.
If the command the user is attempting to run is not permitted by
\fIsudoers\fR
and one of the
\fImail_always\fR,
\fImail_no_host\fR,
\fImail_no_perms\fR
or
\fImail_no_user\fR
flags are set, this flag will have no effect.
This flag is
\fIoff\fR
by default.
.TP 18n
mail_no_host
If set, mail will be sent to the
\fImailto\fR
user if the invoking user exists in the
\fIsudoers\fR
file, but is not allowed to run commands on the current host.
This flag is
\fIoff\fR
by default.
.TP 18n
mail_no_perms
If set, mail will be sent to the
\fImailto\fR
user if the invoking user is allowed to use
\fBsudo\fR
but the command they are trying is not listed in their
\fIsudoers\fR
file entry or is explicitly denied.
This flag is
\fIoff\fR
by default.
.TP 18n
mail_no_user
If set, mail will be sent to the
\fImailto\fR
user if the invoking user is not in the
\fIsudoers\fR
file.
This flag is
\fIon\fR
by default.
.TP 18n
noexec
If set, all commands run via
\fBsudo\fR
will behave as if the
\fRNOEXEC\fR
tag has been set, unless overridden by a
\fREXEC\fR
tag.
See the description of
\fINOEXEC and EXEC\fR
below as well as the
\fIPreventing shell escapes\fR
section at the end of this manual.
This flag is
\fIoff\fR
by default.
.TP 18n
path_info
Normally,
\fBsudo\fR
will tell the user when a command could not be
found in their
\fRPATH\fR
environment variable.
Some sites may wish to disable this as it could be used to gather
information on the location of executables that the normal user does
not have access to.
The disadvantage is that if the executable is simply not in the user's
\fRPATH\fR,
\fBsudo\fR
will tell the user that they are not allowed to run it, which can be confusing.
This flag is
\fIon\fR
by default.
.TP 18n
passprompt_override
The password prompt specified by
\fIpassprompt\fR
will normally only be used if the password prompt provided by systems
such as PAM matches the string
\(lqPassword:\(rq.
If
\fIpassprompt_override\fR
is set,
\fIpassprompt\fR
will always be used.
This flag is
\fIoff\fR
by default.
.TP 18n
preserve_groups
By default,
\fBsudo\fR
will initialize the group vector to the list of groups the target user is in.
When
\fIpreserve_groups\fR
is set, the user's existing group vector is left unaltered.
The real and effective group IDs, however, are still set to match the
target user.
This flag is
\fIoff\fR
by default.
.TP 18n
pwfeedback
By default,
\fBsudo\fR
reads the password like most other Unix programs,
by turning off echo until the user hits the return (or enter) key.
Some users become confused by this as it appears to them that
\fBsudo\fR
has hung at this point.
When
\fIpwfeedback\fR
is set,
\fBsudo\fR
will provide visual feedback when the user presses a key.
Note that this does have a security impact as an onlooker may be able to
determine the length of the password being entered.
This flag is
\fIoff\fR
by default.
.TP 18n
requiretty
If set,
\fBsudo\fR
will only run when the user is logged in to a real tty.
When this flag is set,
\fBsudo\fR
can only be run from a login session and not via other means such as
cron(8)
or cgi-bin scripts.
This flag is
\fIoff\fR
by default.
.TP 18n
root_sudo
If set, root is allowed to run
\fBsudo\fR
too.
Disabling this prevents users from
\(lqchaining\(rq
\fBsudo\fR
commands to get a root shell by doing something like
\(lq\fRsudo sudo /bin/sh\fR\(rq.
Note, however, that turning off
\fIroot_sudo\fR
will also prevent root from running
\fBsudoedit\fR.
Disabling
\fIroot_sudo\fR
provides no real additional security; it exists purely for historical reasons.
This flag is
\fIon\fR
by default.
.TP 18n
rootpw
If set,
\fBsudo\fR
will prompt for the root password instead of the password of the invoking user.
This flag is
\fIoff\fR
by default.
.TP 18n
runaspw
If set,
\fBsudo\fR
will prompt for the password of the user defined by the
\fIrunas_default\fR
option (defaults to
\fRroot\fR)
instead of the password of the invoking user.
This flag is
\fIoff\fR
by default.
.TP 18n
set_home
If enabled and
\fBsudo\fR
is invoked with the
\fB\-s\fR
option the
\fRHOME\fR
environment variable will be set to the home directory of the target
user (which is root unless the
\fB\-u\fR
option is used).
This effectively makes the
\fB\-s\fR
option imply
\fB\-H\fR.
Note that
\fRHOME\fR
is already set when the the
\fIenv_reset\fR
option is enabled, so
\fIset_home\fR
is only effective for configurations where either
\fIenv_reset\fR
is disabled
or
\fRHOME\fR
is present in the
\fIenv_keep\fR
list.
This flag is
\fIoff\fR
by default.
.TP 18n
set_logname
Normally,
\fBsudo\fR
will set the
\fRLOGNAME\fR,
\fRUSER\fR
and
\fRUSERNAME\fR
environment variables to the name of the target user (usually root unless the
\fB\-u\fR
option is given).
However, since some programs (including the RCS revision control system) use
\fRLOGNAME\fR
to determine the real identity of the user, it may be desirable to
change this behavior.
This can be done by negating the set_logname option.
Note that if the
\fIenv_reset\fR
option has not been disabled, entries in the
\fIenv_keep\fR
list will override the value of
\fIset_logname\fR.
This flag is
\fIon\fR
by default.
.TP 18n
setenv
Allow the user to disable the
\fIenv_reset\fR
option from the command line via the
\fB\-E\fR
option.
Additionally, environment variables set via the command line are
not subject to the restrictions imposed by
\fIenv_check\fR,
\fIenv_delete\fR,
or
\fIenv_keep\fR.
As such, only trusted users should be allowed to set variables in this manner.
This flag is
\fIoff\fR
by default.
.TP 18n
shell_noargs
If set and
\fBsudo\fR
is invoked with no arguments it acts as if the
\fB\-s\fR
option had been given.
That is, it runs a shell as root (the shell is determined by the
\fRSHELL\fR
environment variable if it is set, falling back on the shell listed
in the invoking user's /etc/passwd entry if not).
This flag is
\fIoff\fR
by default.
.TP 18n
stay_setuid
Normally, when
\fBsudo\fR
executes a command the real and effective UIDs are set to the target
user (root by default).
This option changes that behavior such that the real UID is left
as the invoking user's UID.
In other words, this makes
\fBsudo\fR
act as a setuid wrapper.
This can be useful on systems that disable some potentially
dangerous functionality when a program is run setuid.
This option is only effective on systems that support either the
setreuid(2)
or
setresuid(2)
system call.
This flag is
\fIoff\fR
by default.
.TP 18n
targetpw
If set,
\fBsudo\fR
will prompt for the password of the user specified
by the
\fB\-u\fR
option (defaults to
\fRroot\fR)
instead of the password of the invoking user.
In addition, the time stamp file name will include the target user's name.
Note that this flag precludes the use of a uid not listed in the passwd
database as an argument to the
\fB\-u\fR
option.
This flag is
\fIoff\fR
by default.
.TP 18n
tty_tickets
If set, users must authenticate on a per-tty basis.
With this flag enabled,
\fBsudo\fR
will use a file named for the tty the user is
logged in on in the user's time stamp directory.
If disabled, the time stamp of the directory is used instead.
This flag is
\fIon\fR
by default.
.TP 18n
umask_override
If set,
\fBsudo\fR
will set the umask as specified by
\fIsudoers\fR
without modification.
This makes it possible to specify a more permissive umask in
\fIsudoers\fR
than the user's own umask and matches historical behavior.
If
\fIumask_override\fR
is not set,
\fBsudo\fR
will set the umask to be the union of the user's umask and what is specified in
\fIsudoers\fR.
This flag is
\fIoff\fR
by default.
.TP 18n
use_pty
If set,
\fBsudo\fR
will run the command in a pseudo-pty even if no I/O logging is being gone.
A malicious program run under
\fBsudo\fR
could conceivably fork a background process that retains to the user's
terminal device after the main program has finished executing.
Use of this option will make that impossible.
This flag is
\fIoff\fR
by default.
.TP 18n
visiblepw
By default,
\fBsudo\fR
will refuse to run if the user must enter a password but it is not
possible to disable echo on the terminal.
If the
\fIvisiblepw\fR
flag is set,
\fBsudo\fR
will prompt for a password even when it would be visible on the screen.
This makes it possible to run things like
\(lq\fRssh somehost sudo ls\fR\(rq
since by default,
ssh(1)
does
not allocate a tty when running a command.
This flag is
\fIoff\fR
by default.
.PP
\fBIntegers\fR:
.TP 18n
closefrom
Before it executes a command,
\fBsudo\fR
will close all open file descriptors other than standard input,
standard output and standard error (ie: file descriptors 0-2).
The
\fIclosefrom\fR
option can be used to specify a different file descriptor at which
to start closing.
The default is
\fR3\fR.
.TP 18n
passwd_tries
The number of tries a user gets to enter his/her password before
\fBsudo\fR
logs the failure and exits.
The default is
\fR3\fR.
.PP
\fBIntegers that can be used in a boolean context\fR:
.TP 18n
loglinelen
Number of characters per line for the file log.
This value is used to decide when to wrap lines for nicer log files.
This has no effect on the syslog log file, only the file log.
The default is
\fR80\fR
(use 0 or negate the option to disable word wrap).
.TP 18n
passwd_timeout
Number of minutes before the
\fBsudo\fR
password prompt times out, or
\fR0\fR
for no timeout.
The timeout may include a fractional component
if minute granularity is insufficient, for example
\fR2.5\fR.
The
default is
\fR0\fR.
.TP 18n
timestamp_timeout
.br
Number of minutes that can elapse before
\fBsudo\fR
will ask for a passwd again.
The timeout may include a fractional component if
minute granularity is insufficient, for example
\fR2.5\fR.
The default is
\fR5\fR.
Set this to
\fR0\fR
to always prompt for a password.
If set to a value less than
\fR0\fR
the user's time stamp will never expire.
This can be used to allow users to create or delete their own time stamps via
\(lq\fRsudo -v\fR\(rq
and
\(lq\fRsudo -k\fR\(rq
respectively.
.TP 18n
umask
Umask to use when running the command.
Negate this option or set it to 0777 to preserve the user's umask.
The actual umask that is used will be the union of the user's umask
and the value of the
\fIumask\fR
option, which defaults to
\fR0022\fR.
This guarantees
that
\fBsudo\fR
never lowers the umask when running a command.
Note: on systems that use PAM, the default PAM configuration may specify
its own umask which will override the value set in
\fIsudoers\fR.
.PP
\fBStrings\fR:
.TP 18n
badpass_message
Message that is displayed if a user enters an incorrect password.
The default is
\fRSorry, try again.\fR
unless insults are enabled.
.TP 18n
editor
A colon
(\(oq:\&\(cq)
separated list of editors allowed to be used with
\fBvisudo\fR.
\fBvisudo\fR
will choose the editor that matches the user's
\fREDITOR\fR
environment variable if possible, or the first editor in the
list that exists and is executable.
The default is
\fI/usr/bin/vi\fR.
.TP 18n
iolog_dir
The directory in which to store input/output logs when the
\fIlog_input\fR
or
\fIlog_output\fR
options are enabled or when the
\fRLOG_INPUT\fR
or
\fRLOG_OUTPUT\fR
tags are present for a command.
The default is
\fI/var/log/sudo-io\fR.
.TP 18n
mailsub
Subject of the mail sent to the
\fImailto\fR
user.
The escape
\fR%h\fR
will expand to the host name of the machine.
Default is
\(lq\fR*** SECURITY information for %h ***\fR\(rq.
.TP 18n
noexec_file
The
\fInoexec\fR
option specifies the the fully-qualified path to a shared library
containing dummy versions of the
\fBexecv\fR(),
\fBexecve\fR()
and
\fBfexecve\fR()
library functions that just return an error.
This is used to implement the
\fInoexec\fR
functionality on systems that support
\fRLD_PRELOAD\fR
or its equivalent.
Defaults to
\fI/usr/local/libexec/sudo_noexec.so\fR.
.TP 18n
passprompt
The default prompt to use when asking for a password; can be overridden via the
\fB\-p\fR
option or the
\fRSUDO_PROMPT\fR
environment variable.
The following percent
(\(oq%\(cq)
escape sequences are supported:
.PP
.RS 18n
.PD 0
.TP 6n
\fR%H\fR
expanded to the local host name including the domain name
(only if the machine's host name is fully qualified or the
\fIfqdn\fR
option is set)
.PD
.TP 6n
\fR%h\fR
expanded to the local host name without the domain name
.TP 6n
\fR%p\fR
expanded to the user whose password is being asked for (respects the
\fIrootpw\fR,
\fItargetpw\fR
and
\fIrunaspw\fR
flags in
\fIsudoers\fR)
.TP 6n
\fR\&%U\fR
expanded to the login name of the user the command will
be run as (defaults to root)
.TP 6n
\fR%u\fR
expanded to the invoking user's login name
.TP 6n
\fR%%\fR
two consecutive
\fR%\fR
characters are collapsed into a single
\fR%\fR
character
.PP
The default value is
\(lq\fRPassword:\fR\(rq.
.RE
.TP 18n
runas_default
The default user to run commands as if the
\fB\-u\fR
option is not specified on the command line.
This defaults to
\fRroot\fR.
.TP 18n
syslog_badpri
Syslog priority to use when user authenticates unsuccessfully.
Defaults to
\fRalert\fR.
.sp
The following syslog priorities are supported:
\fBalert\fR,
\fBcrit\fR,
\fBdebug\fR,
\fBemerg\fR,
\fBerr\fR,
\fBinfo\fR,
\fBnotice\fR,
and
\fBwarning\fR.
.TP 18n
syslog_goodpri
Syslog priority to use when user authenticates successfully.
Defaults to
\fRnotice\fR.
.sp
See
\fIsyslog_badpri\fR
for the list of supported syslog priorities.
.TP 18n
sudoers_locale
Locale to use when parsing the sudoers file, logging commands, and
sending email.
Note that changing the locale may affect how sudoers is interpreted.
Defaults to
\(lq\fRC\fR\(rq.
.TP 18n
timestampdir
The directory in which
\fBsudo\fR
stores its time stamp files.
The default is
\fI/var/db/sudo\fR.
.TP 18n
timestampowner
The owner of the time stamp directory and the time stamps stored therein.
The default is
\fRroot\fR.
.TP 18n
.PD
.PD
.PD
env_check
Environment variables to be removed from the user's environment
unless they are considered
\(lqsafe\(rq.
For all variables except
Li TZ ,
\(lqsafe\(rq
means that the variable's value does not contain any
the variable's value contains
\(oq%\(cq
or
\(oq/\(cq
characters.
This can be used to guard against printf-style format vulnerabilities
in poorly-written programs.
The
\fRTZ\fR
variable is considerd unsafe if any of the following are true:
.PP
.RS 18n
.PD 0
.TP 4n
\fB\(bu\fR
It consists of a fully-qualified path name that does not match
the location of the
\fIzoneinfo\fR
directory.
.PD
.TP 4n
\fB\(bu\fR
It contains a
\fI..\fR
path element.
.TP 4n
\fB\(bu\fR
It contains white space or non-printable characters.
.TP 4n
\fB\(bu\fR
It is longer than the value of
\fRPATH_MAX\fR.
.PP
The argument may be a double-quoted, space-separated list or a
single value without double-quotes.
The list can be replaced, added to, deleted from, or disabled by using
the
\fR=\fR,
\fR+=\fR,
\fR-=\fR,
and
\fR\&!\fR
operators respectively.
Regardless of whether the
\fRenv_reset\fR
option is enabled or disabled, variables specified by
\fRenv_check\fR
will be preserved in the environment if they pass the aforementioned check.
The default list of environment variables to check is displayed when
\fBsudo\fR
is run by root with
the
\fB\-V\fR
option.
.RE
.TP 18n
env_delete
Environment variables to be removed from the user's environment when the
\fIenv_reset\fR
option is not in effect.
The argument may be a double-quoted, space-separated list or a
single value without double-quotes.
The list can be replaced, added to, deleted from, or disabled by using the
\fR=\fR,
\fR+=\fR,
\fR-=\fR,
and
\fR\&!\fR
operators respectively.
The default list of environment variables to remove is displayed when
\fBsudo\fR
is run by root with the
\fB\-V\fR
option.
Note that many operating systems will remove potentially dangerous
variables from the environment of any setuid process (such as
\fBsudo\fR).
.TP 18n
env_keep
Environment variables to be preserved in the user's environment when the
\fIenv_reset\fR
option is in effect.
This allows fine-grained control over the environment
\fBsudo\fR-spawned
processes will receive.
The argument may be a double-quoted, space-separated list or a
single value without double-quotes.
The list can be replaced, added to, deleted from, or disabled by using the
\fR=\fR,
\fR+=\fR,
\fR-=\fR,
and
\fR\&!\fR
operators respectively.
The default list of variables to keep
is displayed when
\fBsudo\fR
is run by root with the
\fB\-V\fR
option.
.SH "FILES"
.TP 26n
\fI/private/etc/sudoers\fR
List of who can run what
.TP 26n
\fI/etc/group\fR
Local groups file
.TP 26n
\fI/etc/netgroup\fR
List of network groups
.TP 26n
\fI/var/log/sudo-io\fR
I/O log files
.SH "EXAMPLES"
Below are example
\fIsudoers\fR
entries.
Admittedly, some of these are a bit contrived.
First, we allow a few environment variables to pass and then define our
\fIaliases\fR:
.nf
.sp
.RS 0n
# Run X applications through sudo; HOME is used to find the
# .Xauthority file.  Note that other programs use HOME to find
# configuration files and this may lead to privilege escalation!
Defaults env_keep += "DISPLAY HOME"

# User alias specification
User_Alias	FULLTIMERS = millert, mikef, dowdy
User_Alias	PARTTIMERS = bostley, jwfox, crawl
User_Alias	WEBMASTERS = will, wendy, wim

# Runas alias specification
Runas_Alias	OP = root, operator
Runas_Alias	DB = oracle, sybase
Runas_Alias	ADMINGRP = adm, oper

# Host alias specification
Host_Alias	SPARC = bigtime, eclipse, moet, anchor :\e
		SGI = grolsch, dandelion, black :\e
		ALPHA = widget, thalamus, foobar :\e
		HPPA = boa, nag, python
Host_Alias	CUNETS = 128.138.0.0/255.255.0.0
Host_Alias	CSNETS = 128.138.243.0, 128.138.204.0/24, 128.138.242.0
Host_Alias	SERVERS = master, mail, www, ns
Host_Alias	CDROM = orion, perseus, hercules

# Cmnd alias specification
Cmnd_Alias	DUMPS = /usr/bin/mt, /usr/sbin/dump, /usr/sbin/rdump,\e
			/usr/sbin/restore, /usr/sbin/rrestore
Cmnd_Alias	KILL = /usr/bin/kill
Cmnd_Alias	PRINTING = /usr/sbin/lpc, /usr/bin/lprm
Cmnd_Alias	SHUTDOWN = /usr/sbin/shutdown
Cmnd_Alias	HALT = /usr/sbin/halt
Cmnd_Alias	REBOOT = /usr/sbin/reboot
Cmnd_Alias	SHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh,\e
			 /usr/local/bin/tcsh, /usr/bin/rsh,\e
			 /usr/local/bin/zsh
Cmnd_Alias	SU = /usr/bin/su
Cmnd_Alias	PAGERS = /usr/bin/more, /usr/bin/pg, /usr/bin/less
.RE
.fi
.PP
Here we override some of the compiled in default values.
We want
\fBsudo\fR
to log via
syslog(3)
using the
\fIauth\fR
facility in all cases.
We don't want to subject the full time staff to the
\fBsudo\fR
lecture, user
\fBmillert\fR
need not give a password, and we don't want to reset the
\fRLOGNAME\fR,
\fRUSER\fR
or
\fRUSERNAME\fR
environment variables when running commands as root.
Additionally, on the machines in the
\fISERVERS\fR
\fRHost_Alias\fR,
we keep an additional local log file and make sure we log the year
in each log line since the log entries will be kept around for several years.
Lastly, we disable shell escapes for the commands in the PAGERS
\fRCmnd_Alias\fR
(\fI/usr/bin/more\fR,
\fI/usr/bin/pg\fR
and
\fI/usr/bin/less\fR)
\&.
.nf
.sp
.RS 0n
# Override built-in defaults
Defaults		syslog=auth
Defaults>root		!set_logname
Defaults:FULLTIMERS	!lecture
Defaults:millert	!authenticate
Defaults@SERVERS	log_year, logfile=/var/log/sudo.log
Defaults!PAGERS		noexec
.RE
.fi
.PP
The
\fIUser specification\fR
is the part that actually determines who may run what.
.nf
.sp
.RS 0n
root		ALL = (ALL) ALL
%wheel		ALL = (ALL) ALL
.RE
.fi
.PP
We let
\fBroot\fR
and any user in group
\fBwheel\fR
run any command on any host as any user.
.nf
.sp
.RS 0n
FULLTIMERS	ALL = NOPASSWD: ALL
.RE
.fi
.PP
Full time sysadmins
(\fBmillert\fR,
\fBmikef\fR,
and
\fBdowdy\fR)
may run any command on any host without authenticating themselves.
.nf
.sp
.RS 0n
PARTTIMERS	ALL = ALL
.RE
.fi
.PP
Part time sysadmins
\fBbostley\fR,
\fBjwfox\fR,
and
\fBcrawl\fR)
may run any command on any host but they must authenticate themselves
first (since the entry lacks the
\fRNOPASSWD\fR
tag).
.nf
.sp
.RS 0n
jack		CSNETS = ALL
.RE
.fi
.PP
The user
\fBjack\fR
may run any command on the machines in the
\fICSNETS\fR
alias (the networks
\fR128.138.243.0\fR,
\fR128.138.204.0\fR,
and
\fR128.138.242.0\fR).
Of those networks, only
\fR128.138.204.0\fR
has an explicit netmask (in CIDR notation) indicating it is a class C network.
For the other networks in
\fICSNETS\fR,
the local machine's netmask will be used during matching.
.nf
.sp
.RS 0n
lisa		CUNETS = ALL
.RE
.fi
.PP
The user
\fBlisa\fR
may run any command on any host in the
\fICUNETS\fR
alias (the class B network
\fR128.138.0.0\fR).
.nf
.sp
.RS 0n
operator	ALL = DUMPS, KILL, SHUTDOWN, HALT, REBOOT, PRINTING,\e
		sudoedit /etc/printcap, /usr/oper/bin/
.RE
.fi
.PP
The
\fBoperator\fR
user may run commands limited to simple maintenance.
Here, those are commands related to backups, killing processes, the
printing system, shutting down the system, and any commands in the
directory
\fI/usr/oper/bin/\fR.
.nf
.sp
.RS 0n
joe		ALL = /usr/bin/su operator
.RE
.fi
.PP
The user
\fBjoe\fR
may only
su(1)
to operator.
.nf
.sp
.RS 0n
pete		HPPA = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root

%opers		ALL = (: ADMINGRP) /usr/sbin/
.RE
.fi
.PP
Users in the
\fBopers\fR
group may run commands in
\fI/usr/sbin/\fR
as themselves
with any group in the
\fIADMINGRP\fR
\fRRunas_Alias\fR
(the
\fBadm\fR
and
\fBoper\fR
groups).
.PP
The user
\fBpete\fR
is allowed to change anyone's password except for
root on the
\fIHPPA\fR
machines.
Note that this assumes
passwd(1)
does not take multiple user names on the command line.
.nf
.sp
.RS 0n
bob		SPARC = (OP) ALL : SGI = (OP) ALL
.RE
.fi
.PP
The user
\fBbob\fR
may run anything on the
\fISPARC\fR
and
\fISGI\fR
machines as any user listed in the
\fIOP\fR
\fRRunas_Alias\fR
(\fBroot\fR
and
\fBoperator\fR.)
.nf
.sp
.RS 0n
jim		+biglab = ALL
.RE
.fi
.PP
The user
\fBjim\fR
may run any command on machines in the
\fIbiglab\fR
netgroup.
\fBsudo\fR
knows that
\(lqbiglab\(rq
is a netgroup due to the
\(oq+\(cq
prefix.
.nf
.sp
.RS 0n
+secretaries	ALL = PRINTING, /usr/bin/adduser, /usr/bin/rmuser
.RE
.fi
.PP
Users in the
\fBsecretaries\fR
netgroup need to help manage the printers as well as add and remove users,
so they are allowed to run those commands on all machines.
.nf
.sp
.RS 0n
fred		ALL = (DB) NOPASSWD: ALL
.RE
.fi
.PP
The user
\fBfred\fR
can run commands as any user in the
\fIDB\fR
\fRRunas_Alias\fR
(\fBoracle\fR
or
\fBsybase\fR)
without giving a password.
.nf
.sp
.RS 0n
john		ALPHA = /usr/bin/su [!-]*, !/usr/bin/su *root*
.RE
.fi
.PP
On the
\fIALPHA\fR
machines, user
\fBjohn\fR
may su to anyone except root but he is not allowed to specify any options
to the
su(1)
command.
.nf
.sp
.RS 0n
jen		ALL, !SERVERS = ALL
.RE
.fi
.PP
The user
\fBjen\fR
may run any command on any machine except for those in the
\fISERVERS\fR
\fRHost_Alias\fR
(master, mail, www and ns).
.nf
.sp
.RS 0n
jill		SERVERS = /usr/bin/, !SU, !SHELLS
.RE
.fi
.PP
For any machine in the
\fISERVERS\fR
\fRHost_Alias\fR,
\fBjill\fR
may run
any commands in the directory
\fI/usr/bin/\fR
except for those commands
belonging to the
\fISU\fR
and
\fISHELLS\fR
\fRCmnd_Aliases\fR.
.nf
.sp
.RS 0n
steve		CSNETS = (operator) /usr/local/op_commands/
.RE
.fi
.PP
The user
\fBsteve\fR
may run any command in the directory /usr/local/op_commands/
but only as user operator.
.nf
.sp
.RS 0n
matt		valkyrie = KILL
.RE
.fi
.PP
On his personal workstation, valkyrie,
\fBmatt\fR
needs to be able to kill hung processes.
.nf
.sp
.RS 0n
WEBMASTERS	www = (www) ALL, (root) /usr/bin/su www
.RE
.fi
.PP
On the host www, any user in the
\fIWEBMASTERS\fR
\fRUser_Alias\fR
(will, wendy, and wim), may run any command as user www (which owns the
web pages) or simply
su(1)
to www.
.nf
.sp
.RS 0n
ALL		CDROM = NOPASSWD: /sbin/umount /CDROM,\e
		/sbin/mount -o nosuid\,nodev /dev/cd0a /CDROM
.RE
.fi
.PP
Any user may mount or unmount a CD-ROM on the machines in the CDROM
\fRHost_Alias\fR
(orion, perseus, hercules) without entering a password.
This is a bit tedious for users to type, so it is a prime candidate
for encapsulating in a shell script.
.SH "SECURITY NOTES"
.SS "Limitations of the \(oq!\&\(cq operator"
It is generally not effective to
\(lqsubtract\(rq
commands from
\fBALL\fR
using the
\(oq!\&\(cq
operator.
A user can trivially circumvent this by copying the desired command
to a different name and then executing that.
For example:
.nf
.sp
.RS 0n
bill	ALL = ALL, !SU, !SHELLS
.RE
.fi
.PP
Doesn't really prevent
\fBbill\fR
from running the commands listed in
\fISU\fR
or
\fISHELLS\fR
since he can simply copy those commands to a different name, or use
a shell escape from an editor or other program.
Therefore, these kind of restrictions should be considered
advisory at best (and reinforced by policy).
.PP
In general, if a user has sudo
\fBALL\fR
there is nothing to prevent them from creating their own program that gives
them a root shell (or making their own copy of a shell) regardless of any
\(oq!\&\(cq
elements in the user specification.
.SS "Security implications of \fIfast_glob\fR"
If the
\fIfast_glob\fR
option is in use, it is not possible to reliably negate commands where the
path name includes globbing (aka wildcard) characters.
This is because the C library's
fnmatch(3)
function cannot resolve relative paths.
While this is typically only an inconvenience for rules that grant privileges,
it can result in a security issue for rules that subtract or revoke privileges.
.PP
For example, given the following
\fIsudoers\fR
entry:
.nf
.sp
.RS 0n
john	ALL = /usr/bin/passwd [a-zA-Z0-9]*, /usr/bin/chsh [a-zA-Z0-9]*,\e
              /usr/bin/chfn [a-zA-Z0-9]*, !/usr/bin/* root
.RE
.fi
.PP
User
\fBjohn\fR
can still run
\fR/usr/bin/passwd root\fR
if
\fIfast_glob\fR
is enabled by changing to
\fI/usr/bin\fR
and running
\fR./passwd root\fR
instead.
.SS "Preventing shell escapes"
Once
\fBsudo\fR
executes a program, that program is free to do whatever
it pleases, including run other programs.
This can be a security issue since it is not uncommon for a program to
allow shell escapes, which lets a user bypass
\fBsudo\fR's
access control and logging.
Common programs that permit shell escapes include shells (obviously),
editors, paginators, mail and terminal programs.
.PP
There are two basic approaches to this problem:
.TP 10n
restrict
Avoid giving users access to commands that allow the user to run
arbitrary commands.
Many editors have a restricted mode where shell
escapes are disabled, though
\fBsudoedit\fR
is a better solution to
running editors via
\fBsudo\fR.
Due to the large number of programs that
offer shell escapes, restricting users to the set of programs that
do not is often unworkable.
.TP 10n
noexec
Many systems that support shared libraries have the ability to
override default library functions by pointing an environment
variable (usually
\fRLD_PRELOAD\fR)
to an alternate shared library.
On such systems,
\fBsudo\fR's
\fInoexec\fR
functionality can be used to prevent a program run by
\fBsudo\fR
from executing any other programs.
Note, however, that this applies only to native dynamically-linked
executables.
Statically-linked executables and foreign executables
running under binary emulation are not affected.
.sp
The
\fInoexec\fR
feature is known to work on SunOS, Solaris, *BSD,
Linux, IRIX, Tru64 UNIX, MacOS X, HP-UX 11.x and AIX 5.3 and above.
It should be supported on most operating systems that support the
\fRLD_PRELOAD\fR
environment variable.
Check your operating system's manual pages for the dynamic linker
(usually ld.so, ld.so.1, dyld, dld.sl, rld, or loader) to see if
\fRLD_PRELOAD\fR
is supported.
.sp
On Solaris 10 and higher,
\fInoexec\fR
uses Solaris privileges instead of the
\fRLD_PRELOAD\fR
environment variable.
.sp
To enable
\fInoexec\fR
for a command, use the
\fRNOEXEC\fR
tag as documented
in the User Specification section above.
Here is that example again:
.nf
.sp
.RS 10n
aaron	shanty = NOEXEC: /usr/bin/more, /usr/bin/vi
.RE
.fi
.RS 10n
.sp
This allows user
\fBaaron\fR
to run
\fI/usr/bin/more\fR
and
\fI/usr/bin/vi\fR
with
\fInoexec\fR
enabled.
This will prevent those two commands from
executing other commands (such as a shell).
If you are unsure whether or not your system is capable of supporting
\fInoexec\fR
you can always just try it out and check whether shell escapes work when
\fInoexec\fR
is enabled.
.RE
.PP
Note that restricting shell escapes is not a panacea.
Programs running as root are still capable of many potentially hazardous
operations (such as changing or overwriting files) that could lead
to unintended privilege escalation.
In the specific case of an editor, a safer approach is to give the
user permission to run
\fBsudoedit\fR.
.SH "SEE ALSO"
ssh(1),
su(1),
fnmatch(3),
glob(3),
mktemp(3),
strftime(3),
sudoers.ldap(5),
sudo(8),
visudo(8)
.SH "CAVEATS"
The
\fIsudoers\fR
file should
\fBalways\fR
be edited by the
\fBvisudo\fR
command which locks the file and does grammatical checking.
It is
imperative that
\fIsudoers\fR
be free of syntax errors since
\fBsudo\fR
will not run with a syntactically incorrect
\fIsudoers\fR
file.
.PP
When using netgroups of machines (as opposed to users), if you
store fully qualified host name in the netgroup (as is usually the
case), you either need to have the machine's host name be fully qualified
as returned by the
\fRhostname\fR
command or use the
\fIfqdn\fR
option in
\fIsudoers\fR.
.SH "BUGS"
If you feel you have found a bug in
\fBsudo\fR,
please submit a bug report at http://www.sudo.ws/sudo/bugs/
.SH "SUPPORT"
Limited free support is available via the sudo-users mailing list,
see http://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or
search the archives.
.SH "DISCLAIMER"
\fBsudo\fR
is provided
\(lqAS IS\(rq
and any express or implied warranties, including, but not limited
to, the implied warranties of merchantability and fitness for a
particular purpose are disclaimed.
See the LICENSE file distributed with
\fBsudo\fR
or http://www.sudo.ws/sudo/license.html for complete details.
